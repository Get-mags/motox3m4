! function(t) {
    function e(s) {
        if (i[s]) return i[s].exports;
        var n = i[s] = {
            i: s,
            l: !1,
            exports: {}
        };
        return t[s].call(n.exports, n, n.exports, e), n.l = !0, n.exports
    }
    var i = {};
    e.m = t, e.c = i, e.d = function(t, i, s) {
        e.o(t, i) || Object.defineProperty(t, i, {
            configurable: !1,
            enumerable: !0,
            get: s
        })
    }, e.n = function(t) {
        var i = t && t.__esModule ? function e() {
            return t.default
        } : function e() {
            return t
        };
        return e.d(i, "a", i), i
    }, e.o = function(t, e) {
        return Object.prototype.hasOwnProperty.call(t, e)
    }, e.p = "", e(e.s = 54)
}([function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = i(6);
            e.MyRand = s.MyRand, e.UiStrUtil = s.UiStrUtil;
            var n = i(40);
            e.Drawing = n.Drawing;
            var o = i(18);
            e.NapeUtil = o.NapeUtil;
            var a = i(64);
            e.GameCore = a.GameCore;
            var r = i(65);
            e.GameObject = r.GameObject;
            var h = i(66);
            e.IDisposed = h.IDisposed;
            var l = i(67);
            e.IUpdated = l.IUpdated;
            var c = i(68);
            e.ISafed = c.ISafed;
            var u = i(69);
            e.IRestarted = u.IRestarted;
            var d = i(70);
            e.IActivatable = d.IActivatable;
            var p = i(41);
            e.GamePhysics = p.GamePhysics;
            var f = i(42);
            e.NapePhysics = f.NapePhysics;
            var y = i(71);
            e.GameView = y.GameView;
            var g = i(31);
            e.RaceCamera = g.RaceCamera;
            var m = i(32);
            e.CameraPathes = m.CameraPathes;
            var v = i(72);
            e.CarParams = v.CarParams;
            var b = i(73);
            e.CarUpgrades = b.CarUpgrades;
            var x = i(74);
            e.RaceCars = x.RaceCars;
            var _ = i(75);
            e.WeaponParams = _.WeaponParams;
            var w = i(76);
            e.Inventory = w.Inventory;
            var P = i(77);
            e.LeagueVO = P.LeagueVO;
            var C = i(78);
            e.MapVO = C.MapVO;
            var T = i(79);
            e.RaceData = T.RaceData;
            var S = i(80);
            e.BgElVo = S.BgElVo;
            var A = i(81);
            e.ShopCarVO = A.ShopCarVO;
            var E = i(43);
            e.CarsData = E.CarsData;
            var I = i(34);
            e.GameData = I.GameData;
            var M = i(33);
            e.RacesData = M.RacesData;
            var O = i(82);
            e.ShopData = O.ShopData;
            var R = i(83);
            e.CarBuilder = R.CarBuilder;
            var B = i(85);
            e.RaceBuilder = B.RaceBuilder;
            var D = i(88);
            e.FrameGraphic = D.FrameGraphic;
            var L = i(46);
            e.GroundPartClip = L.GroundPartClip;
            var k = i(45);
            e.SmokePartClip = k.SmokePartClip;
            var F = i(89);
            e.TrailPart = F.TrailPart;
            var G = i(90);
            e.WheelGraphic = G.WheelGraphic;
            var U = i(91);
            e.BgEl = U.BgEl;
            var N = i(92);
            e.LandscapeShape = N.LandscapeShape;
            var j = i(47);
            e.CarObject = j.CarObject;
            var W = i(93);
            e.BikeObject = W.BikeObject;
            var X = i(94);
            e.CorpseObject = X.CorpseObject;
            var H = i(95);
            e.DriverObject = H.DriverObject;
            var V = i(96);
            e.FrameObject = V.FrameObject;
            var Y = i(97);
            e.PartObject = Y.PartObject;
            var q = i(98);
            e.WheelObject = q.WheelObject;
            var z = i(99);
            e.BgObject = z.BgObject;
            var K = i(100);
            e.DecorActObject = K.DecorActObject;
            var J = i(101);
            e.DecorMultiObject = J.DecorMultiObject;
            var Z = i(48);
            e.DecorObject = Z.DecorObject;
            var Q = i(102);
            e.VectorDecor = Q.VectorDecor;
            var $ = i(38);
            e.CarExplodeObject = $.CarExplodeObject;
            var tt = i(103);
            e.GlassExplodeObject = tt.GlassExplodeObject;
            var et = i(37);
            e.TrailParticlesSystem = et.TrailParticlesSystem;
            var it = i(44);
            e.TrailPartObject = it.TrailPartObject;
            var st = i(104);
            e.GlassBlock = st.GlassBlock;
            var nt = i(49);
            e.GlassBlockPart = nt.GlassBlockPart;
            var ot = i(105);
            e.GroundObject = ot.GroundObject;
            var at = i(106);
            e.PlankObject = at.PlankObject;
            var rt = i(107);
            e.ShaperObject = rt.ShaperObject;
            var ht = i(108);
            e.WaterObject = ht.WaterObject;
            var lt = i(110);
            e.BoostObject = lt.BoostObject;
            var ct = i(51);
            e.DynamicBodyObject = ct.DynamicBodyObject;
            var ut = i(111);
            e.FinishObject = ut.FinishObject;
            var dt = i(112);
            e.MotorObject = dt.MotorObject;
            var pt = i(113);
            e.MoverPatherObject = pt.MoverPatherObject;
            var ft = i(114);
            e.PivotObject = ft.PivotObject;
            var yt = i(115);
            e.RemovedBodyObjects = yt.RemovedBodyObjects;
            var gt = i(116);
            e.SafePointObject = gt.SafePointObject;
            var mt = i(117);
            e.SpikesObject = mt.SpikesObject;
            var vt = i(118);
            e.TntObject = vt.TntObject;
            var bt = i(119);
            e.ToggleObject = bt.ToggleObject;
            var xt = i(120);
            e.CameraZone = xt.CameraZone;
            var _t = i(121);
            e.WaypointObject = _t.WaypointObject;
            var wt = i(1);
            e.ObjectTypes = wt.ObjectTypes;
            var Pt = i(11);
            e.CbTypes = Pt.CbTypes;
            var Ct = i(7);
            e.Filters = Ct.Filters;
            var Tt = i(9);
            e.Materials = Tt.Materials;
            var St = i(122);
            e.MaxPhysics = St.MaxPhysics;
            var At = i(123);
            e.BodyEffector = At.BodyEffector;
            var Et = i(124);
            e.BoostEffector = Et.BoostEffector;
            var It = i(125);
            e.PlayerController = It.PlayerController;
            var Mt = i(52);
            e.CarController = Mt.CarController;
            var Ot = i(5);
            e.GraphicUtil = Ot.GraphicUtil;
            var Rt = i(50);
            e.PhysicUtil = Rt.PhysicUtil;
            var Bt = i(2);
            e.MaxGameView = Bt.MaxGameView
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = function() {
                function t() {}
                return t.BG = 0, t.LANDSCAPE = 1, t.LANDSCAPE_SHAPE = 9, t.CAR = 2, t.BULLET = 3, t.FRONT = 4, t.OBJECT = 5, t.EFFECT = 6, t.CAR_PART = 7, t.LANDSCAPE_BACK = 8, t
            }();
            e.ObjectTypes = s
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0;
            var n = i(0),
                o = i(12),
                a = i(1),
                r = Phaser.Group,
                h = i(10),
                l = i(6),
                c = i(3),
                u = i(35),
                d = i(4),
                p = function() {
                    function t() {}
                    return t
                }();
            e.default = p;
            var f = function() {
                function t(t, e, i) {
                    this.target = i, this.method = e, this.key = t
                }
                return t
            }();
            e.RenderVO = f;
            var y = function() {
                function t() {}
                return t.BG = [
                    ["Bg0_0", "Bg1_0", "Bg2_0"],
                    ["Bg0_0", "Bg1_0", "Bg2_0"]
                ], t.ROAD_LINE = [
                    ["line", "RoadLine0_1", "RoadLine1_4", "RoadLine0_3", "RoadLine0_4", "Plank0", "line", "RoadLine0_7", "RoadLine0_8", "LineSpike0", "UnLine0", "UnLine1", "LineChain", "CandyGround", "RoadLine0_Bg"]
                ], t.PILLAR_LINE = [
                    ["RoadPillar0_0", "CandyPillar", "RoadPillar0_2"]
                ], t.ROAD_TILE = ["RoadTile0", "RoadTile0", "RoadTile0"], t.ROAD_SHAPE = [
                    ["RoadTile0_1", "RoadTile1_1", "RoadTile0", "UnTile0", "UnTile1", "UnTile2", "RoadTile0_Bg"],
                    ["RoadTile0_1", "RoadTile1_1", "RoadTile0", "UnTile0", "UnTile1", "UnTile2", "RoadTile0_Bg"],
                    ["RoadTile0_1", "RoadTile1_1", "RoadTile0", "UnTile0", "UnTile1", "UnTile2", "RoadTile0_Bg"]
                ], t.DECORS = [
                    ["Dec1", "Dec2", "Dec3", "Dec4", "Dec5", "Dec6", "Dec7", "Dec8", "Dec9", "Dec10", "Dec11", "Dec12", "Dec13", "Dec14", "Dec15", "Dec16", "Dec17", "Dec18", "Dec19", "Dec29", "Sign1", "Sign2", "Sign15", "Sign21", "SignPillar", "PillarTop0_0", "PillarTop0_1", "PillarTop0_2", "PillarBot0_0", "PillarBot0_1", "PillarBot0_2", "GlassCrashed0_0", "GlassCrashed0_1", "GlassCrashed0_2", "GlassCrashed0_3", "GlassCrashed0_4", "GlassCrashed0_5", "BoostAnim", "RocketAnim", "Pivot0", "particle_boost", "GeyserBase", "geyser_anim", "PlankCandy0", "PlankCandy1"],
                    ["Dec1", "Dec2", "Dec3", "Dec4", "Dec5", "Dec6", "Dec7", "Dec8", "Dec9", "Dec10", "Dec11", "Dec12", "Dec13", "Dec14", "Dec15", "Dec16", "Dec17", "Dec18", "Dec19", "Dec29", "Sign1", "Sign2", "Sign15", "Sign21", "SignPillar", "PillarTop0_0", "PillarTop0_1", "PillarTop0_2", "PillarBot0_0", "PillarBot0_1", "PillarBot0_2", "GlassCrashed0_0", "GlassCrashed0_1", "GlassCrashed0_2", "GlassCrashed0_3", "GlassCrashed0_4", "GlassCrashed0_5", "BoostAnim", "RocketAnim", "Pivot0", "particle_boost", "GeyserBase", "geyser_anim", "PlankCandy0", "PlankCandy1"],
                    ["Dec13", "Dec14", "Dec15", "Dec16", "Dec29", "Sign1", "Sign2", "Sign15", "Sign21", "SignPillar", "PillarTop0_0", "PillarTop0_1", "PillarTop0_2", "PillarBot0_0", "PillarBot0_1", "PillarBot0_2", "GlassCrashed0_0", "GlassCrashed0_1", "GlassCrashed0_2", "GlassCrashed0_3", "GlassCrashed0_4", "GlassCrashed0_5", "BoostAnim", "RocketAnim", "Pivot0", "particle_boost", "GeyserBase", "geyser_anim", "PlankCandy0", "PlankCandy1"]
                ], t.OBJECTS = [
                    ["Tnt1", "BarrelE", "SpikesE", "Removed0", "Removed1", "Plank0", "GlassCrashed0", "GlassCrashed1", "BoostE", "PlankCandy", "PlankBone"],
                    ["Tnt1", "BarrelE", "SpikesE", "Removed0", "Removed1", "Plank0", "GlassCrashed0", "GlassCrashed1", "BoostE", "PlankCandy", "PlankBone"],
                    ["Tnt1", "BarrelE", "SpikesE", "Removed0", "Removed1", "Plank0", "GlassCrashed0", "GlassCrashed1", "BoostE", "PlankCandy", "PlankBone"]
                ], t.FRAMES_ANCHORX = [.48, null, .458, null, .594], t.FRAMES_ANCHORY = [.65, null, .629, null, .647], t.SUSPEND_BACK_ANCHORX = [.05, null, .05, null, -.06], t.SUSPEND_BACK_ANCHORY = [.5, null, .5, null, .5], t.SUSPEND_FRONT_ANCHORX = [.8, null, .8, null, .904], t.SUSPEND_FRONT_ANCHORY = [.2, null, .5, null, .478], t.HEAD_ANCHORX = [.5, null, .394, null, .603], t.HEAD_ANCHORY = [.5, null, .518, null, .372], t.HIP_ANCHORX = [.5, null, .545, null, .571], t.HIP_ANCHORY = [.5, null, .5, null, .5], t.SHIN_ANCHORX = [.5, null, .388, null, .409], t.SHIN_ANCHORY = [.5, null, .516, null, .448], t.WHEELS = [
                    ["Wheel_1_0"],
                    ["Wheel_1_0"],
                    ["Wheel_3_0"],
                    ["Wheel_3_0"],
                    ["Wheel_5_0"]
                ], t
            }();
            e.AssetsList = y;
            var g = function() {
                function t() {
                    this.storage = {}
                }
                return t.prototype.getByKey = function(t) {
                    return this.storage[t]
                }, t.prototype.add = function(t, e) {
                    this.storage[t] = e
                }, t.prototype.dispose = function() {
                    for (var t in this.storage) this.storage[t] && (this.storage[t] = null)
                }, Object.defineProperty(t, "instance", {
                    get: function() {
                        return null === t._instance && (t._instance = new t), t._instance
                    },
                    enumerable: !0,
                    configurable: !0
                }), t.currentAatlass = c.Atlases.Theme0, t._instance = null, t
            }();
            e.AssetsStorage = g;
            var m = function(t) {
                function e(e) {
                    var i = t.call(this, e) || this;
                    return i.gamePadLayer = null, i.bg = new r(i.game), i.bg.interactive = !1, i.bg.scale.set(2), i.race = new r(i.game), i.race.interactive = !1, i.landscapeShapes = new r(i.game, i.race), i.landscape = new r(i.game, i.race), i.objects = new r(i.game, i.race), i.front = new r(i.game, i.race), i.gui = new r(i.game), i.raceCamera = new n.RaceCamera, i.raceCamera.setup(i.race, o.default.GAME_W, o.default.GAME_H, d.MaxGameCore.instance), i.gamePadLayer = i.game.add.group(), u.default.instance.init(i.gamePadLayer, i.game), i
                }
                return s(e, t), e.prototype.start = function() {
                    t.prototype.start.call(this), this.game.world.addChild(this.bg), this.game.world.addChild(this.race), this.game.world.addChild(this.gui), this.game.world.addChild(this.gamePadLayer), this.raceCamera.setup(this.race, o.default.GAME_W, o.default.GAME_H, d.MaxGameCore.instance)
                }, e.prototype.add = function(t) {
                    t.type === a.ObjectTypes.BG ? this.bg.addChild(t.graphic) : t.type === a.ObjectTypes.LANDSCAPE ? this.landscape.addChild(t.graphic) : t.type === a.ObjectTypes.LANDSCAPE_SHAPE ? this.landscapeShapes.addChild(t.graphic) : t.type === a.ObjectTypes.LANDSCAPE_BACK ? this.landscape.addChildAt(t.graphic, 0) : t.type === a.ObjectTypes.CAR ? this.objects.addChild(t.graphic) : t.type === a.ObjectTypes.OBJECT ? this.objects.addChild(t.graphic) : t.type === a.ObjectTypes.BULLET ? this.objects.addChild(t.graphic) : t.type === a.ObjectTypes.EFFECT ? this.front.addChild(t.graphic) : t.type === a.ObjectTypes.CAR_PART ? this.front.addChildAt(t.graphic, 0) : t.type === a.ObjectTypes.FRONT && this.front.addChild(t.graphic)
                }, e.prototype.update = function(e, i, s, o) {
                    if (t.prototype.update.call(this, e, i, s, o), s) {
                        var a = n.RacesData.TARGET_X,
                            r = n.RacesData.TARGET_Y;
                        n.CameraZone.focusedOnPoint ? this.raceCamera.focusOnPoint(a, r) : n.CameraZone.current ? this.raceCamera.focusOnCameraZone(a, r) : this.raceCamera.focusOnCar(a, r, e)
                    }
                }, e.prototype.release = function() {
                    this.raceCamera.release(), this.raceCamera = null, this.car = null, this.bg = null, this.landscape = null, this.landscapeShapes = null, this.objects = null, this.front = null, this.gui = null
                }, e
            }(n.GameView);
            e.MaxGameView = m;
            var v = function() {
                function t() {
                    this.complete = new h.Signal
                }
                return Object.defineProperty(t, "instance", {
                    get: function() {
                        return null === t._instance && (t._instance = new t), t._instance
                    },
                    enumerable: !0,
                    configurable: !0
                }), t.prototype.start = function() {
                    this.theme = 0;
                    var t = null,
                        e = 0,
                        i = "",
                        s = g.instance,
                        o = y.BG[this.theme];
                    for (s.add("Bg0", o[0]), o[2] && s.add("Bg2", o[2]), t = y.ROAD_LINE[this.theme], e = 0; e < t.length; e++) i = t[e], s.add("road_line" + e.toString(), i);
                    for (t = y.PILLAR_LINE[this.theme], e = 0; e < t.length; e++) i = t[e], s.add("pillar_line" + e.toString(), i);
                    for (i = y.ROAD_TILE[this.theme], s.add("road_tile", i), t = y.ROAD_SHAPE[this.theme], e = 0; e < t.length; e++) i = t[e], s.add("road" + e.toString(), i);
                    for (t = y.DECORS[this.theme], e = 0; e < t.length; e++) i = t[e], s.add(i, i);
                    for (t = y.OBJECTS[this.theme], e = 0; e < t.length; e++) i = t[e], this.addObject(i);
                    s.add("smoke_part", "smoke_part_anim"), s.add("ground_part", "ground_part_anim"), s.add("car_exp_anim", "CarExplode"), s.add("cloud_anim", "DestCloud"), s.add("SafePointAnim", "SafePointAnim"), s.add("Motor0", "Motor0"), s.add("Motor1", "Motor1"), s.add("glass_exp_anim", "GlassExplode"), this.addCar(n.CarsData.params, !1)
                }, t.prototype.addObject = function(t, e) {
                    void 0 === e && (e = "");
                    var i = t,
                        s = n.CarsData.geomObj[i];
                    return g.instance.add(i + "_data", s), g.instance.add(i, i), s
                }, t.prototype.addCar = function(t, e) {
                    var i, s = g.instance,
                        o = n.Inventory.instance.skin;
                    n.RacesData.data.skinId = o;
                    var a;
                    a = y.WHEELS[o - 1][t.wheels], i = a, s.getByKey(i + "b") || (s.add(i + "b", a), s.add(i + "f", a)), i = "car_wheel" + o.toString(), s.getByKey(i) || s.add(i, a), s.add(a, a), s.add("suspend_back", "suspend_back"), s.add("suspend_front", "suspend_front"), s.add("Car" + o.toString() + "FrameExploded", "Car" + o.toString() + "FrameExploded"), i = "bike_" + o.toString() + "_base", s.getByKey(i) || s.add(i, i), i = "driver_shin", this.parsePart(i), i = "driver_hip", this.parsePart(i), i = "driver_corpse", this.parsePart(i), i = "driver_arm", this.parsePart(i), i = "driver_forearm", this.parsePart(i), i = "driver_head", this.parsePart(i), this.complete.dispatch(this)
                }, t.prototype.parsePart = function(t) {
                    var e = {
                        x: 0,
                        y: 0,
                        r: 0 * l.default.TO_RAD,
                        w: 1,
                        h: 1
                    };
                    return g.instance.add(t, t), e
                }, t.prototype.dispose = function() {
                    this.complete.removeAll()
                }, t._instance = null, t
            }();
            e.RaceAssetsLoader = v;
            var b = function() {
                function t(t) {
                    void 0 === t && (t = "bg0000"), this.nameTex = "", this._bitmapData = null, this._rect = new Phaser.Rectangle(0, 0, 1, 1), this.nameTex = t + "0000"
                }
                return Object.defineProperty(t.prototype, "bitmapData", {
                    get: function() {
                        return this._bitmapData = n.GraphicUtil.game.make.sprite(0, 0, n.GraphicUtil.currentAtlass, this.nameTex), this._bitmapData
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "rect", {
                    get: function() {
                        return this._rect = new Phaser.Rectangle(0, 0, this._bitmapData.width, this._bitmapData.height), this._rect
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }();
            e.SpriteData = b
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = i(28);
            e.Images = s.default;
            var n = i(19);
            e.Constants = n.default;
            var o = i(20);
            e.Atlases = o.default;
            var a = i(24);
            e.Sounds = a.default;
            var r = i(29);
            e.JSONData = r.default
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0;
            var n = i(42),
                o = i(0),
                a = i(2),
                r = i(36),
                h = i(32),
                l = i(8),
                c = i(3),
                u = i(15),
                d = function(t) {
                    function e() {
                        var e = null !== t && t.apply(this, arguments) || this;
                        return e.car = null, e.carBuilder = null, e.paused = !1, e.drive = !1, e.finished = !1, e.playerController = null, e.countdown = 0, e.countdownTotal = 0, e.timer = 0, e.signalFinish = null, e.signalLoaded = null, e.pitchPlaying = !1, e.prevPart = 0, e.prevAccel = !1, e.enginePitch = null, e.engineGazNum = 0, e.engineGaz = null, e.engineStart = null, e.engineLoop = null, e.gamePadLayer = null, e
                    }
                    return s(e, t), Object.defineProperty(e, "instance", {
                        get: function() {
                            return null === e._instance && (e._instance = new e), e._instance
                        },
                        enumerable: !0,
                        configurable: !0
                    }), e.prototype.init = function(e) {
                        t.prototype.init.call(this, e), this.physics = new o.MaxPhysics, this.signalFinish && this.signalFinish.removeAll(), this.pitchPlaying = !1, this.prevPart = 0, this.engineGazNum = Math.round(3 * Math.random()), this.signalFinish = new Phaser.Signal, this.signalLoaded = new Phaser.Signal, this.view = new o.MaxGameView(this.game)
                    }, e.prototype.add = function(i) {
                        if (null !== i) {
                            if (t.prototype.add.call(this, i), i.isActive) {
                                var s = e.activatables[i.id];
                                s || (s = [], e.activatables[i.id] = s), s[s.length] = i
                            }
                            i.review && (i instanceof o.DriverObject || (e.safed[e.safed.length] = i))
                        }
                    }, e.prototype.release = function() {
                        this.playerController = null, this.playerCar = null, this.car = null, this.finished = !1, this.gamePadLayer = null;
                        for (var i in e.activatables) e.activatables[i] && (e.activatables[i] = null);
                        h.CameraPathes.instance.clear(), e.targets.splice(0, e.targets.length), e.safed.splice(0, e.safed.length), this.enginePitch && this.enginePitch.stop(), this.pitchPlaying = !1, this.prevPart = 0, this.enginePitch = null, this.stopAllSounds(), o.Drawing.release(), t.prototype.release.call(this)
                    }, e.prototype.stopAllSounds = function() {
                        this.engineGaz && this.engineGaz.stop(), this.engineGaz = null, this.engineLoop && this.engineLoop.stop(), this.engineLoop = null, this.engineStart && this.engineStart.stop(), this.engineStart = null
                    }, e.prototype.activate = function(t, i) {
                        var s = e.activatables[t.toString()];
                        if (s)
                            for (var n = 0; n < s.length; n++) {
                                var o = s[n];
                                o.activate(i)
                            }
                    }, e.prototype.start = function() {
                        t.prototype.start.call(this), this.timer = 0, this.setMap(o.GameData.currentLevel)
                    }, e.prototype.setDelayedMasks = function() {
                        for (var t = 0; t < o.GraphicUtil.masks.length; t++) {
                            var e = o.GraphicUtil.masks[t];
                            o.GraphicUtil.maskOwners[t].mask = e
                        }
                        o.GraphicUtil.masks = [], o.GraphicUtil.maskOwners = [], this.signalLoaded.dispatch()
                    }, e.prototype.calcEngineSound = function(t) {
                        if (this.enginePitch) {
                            if (this.paused) return void(this.pitchPlaying && (this.pitchPlaying = !1, this.enginePitch.stop()));
                            var e = .1,
                                i = .5,
                                s = this.car.dead ? 0 : .5;
                            u.default.getInstance().sfx || (s = 0);
                            var n = t / 80;
                            n > 1 && (n = 1), n = this.prevPart + .2 * (n - this.prevPart);
                            var o = (.1 + .5 * n) * s;
                            o < 0 ? o = 0 : o > 1 && (o = 1), this.pitchPlaying ? (this.prevPart !== n && (this.enginePitch.volume = o), this.prevPart = n) : (this.enginePitch.play("", 0, o, !0), this.pitchPlaying = !0)
                        }
                    }, e.prototype.update = function(i) {
                        if (!this.playerCar) {
                            if (!this.car) return;
                            this.playerCar = this.car
                        }
                        if (this.calcEngineSound(this.playerCar.backWheel.body.angularVel), null !== this.engineStart && (this.engineStart.isPlaying || null === this.engineLoop && (this.engineLoop = l.default.getInstance().play(c.Sounds.EngineFon, 1, !0))), this.paused) null !== this.engineLoop && (this.engineLoop.volume = 0), null !== this.engineStart && this.engineStart.isPlaying && (this.engineStart.volume = 0), null !== this.engineGaz && (this.engineGaz.stop(), this.engineGaz = null);
                        else if (null !== this.engineLoop)
                            if (this.car.dead) this.engineLoop.volume = 0, null !== this.engineGaz && (this.engineGaz.stop(), this.engineGaz = null);
                            else {
                                if (this.engineLoop.volume = u.default.getInstance().sfx ? 1 : 0, null !== this.engineGaz && (this.engineGaz.volume = u.default.getInstance().sfx ? 1 : 0), !this.prevAccel && this.car.accell) {
                                    null !== this.engineGaz && (this.engineGaz.stop(), this.engineGaz = null), this.engineGazNum++, 5 === this.engineGazNum && (this.engineGazNum = 1);
                                    var s = "accel0" + this.engineGazNum;
                                    this.engineGaz = l.default.getInstance().play(s)
                                }
                                this.prevAccel = this.car.accell
                            } this.paused || (o.RacesData.data.delayForMaks > 0 && (o.RacesData.data.delayForMaks -= i, o.RacesData.data.delayForMaks <= 0 && e.instance.setDelayedMasks()), this.updateIternal(i), t.prototype.update.call(this, i), this.view.update(this.car.speed, 0, !0, i), this.car.frame.graphic.update2(i))
                    }, e.prototype.processFinish = function() {
                        this.finished || (this.finished = !0, this.signalFinish.dispatch(1), l.default.getInstance().play(c.Sounds.Finish))
                    }, e.prototype.updateIternal = function(t) {
                        this.paused ? r.default.instance.hideTimer() : this.drive ? (this.timer += t, r.default.instance.showTimer()) : (this.playerCar.accell || 0 !== this.playerCar.tilt) && (this.drive = !0, r.default.instance.hideControlsHint()), this.playerCar.finished || (o.RacesData.TARGET_X = this.playerCar.x, o.RacesData.TARGET_Y = this.playerCar.y)
                    }, e.prototype.setMap = function(t) {
                        t.id = o.GameData.raceId, o.RacesData.map = t, this.prepareAssets()
                    }, e.prototype.prepareAssets = function() {
                        a.RaceAssetsLoader.instance.complete.add(this.assetsReady, this), a.RaceAssetsLoader.instance.start()
                    }, e.prototype.assetsReady = function(t) {
                        void 0 === t && (t = null), t && t.dispose(), o.RacesData.data.assetsReady = !0, this.buildLevel()
                    }, e.prototype.buildLevel = function() {
                        o.RacesData.data.restart();
                        var t = new o.RaceBuilder;
                        t.complete.add(this.buildReady, this), t.start()
                    }, e.prototype.buildReady = function(t) {
                        void 0 === t && (t = null), t && t.dispose(), this.createCars()
                    }, e.prototype.createCars = function() {
                        this.carBuilder || (this.carBuilder = new o.CarBuilder), this.carBuilder.complete.add(this.carsReady, this), this.carBuilder.createAllCars()
                    }, e.prototype.carsReady = function() {
                        null != this.carBuilder && this.carBuilder.dispose(), this.carBuilder = null, o.RacesData.data.camera = e.instance.view.raceCamera
                    }, e.prototype.getSpace = function() {
                        return n.NapePhysics.space
                    }, e.prototype.restartFromSafePoint = function(t) {
                        for (var i = 0; i < e.safed.length; i++) {
                            e.safed[i].review()
                        }
                    }, e.prototype.initialDeactivate = function() {
                        for (var t in e.activatables)
                            if (e.activatables[t])
                                for (var i = e.activatables[t], s = 0; s < i.length; s++) {
                                    var n = i[s];
                                    n && (n.isActive || n.activate(!1))
                                }
                    }, e._instance = null, e.activatables = {}, e.safed = [], e.targets = [], e
                }(o.GameCore);
            e.MaxGameCore = d
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = i(40),
                n = i(10),
                o = i(0),
                a = i(6),
                r = i(3),
                h = i(2),
                l = i(12),
                c = function() {
                    function t() {}
                    return t.createGround = function(e, i, o, a, r, c, u) {
                        var d = t.game.add.group();
                        d.x = e, d.y = i;
                        var p = t.game.add.graphics(0, 0);
                        d.addChild(p);
                        var f = null;
                        if (r && (f = h.AssetsStorage.instance.getByKey("road_tile"))) {
                            var y = o[0],
                                g = new n.Point(115e3, 115e3);
                            p.beginFill(16711935, .5), p.moveTo(y.x, c + l.default.GAME_H);
                            for (var m = o.length, v = 0; v < m; v++) o[v].x < g.x && (g.x = o[v].x), o[v].y < g.y && (g.y = o[v].y), y = o[v], p.lineTo(y.x, y.y);
                            p.lineTo(y.x, c + l.default.GAME_H), p.endFill();
                            var b = this.game.add.tileSprite(g.x, g.y, p.width, p.height, t.currentAtlass, 100 === u ? "finish0000" : "tile0000");
                            d.add(b), b.tilePosition.x = -e % 256, b.tilePosition.y = -i % 256, d.addChild(p), t.masks.push(p), t.maskOwners.push(b)
                        }
                        if (a) {
                            var x = null;
                            0 === u ? x = "line" : 1 === u ? x = h.RaceAssetsLoader.instance.theme > 0 ? "line_top" : "line_wood_g" : 2 === u ? x = "line_bg" : 3 === u ? x = "line_metal_g" : 13 == u && (x = "CandyGround"), x && ("line" === x || x.indexOf("line_top"), s.Drawing.drawBitmapPath(x, d, o))
                        }
                        return d
                    }, t.createCarFrameGraphic = function(t, e) {
                        return new o.FrameGraphic(t, e)
                    }, t.createCarWheelGraphic = function(t, e, i) {
                        return new o.WheelGraphic(t, i)
                    }, t.createImageWithObj = function(e, i) {
                        if (null === i) return null;
                        var s;
                        return s = t.game.add.sprite(0, 0, t.currentAtlass, i + "0000"), s.anchor.set(.5), e && (s.position.set(e.x, e.y), s.rotation = a.default.TO_RAD * e.rotation), s
                    }, t.createMovieClip = function(e, i, s, n, o) {
                        if (void 0 === s && (s = 12), void 0 === n && (n = !0), void 0 === o && (o = !1), null === i) return null;
                        var h;
                        return "RocketAnim" == i ? (h = t.game.add.sprite(0, 0, r.Atlases.Cars, "RocketAnim0000"), h.animations.add("RocketAnim", Phaser.Animation.generateFrameNames("RocketAnim", 0, 5, "", 4)), h.anchor.set(1, .5), h.animations.getAnimation("RocketAnim").play(30), h.animations.getAnimation("RocketAnim").stop()) : "BoostAnim" == i ? (h = t.game.add.sprite(0, 0, t.currentAtlass, "boost_anim0000"), h.animations.add("boost_anim", Phaser.Animation.generateFrameNames("boost_anim", 0, 9, "", 4)), h.anchor.set(.5), h.animations.getAnimation("boost_anim").play(30), h.animations.getAnimation("boost_anim").stop()) : "SafePointAnim" === i || "CarExplode" === i ? (h = t.game.add.sprite(0, 0, t.currentAtlass, "bg0000"), h.animations.add(i, Phaser.Animation.generateFrameNames(i, 0, 28, "", 4)), h.anchor.set(.5), h.animations.getAnimation(i).play(30), h.animations.getAnimation(i).stop()) : "CarExplode" === i ? (h = t.game.add.sprite(0, 0, r.Atlases.Cars, i + "0000"), h.animations.add(i, Phaser.Animation.generateFrameNames(i, 0, 28, "", 4)), h.anchor.set(.5), h.animations.getAnimation(i).play(30), h.animations.getAnimation(i).stop()) : (h = t.game.add.sprite(0, 0, t.currentAtlass, "bg0000"), h.scale.set(.4)), e && (h.position.set(e.x, e.y), h.rotation = a.default.TO_RAD * e.rotation), h
                    }, t.createImage = function(e, i, s, n) {
                        if (null === n) return null;
                        var l, c = n + "",
                            u = o.Inventory.instance.skin;
                        return 0 === c.indexOf("driver") || 0 === c.indexOf("suspend") ? (l = t.game.add.sprite(0, 0, r.Atlases.Cars, c + u + "0000"), 0 === c.indexOf("suspend") ? -1 !== c.indexOf("back") ? l.anchor.set(h.AssetsList.SUSPEND_BACK_ANCHORX[u - 1], h.AssetsList.SUSPEND_BACK_ANCHORY[u - 1]) : l.anchor.set(h.AssetsList.SUSPEND_FRONT_ANCHORX[u - 1], h.AssetsList.SUSPEND_FRONT_ANCHORY[u - 1]) : "driver_head" === c ? l.anchor.set(h.AssetsList.HEAD_ANCHORX[u - 1], h.AssetsList.HEAD_ANCHORY[u - 1]) : "driver_hip" === c ? l.anchor.set(h.AssetsList.HIP_ANCHORX[u - 1], h.AssetsList.HIP_ANCHORY[u - 1]) : "driver_shin" === c ? l.anchor.set(h.AssetsList.SHIN_ANCHORX[u - 1], h.AssetsList.SHIN_ANCHORY[u - 1]) : l.anchor.set(.5)) : -1 !== c.indexOf("FrameExploded") ? (l = t.game.add.sprite(0, 0, r.Atlases.Cars, c + "0000"), l.anchor.set(h.AssetsList.FRAMES_ANCHORX[u - 1], h.AssetsList.FRAMES_ANCHORY[u - 1])) : (l = t.game.add.sprite(0, 0, t.currentAtlass, c + "0000"), l.scale.set(.4)), l.rotation = s * a.default.TO_RAD, l
                    }, t.createLandscapeShape = function(e, i, a) {
                        var r = new o.LandscapeShape(e, i, a),
                            h = 0;
                        r.x = e.params.x - i, r.y = e.params.y - a;
                        var l = null;
                        l = "RoadTile0_1";
                        var c = e.params.layer;
                        1 === c ? l = "tile_bg" : 2 === c ? l = "tile" : 3 === c ? l = "tile_saw" : 4 === c ? l = "tile_rivet" : 5 === c ? l = "tile_rivet_bg" : 6 === c && (l = "tile_stone");
                        var u = e.params.vertices,
                            d, p = null;
                        0 === c ? p = "RoadLine0_4" : 1 === c ? (l = "tile_bg", p = "RoadLine0_Bg") : 2 === c ? !0 === e.params.line && (p = "line") : 3 === c ? p = "UnLine0" : 4 === c ? p = "line_rivet" : 5 === c || 6 === c && (p = "line_stone_shape");
                        var f = new Array;
                        (Math.abs(u[0].x - u[u.length - 1].x) > 4 || Math.abs(u[0].y - u[u.length - 1].y) > 4) && (d = new n.Point(.5 * (u[0].x + u[u.length - 1].x) + i, .5 * (u[0].y + u[u.length - 1].y) + a), f[0] = d);
                        var y = new n.Graphics(this.game, 0, 0);
                        r.addChildAt(y, 0);
                        var g = new n.Point(115e3, 115e3),
                            m = u[0];
                        y.beginFill(16776960, .5), y.moveTo(m.x + i, m.y + a);
                        var v = u.length,
                            b = 0;
                        for (b = 0; b < v; b++) m = u[b], m.x + i < g.x && (g.x = m.x + i), m.y + a < g.y && (g.y = m.y + a), y.lineTo(m.x + i, m.y + a), f && (f[f.length] = new n.Point(m.x + i, m.y + a));
                        y.endFill();
                        var x = this.game.add.tileSprite(g.x, g.y, y.width, y.height, t.currentAtlass, l + "0000");
                        return x.tilePosition.x = -i % 256, x.tilePosition.y = -a % 256, r.addChildAt(x, 0), t.masks.push(y), t.maskOwners.push(x), !0 === e.params.line && p && (d && (f[f.length] = d), "line" === p ? s.Drawing.drawBitmapPath(p, r, f) : -1 === p.indexOf("Bg") ? s.Drawing.drawBitmapPath2(p, r, f) : s.Drawing.drawBitmapPath(p, r, f)), r
                    }, t.game = null, t.currentAtlass = r.Atlases.Theme0, t.masks = [], t.maskOwners = [], t
                }();
            e.GraphicUtil = c
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = function() {
                function t() {}
                return t.normalizeAngle = function(t) {
                    return t > Math.PI ? t -= 2 * Math.PI : t < -Math.PI && (t += 2 * Math.PI), t
                }, t.normalizeAngle2 = function(t) {
                    return t %= 2 * Math.PI, t > Math.PI ? t -= 2 * Math.PI : t < -Math.PI && (t += 2 * Math.PI), t
                }, t.normalizeVertices = function(e) {
                    var i = {};
                    i.className = e.className, i.params = {}, i.params.vertices = [];
                    var s = e.params,
                        n = s.x,
                        o = s.y;
                    for (var a in s) "vertices" !== a && (i.params[a] = s[a]);
                    for (var r = t.TO_RAD * s.rotation, h = s.vertices, l = i.params.vertices, c = h.length, u = 0; u < c; u++) {
                        var d = Math.round(h[u].x),
                            p = Math.round(h[u].y);
                        if (l[u] = {}, 0 === d && 0 === p) l[u].x = n, l[u].y = o;
                        else {
                            var f = void 0;
                            f = Math.atan2(p, d);
                            var y = Math.sqrt(d * d + p * p);
                            f += r, l[u].x = n + Math.cos(f) * y, l[u].y = o + Math.sin(f) * y
                        }
                    }
                    return i.params.x = 0, i.params.y = 0, i.params.rotation = 0, i
                }, t.dist = function(t, e, i, s) {
                    return Math.sqrt((t - i) * (t - i) + (e - s) * (e - s))
                }, t.TO_RAD = Math.PI / 180, t.TO_DEG = 180 / Math.PI, t.PIdiv2 = Math.PI / 0, t.PIdiv4 = Math.PI / 4, t.PIdiv4mul3 = 3 * Math.PI / 4, t
            }();
            e.default = s;
            var n = function() {
                function t() {}
                return t.rand = function(t, e) {
                    return t - .5 * e + e * Math.random()
                }, t
            }();
            e.MyRand = n;
            var o = function() {
                function t() {}
                return t.formatPrice = function(e, i) {
                    void 0 === i && (i = "$ ");
                    for (var s = 0; e >= 1e3;) e /= 1e3, ++s;
                    return i + e.toString() + t.RANKS[s] + t.PRICE_POSTFIX
                }, t.formatTime = function(t) {
                    var e = t / 60 >> 0,
                        i = e.toString();
                    e < 10 && (i = "0" + i), t -= 60 * e, e = t >> 0;
                    var s = e.toString();
                    return e < 10 && (s = "0" + s), i + ":" + s
                }, t.PRICE_POSTFIX = "", t.RANKS = ["", "k", "m", "omg", "wtf"], t
            }();
            e.UiStrUtil = o
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = nape.dynamics.InteractionFilter,
                n = function() {
                    function t() {}
                    return t.NOTHING = new s(0, 0, 0, 0, 0, 0), t.SENSOR = new s(0, 0, 1, 4369), t.SENS_ONLY_PLAYER = new s(0, 0, 1, 4368), t.TOGGLE = new s(0, 0, 1, 4369), t.WITH_EARTH_ONLY = new s(1, 4369, 0, 0), t.WHEEL = new s(4096, 272, 17, 4369), t.DRIVER_PART = new s(4096, 272), t.BODY_COLLIDER = new s(4096, 272, 17, 4369), t.GROUND = new s(17, 4369, 1, 4369), t.PLAYER_ONLY = new s(256, 4096, 1, 4369), t.WATER = new s(0, 0, 1, 4369), t
                }();
            e.Filters = n
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = i(15),
                n = function() {
                    function t(t) {
                        this.music = null, this.audioInstances = {}, this.sound = t.sound
                    }
                    return t.getInstance = function(e) {
                        if (null === t.instance) {
                            if (!e) throw new Error("Cant create a new instance without a game");
                            t.instance = new t(e)
                        }
                        return t.instance
                    }, t.prototype.play = function(t, e, i) {
                        return void 0 === e && (e = 1), void 0 === i && (i = !1), this.audioInstances.hasOwnProperty(t) || (this.audioInstances[t] = this.sound.add(t)), s.default.getInstance().sfx ? (this.audioInstances[t].play(void 0, void 0, e, i, !0), this.audioInstances[t]) : this.audioInstances[t].play(void 0, void 0, 0, i, !0)
                    }, t.prototype.isPlaying = function(t) {
                        return !!this.audioInstances.hasOwnProperty(t) && this.audioInstances[t].isPlaying
                    }, t.prototype.stop = function(t) {
                        this.audioInstances.hasOwnProperty(t) && this.audioInstances[t].stop()
                    }, t.prototype.playMusic = function(t) {
                        if (!s.default.getInstance().music) return this.music = this.sound.play(t, .5, !0), void this.music.stop();
                        null !== this.music && this.music.name === t || (null !== this.music && this.music.name !== t && this.music.stop(), this.music = this.sound.play(t, .5, !0))
                    }, t.prototype.fadeMusicVolume = function(t, e) {
                        this.music && this.music.fadeTo(t, e)
                    }, t.prototype.stopMusic = function() {
                        null !== this.music && this.music.isPlaying && this.music.stop()
                    }, t.prototype.toggleSfx = function() {
                        s.default.getInstance().sfx = !s.default.getInstance().sfx
                    }, t.prototype.toggleMusic = function() {
                        s.default.getInstance().music = !s.default.getInstance().music, s.default.getInstance().music ? this.music && this.music.play(void 0, void 0, 1, !0) : this.music && this.music.isPlaying && this.stopMusic()
                    }, t.instance = null, t
                }();
            e.default = n
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = nape.phys.Material,
                n = function() {
                    function t() {}
                    return t.DEFAULT = new s, t.GROUND = new s, t.WIEGHTLESS = new s(0, 1, 2, .001), t.TUMBEWEED = new s(0, 1, 2, .5), t.GBARREL = new s(0, 1, 2, .5), t
                }();
            e.Materials = n
        }, function(t, e, i) {
            (function(e) {
                t.exports = e.Phaser = i(58)
            }).call(e, i(27))
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = nape.callbacks.CbType,
                n = function() {
                    function t() {}
                    return t.WHEEL = new s, t.BODY_COLLIDER = new s, t.ZONE_FINISH = new s, t.COIN = new s, t.DESTOYED = new s, t.TOGGLE = new s, t.TOGGLE_OFF = new s, t.GROUND = new s, t.DRIVER = new s, t.DRIVER_PART = new s, t.SAFE_POINT = new s, t.SPIKES = new s, t.SAW = new s, t.BARREL = new s, t.WOOD = new s, t.WATER = new s, t.GLASS = new s, t.BOOST = new s, t.GEYSER = new s, t
                }();
            e.CbTypes = n
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = function() {
                function t() {}
                return t.GAME_W = 720, t.GAME_H = 480, t.DISPLAY_W = 720, t.DISPLAY_H = 480, t.CAR_ED_SAVE = "mrce", t.ED_SAVE = "mre", t
            }();
            e.default = s
        }, function(t, e, i) {
            (function(e) {
                t.exports = e.PIXI = i(57)
            }).call(e, i(27))
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0, i(13), i(10);
            var n = i(17),
                o = function(t) {
                    function e(e, i, s, o, a, r) {
                        void 0 === r && (r = null);
                        var h = t.call(this, e) || this;
                        return h._enable = !0, h._graphics = null, h._texts = null, h.inputEnableChildren = !0, h._graphics = h.game.add.group(h), h._texts = h.game.add.group(h), h.btn = h.game.add.button(0, 0, r, o, a), h.btn.anchor.set(.5), h._graphics.addChild(h.btn), h.label = new n.default(h.game, 0, 2, i, s, 70, 40), h.label.anchor.set(.5), h._texts.addChild(h.label), null !== o && null !== a && h.label.events.onInputDown.add(o, a), h.game.add.existing(h), h
                    }
                    return s(e, t), e.prototype.setText = function(t) {
                        this.label.setText(t)
                    }, e.prototype.setFrames = function(t, e, i, s) {
                        this.btn.setFrames(t, e, i, s)
                    }, e.prototype.destroy = function(e) {
                        this.id = null, this.label = null, this.btn = null, this._graphics = null, this._texts = null, t.prototype.destroy.call(this, e)
                    }, Object.defineProperty(e.prototype, "enable", {
                        get: function() {
                            return this._enable
                        },
                        set: function(t) {
                            this._enable !== t && (this._enable = t, this.btn.inputEnabled = this._enable, this._enable ? (this.btn.tint = 16777215, this.label.tint = 16777215) : (this.btn.tint = 10066329, this.label.tint = 10066329))
                        },
                        enumerable: !0,
                        configurable: !0
                    }), e
                }(Phaser.Group);
            e.default = o
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = i(3),
                n = i(0),
                o = function() {
                    function t(t, e, i) {
                        var n = this;
                        this.musicOn = !0, this.sfxOn = !0, this.carSaves = {}, this.game = t, this.callback = e, this.callbackContext = i, this.game.storage.getItem(s.Constants.STORAGE_KEY).then(function(t) {
                            null === t || void 0 === t ? (n.initFirstSave(), n.callback && n.callbackContext && n.callback.call(n.callbackContext)) : n.restore()
                        })
                    }
                    return t.prototype.initFirstSave = function() {
                        this.sfxOn = !0, this.musicOn = !0, n.Inventory.instance.init(), this.save()
                    }, t.getInstance = function(e, i, s) {
                        return t.instance ? s && i.call(s) : t.instance = new t(e, i, s), t.instance
                    }, Object.defineProperty(t.prototype, "music", {
                        get: function() {
                            return this.musicOn
                        },
                        set: function(t) {
                            this.musicOn = t, this.save()
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t.prototype, "sfx", {
                        get: function() {
                            return this.sfxOn
                        },
                        set: function(t) {
                            this.sfxOn = t, this.save()
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t.prototype.save = function() {
                        var t = JSON.stringify({
                                m: this.musicOn,
                                sf: this.sfxOn,
                                invsav: n.Inventory.instance.save
                            }),
                            e = this.hash(t);
                        this.game.storage.setItem(s.Constants.STORAGE_KEY, t), this.game.storage.setItem(s.Constants.STORAGE_KEY + "h", e)
                    }, t.prototype.restore = function() {
                        var t = this,
                            e = this.game.storage.getItem(s.Constants.STORAGE_KEY),
                            i = this.game.storage.getItem(s.Constants.STORAGE_KEY + "h"),
                            o, a;
                        Promise.all([e, i]).then(function(e) {
                            if (o = e[0] || "", a = e[1] || "0", "" === o) return t.initFirstSave(), void(t.callback && t.callbackContext && t.callback.call(t.callbackContext));
                            if (a !== t.hash(o)) return t.initFirstSave(), void(t.callback && t.callbackContext && t.callback.call(t.callbackContext));
                            if (o && "" !== o) try {
                                var i = JSON.parse(o);
                                t.musicOn = i.m, t.sfxOn = i.sf, n.Inventory.instance.save = i.invsav
                            } catch (e) {
                                t.initFirstSave()
                            } else t.initFirstSave();
                            t.callback && t.callbackContext && t.callback.call(t.callbackContext)
                        })
                    }, t.prototype.hash = function(t) {
                        var e = 0,
                            i, s, n;
                        if (0 === t.length) return e.toString();
                        for (i = 0, n = t.length; i < n; i++) s = t.charCodeAt(i), e = (e << 5) - e + s, e |= 0;
                        return e.toString()
                    }, t
                }();
            e.default = o
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0;
            var n = i(3),
                o = i(21),
                a = function(t) {
                    function e(i, s, a, r) {
                        var h = t.call(this, i) || this;
                        h.alpha = 0, h.beginFill(s, 1), h.drawRect(0, 0, h.game.width, h.game.height), h.endFill(), o.default.Name !== a && (e.prevState = a);
                        var l = h.game.add.text(h.game.width / 2, h.game.height / 2, "LOADING...", n.Constants.styleCredits0);
                        l.anchor.set(.5), h.addChild(l), i.add.existing(h);
                        var c = h.game.add.tween(h);
                        return c.to({
                            alpha: 1
                        }, 100), c.onComplete.add(function() {
                            i.state.start(a, !0, !1, r)
                        }), c.start(), h
                    }
                    return s(e, t), e.prevState = "menu", e
                }(Phaser.Graphics);
            e.default = a
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0, i(13), i(10);
            var n = function(t) {
                function e(e, i, s, n, o, a, r) {
                    var h = t.call(this, e, i, s, n, o) || this;
                    return h.maxWidth = a, h.maxHeight = r, h.game.add.existing(h), h
                }
                return s(e, t), e.prototype.setText = function(e) {
                    return t.prototype.setText.call(this, e), (this.maxWidth || this.maxHeight) && this.makeFontFit(), this
                }, e.prototype.setMaxSize = function(t, e) {
                    this.maxWidth = t, this.maxHeight = e
                }, e.prototype.makeFontFit = function() {
                    for (var t = 10, e; this.width > this.maxWidth || this.height > this.maxHeight;) {
                        if ((e = parseInt(this.fontSize.toString().replace("px", ""), 10) - 1) < 10) {
                            e = 10, this.fontSize = e;
                            break
                        }
                        this.fontSize = e
                    }
                }, e
            }(Phaser.Text);
            e.default = n
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = i(6),
                n = nape.constraint.PivotJoint,
                o = nape.geom.GeomPoly,
                a = nape.geom.GeomPolyList,
                r = nape.geom.Vec2,
                h = nape.phys.Body,
                l = nape.phys.BodyList,
                c = nape.phys.BodyType,
                u = nape.shape.Circle,
                d = nape.shape.Polygon,
                p = function() {
                    function t() {}
                    return t.disposeBody = function(e) {
                        t.clearUserData(e), e.cbTypes.clear(), e.compound ? e.compound = null : e.space = null
                    }, t.stopBody = function(t, e) {
                        void 0 === e && (e = !0), t.type === c.DYNAMIC && (t.torque = 0), t.velocity.x = 0, t.velocity.y = 0, t.angularVel = 0, e || (t.allowMovement = t.allowRotation = e)
                    }, t.setupStartPos = function(t) {
                        t.userData.sx = t.position.x, t.userData.sy = t.position.y, t.userData.sr = t.rotation
                    }, t.resetStartPos = function(t) {
                        t.position.x = t.userData.sx, t.position.y = t.userData.sy, t.rotation = t.userData.sr
                    }, t.clearUserData = function(t) {
                        for (var e in t.userData) t.userData.hasOwnProperty(e) && (t.userData[e] = null)
                    }, t.createRectBody = function(e, i, n, o, a, r) {
                        void 0 === a && (a = null), void 0 === r && (r = null);
                        var h = new d(d.box(o.width, o.height, !0), r, i);
                        h.sensorEnabled = n;
                        var l = t.createBody(e, o.x, o.y, s.default.TO_RAD * o.rotation, a);
                        return l.shapes.add(h), l
                    }, t.createRectBodyWH = function(e, i, s, n, o, a, r, h, l, c) {
                        void 0 === a && (a = 0), void 0 === r && (r = 0), void 0 === h && (h = 0), void 0 === l && (l = null), void 0 === c && (c = null);
                        var u = new d(d.box(n, o, !0), c, i);
                        u.sensorEnabled = s;
                        var p = t.createBody(e, a, r, h, l);
                        return p.shapes.add(u), p
                    }, t.createRegularBody = function(e, i, s, n, o, a, r, h, l, c, u) {
                        void 0 === r && (r = 0), void 0 === h && (h = 0), void 0 === l && (l = 0), void 0 === c && (c = null), void 0 === u && (u = null);
                        var p = new d(d.regular(.5 * n, .5 * o, a, 0, !0), u, i);
                        p.sensorEnabled = s;
                        var f = t.createBody(e, r, h, l, c);
                        return f.shapes.add(p), f
                    }, t.createBody = function(t, e, i, s, n) {
                        void 0 === e && (e = 0), void 0 === i && (i = 0), void 0 === s && (s = 0), void 0 === n && (n = null);
                        var o = new h(t, r.weak(e, i));
                        return o.rotation = s, null != n && o.cbTypes.add(n), o
                    }, t.createCircleBody = function(e, i, s, n, o, a, r, h, l) {
                        void 0 === o && (o = 0), void 0 === a && (a = 0), void 0 === r && (r = 0), void 0 === h && (h = null), void 0 === l && (l = null);
                        var c = new u(n, null, l, i);
                        c.sensorEnabled = s;
                        var d = t.createBody(e, o, a, r, h);
                        return null != h && d.cbTypes.add(h), d.shapes.add(c), d
                    }, t.bodiesInCircle = function(e, i, s, n, o) {
                        return void 0 === n && (n = !1), void 0 === o && (o = null), t.bodyList.clear(), e.bodiesInCircle(i, s, n, o, t.bodyList), t.bodyList
                    }, t.bodiesUnderPoint = function(e, i, s) {
                        return void 0 === s && (s = null), t.bodyList.clear(), e.bodiesUnderPoint(i, s, t.bodyList), t.bodyList
                    }, t.createPolyBody = function(e, i, s, n) {
                        var a, l;
                        e instanceof Array ? (l = e, a = new h(n)) : (l = e.vertices, a = new h(n, r.weak(e.x, e.y)));
                        for (var c = l.length, u = [], p = 0; p < c; p++) u[p] = r.get(l[p].x, l[p].y);
                        var f = new o(u);
                        if (f.isConvex()) a.shapes.add(new d(f, i, s)), f.dispose();
                        else
                            for (f.convexDecomposition(!1, t.geomPolyList), f.dispose(); !t.geomPolyList.empty();) f = t.geomPolyList.pop(), a.shapes.add(new d(f, i, s)), f.dispose();
                        return a
                    }, t.createPivot = function(t, e, i) {
                        return new n(t, e, t.worldPointToLocal(i, !0), e.worldPointToLocal(i, !0))
                    }, t.disposeJoint = function(t) {
                        t.active = !1, t.space = null, t.body1 = null, t.body2 = null
                    }, t.createPatherBody = function(t, e, i, s) {
                        e = e.copy(), e.density = t.params.density;
                        var n = new h(t.params.isStatic ? c.STATIC : c.DYNAMIC, r.weak(t.params.x, t.params.y)),
                            a = [r.get(), r.get(), r.get(), r.get()],
                            l = r.get(),
                            u = r.get(),
                            p = t.params.vertices,
                            f, y = p.length,
                            g;
                        for (f = 0; f < y - 1; f++) {
                            if (l.setxy(p[f + 1].x - p[f].x, p[f + 1].y - p[f].y), 0 === f ? (g = l.angle + .5 * Math.PI, a[0].x = p[f].x - .5 * s * Math.cos(g), a[0].y = p[f].y - .5 * s * Math.sin(g), a[1].x = p[f].x + .5 * s * Math.cos(g), a[1].y = p[f].y + .5 * s * Math.sin(g)) : (a[0].x = a[3].x, a[0].y = a[3].y, a[1].x = a[2].x, a[1].y = a[2].y), f === y - 2) g = l.angle + .5 * Math.PI, a[3].x = p[f + 1].x - .5 * s * Math.cos(g), a[3].y = p[f + 1].y - .5 * s * Math.sin(g), a[2].x = p[f + 1].x + .5 * s * Math.cos(g), a[2].y = p[f + 1].y + .5 * s * Math.sin(g);
                            else {
                                l.muleq(-1 / l.length), u.setxy(p[f + 2].x - p[f + 1].x, p[f + 2].y - p[f + 1].y), u.muleq(1 / u.length);
                                var m = r.get(l.x + u.x, l.y + u.y);
                                g = m.angle, a[3].x = p[f + 1].x - .5 * s * Math.cos(g), a[3].y = p[f + 1].y - .5 * s * Math.sin(g), a[2].x = p[f + 1].x + .5 * s * Math.cos(g), a[2].y = p[f + 1].y + .5 * s * Math.sin(g), m.dispose()
                            }
                            var v = new o(a),
                                b = void 0;
                            if (v.isConvex()) b = new d(a, e, i), b.body = n;
                            else {
                                var x = a[3];
                                a[3] = a[2], a[2] = x, b = new d(a, e, i), b.body = n
                            }
                        }
                        return l.dispose(), u.dispose(), a[0].dispose(), a[1].dispose(), a[2].dispose(), a[3].dispose(), a = null, n.align(), n
                    }, t.geomPolyList = new a, t.bodyList = new l, t
                }();
            e.NapeUtil = p
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = function() {
                function t() {}
                return t.VERSION = "4.1.1g", t.GAME_SCALE = 1, t.CALCULATED_WIDTH = 0, t.CALCULATED_HEIGHT = 0, t.WIDTH = 720, t.HEIGHT = 480, t.LANDSCAPE_LOCKED = !0, t.PORTRAIT_LOCKED = !1, t.GAME_DISTRIBUTION_LOCAL_ID = "5b0abd4c0faa4f5eb190a9a16d5a1b4c", t.STORAGE_KEY = "mx3m_4_gd", t.styleMoney = {
                    font: "25px Impact",
                    fill: "#DDD9D7"
                }, t.styleBestTime = {
                    font: "14px Impact",
                    fill: "#FFFFFF"
                }, t.styleTime = {
                    font: "15px Impact",
                    fill: "#DDD9D7"
                }, t.styleTimer = {
                    font: "20px Impact",
                    fill: "#DDD9D7"
                }, t.styleHelp = {
                    font: "20px Impact",
                    fill: "#FFFFFF"
                }, t.stylePlay = {
                    font: "80px CfCrackBold",
                    fill: "#FF8F00"
                }, t.styleTrick = {
                    font: "30px CfCrackBold",
                    fill: "#FF8F00"
                }, t.stylePlace = {
                    font: "24px CfCrackBold",
                    fill: "#97F337"
                }, t.styleMSGUI = {
                    font: "10px Impact",
                    fill: "#FFFFFF"
                }, t.styleGarage = {
                    font: "80px CfCrackBold",
                    fill: "#FF8F00"
                }, t.styleGarage2 = {
                    font: "33px CfCrackBold",
                    fill: "#FFFFFF"
                }, t.stylePopBtn = {
                    font: "30px CfCrackBold",
                    fill: "#2C374E"
                }, t.stylePopBtn2 = {
                    font: "25px CfCrackBold",
                    fill: "#2C374E"
                }, t.styleChooseLevel = {
                    font: "36px CfCrackBold",
                    fill: "#FFFFFF"
                }, t.stylePause = {
                    font: "40px CfCrackBold",
                    fill: "#FFFFFF"
                }, t.styleFinish = {
                    font: "30px CfCrackBold",
                    fill: "#FF8F00"
                }, t.styleFinish1 = {
                    font: "20px CfCrackBold",
                    fill: "#FFFFFF"
                }, t.styleCredits0 = {
                    font: "30px CfCrackBold",
                    fill: "#FFFFFF"
                }, t.styleCreditsOK = {
                    font: "50px CfCrackBold",
                    fill: "#FF8F00"
                }, t.styleCredits1 = {
                    font: "18px Impact",
                    fill: "#FFFFFF"
                }, t.styleCredits2 = {
                    font: "14px Impact",
                    fill: "#FFFFFF"
                }, t.styleVersion = {
                    font: 15 * t.GAME_SCALE + "px Impact",
                    fill: "#FFFFFF"
                }, t
            }();
            e.default = s
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = function() {
                function t() {}
                return t.Garage = "garage", t.Cars = "cars_game", t.Theme0 = "theme0", t.preloadList = [t.Cars], t.list = [t.Garage, t.Theme0, t.Cars], t
            }();
            e.default = s
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0;
            var n = i(14),
                o = i(20),
                a = i(19),
                r = i(22),
                h = i(26),
                l = i(8),
                c = i(24),
                u = i(15),
                d = i(39),
                p = i(16),
                f = i(34),
                y = i(43),
                g = i(0),
                m = i(2),
                v = i(17),
                b = function(t) {
                    function e() {
                        var i = t.call(this) || this;
                        return i.name = e.Name, i.changeBike = null, i.priceTxt = null, i.btnLeft = null, i.btnRight = null, i.bike = null, i.parts2 = null, i
                    }
                    return s(e, t), e.prototype.init = function() {
                        this.game.world.removeAll(), this.parts2 = [], g.GraphicUtil.game = this.game, l.default.getInstance().playMusic(c.default.MenuMusic)
                    }, e.prototype.create = function() {
                        t.prototype.create.call(this);
                        var i = this.game.add.sprite(360, 240, o.default.Garage, "0popup_bg0000");
                        i.anchor.set(.5);
                        var s = null;
                        this.background = this.game.add.sprite(0, 0, o.default.Garage, "bg0000"), s = this.game.add.sprite(0, 0, o.default.Garage, "0bg_garage0000"), s.alpha = 0, this.background.addChild(s), this.background.addChild(i);
                        var r = new n.default(this.game, "BIKE SHOP", a.default.styleGarage, null, null, o.default.Garage);
                        r.setFrames("bg0000", "bg0000", "bg0000", "bg0000"), r.position.set(a.default.WIDTH / 2, 40), this.background.addChild(r);
                        var l = new n.default(this.game, g.Inventory.instance.getTotalStars() + "", a.default.styleMoney, null, null, o.default.Garage);
                        l.setFrames("w_star0000", "w_star0000", "w_star0000", "w_star0000"), l.position.set(a.default.WIDTH - 30, 30), l.label.x = -30, this.game.width - a.default.WIDTH > 0 && (l.x += (this.game.width - a.default.WIDTH) / 2), this.background.addChild(l), r.label.stroke = "#000000", r.label.strokeThickness = 4;
                        var c = new v.default(this.game, 0, 2, "BIKE SHOP", a.default.stylePlay);
                        c.anchor.set(.5), r.label.parent.addChildAt(c, 0), c.stroke = "#FFFFFF", c.strokeThickness = 7, this.playBtn = new n.default(this.game, "", a.default.stylePopBtn2, p.default.prevState === h.default.Name ? this.onMenu : this.onPlayDown, this, o.default.Garage), this.playBtn.setFrames("orange_btn0000", "orange_btn0000", "orange_btn0000", "orange_btn0000");
                        var u = this.game.add.sprite(0, -7, o.default.Garage, "next_btn0000");
                        u.anchor.set(.5), u.scale.set(-1, 1), this.playBtn.label.parent.addChild(u), this.playBtn.x = 10 + this.playBtn.width / 2, this.playBtn.y = a.default.HEIGHT - 10 - this.playBtn.height / 2, this.btnLeft = new n.default(this.game, "", a.default.styleGarage, this.onPrev, this, o.default.Garage), this.btnLeft.setFrames("arrow_btn0000", "arrow_btn0000", "arrow_btn0001", "arrow_btn0000"), this.btnRight = new n.default(this.game, "", a.default.styleGarage, this.onNext, this, o.default.Garage), this.btnRight.setFrames("arrow_btn0000", "arrow_btn0000", "arrow_btn0001", "arrow_btn0000"), this.btnRight.rotation = Phaser.Math.degToRad(180), this.btnLeft.x = 10 + this.playBtn.width / 2, this.btnRight.x = a.default.WIDTH - 10 - this.playBtn.width / 2, this.btnLeft.y = a.default.HEIGHT / 2, this.btnRight.y = a.default.HEIGHT / 2, this.game.width - a.default.WIDTH > 0 && (this.playBtn.x -= (this.game.width - a.default.WIDTH) / 2, this.btnLeft.x -= (this.game.width - a.default.WIDTH) / 2, this.btnRight.x += (this.game.width - a.default.WIDTH) / 2), e.currCar = e.carList.indexOf(g.Inventory.instance.skin), f.GameData.carId = e.carList[e.currCar], g.Inventory.instance.skin = e.carList[e.currCar], this.setNewViewCar(), this.background.addChild(this.playBtn), this.background.addChild(this.btnLeft), this.background.addChild(this.btnRight), new d.default(this.game, 0, null), this.resize()
                    }, e.prototype.getPrice = function() {
                        var t = e.priceList[e.currCar] + "";
                        return "0" === t && (t = "FREE"), t
                    }, e.prototype.onPlayerChange = function() {
                        2 === e.currCar ? this.btnRight.enable = !1 : this.btnRight.enable = !0, 0 === e.currCar ? this.btnLeft.enable = !1 : this.btnLeft.enable = !0
                    }, e.prototype.saveCarId = function() {
                        if (g.Inventory.instance.getTotalStars() >= e.priceList[e.currCar]) f.GameData.carId = e.carList[e.currCar], g.Inventory.instance.skin = e.carList[e.currCar], this.setNewViewCar(), u.default.getInstance().save();
                        else {
                            var t = this.game.add.tween(this.priceTxt);
                            t.to({
                                y: this.priceTxt.y - 15
                            }, 150, Phaser.Easing.Bounce.InOut, !1, 0, 3, !0), t.start()
                        }
                    }, e.prototype.onPlayDown = function() {
                        new p.default(this.game, 0, r.default.Name)
                    }, e.prototype.onMenu = function() {
                        new p.default(this.game, 0, h.default.Name)
                    }, e.prototype.onNext = function() {
                        e.currCar < 2 && e.currCar++, this.setNewViewCar()
                    }, e.prototype.parseStaticGraphic = function(t, i) {
                        var s = null;
                        s = this.game.add.image(t[i].x, t[i].y, o.default.Cars, t[i].g + "0000"), s.angle = t[i].r;
                        var n = e.carList[e.currCar]; - 1 !== i.indexOf("base") ? s.anchor.set(m.AssetsList.FRAMES_ANCHORX[n - 1], m.AssetsList.FRAMES_ANCHORY[n - 1]) : -1 !== i.indexOf("suspend") ? -1 !== i.indexOf("front") ? s.anchor.set(.8, -1 !== t[i].g.indexOf("1") ? .2 : .5) : s.anchor.set(0, .5) : "driver_head" === i ? s.anchor.set(m.AssetsList.HEAD_ANCHORX[n - 1], m.AssetsList.HEAD_ANCHORY[n - 1]) : "driver_hip" === i ? s.anchor.set(m.AssetsList.HIP_ANCHORX[n - 1], m.AssetsList.HIP_ANCHORY[n - 1]) : "driver_shin" === i ? s.anchor.set(m.AssetsList.SHIN_ANCHORX[n - 1], m.AssetsList.SHIN_ANCHORY[n - 1]) : s.anchor.set(.5), this.bike.addChild(s)
                    }, e.prototype.setNewViewCar = function() {
                        var t = e.carList[e.currCar];
                        null !== this.bike ? (this.bike.destroy(), this.bike = this.game.add.group()) : this.bike = this.game.add.group();
                        var i = y.CarsData.geomObj["bike" + t],
                            s, r = 3 === t,
                            h = 5 === t;
                        r || (s = "Wheel0", this.parseStaticGraphic(i, s), s = "Wheel1", this.parseStaticGraphic(i, s)), s = "suspend_back", this.parseStaticGraphic(i, s), h && (s = "suspend_front", this.parseStaticGraphic(i, s)), s = "base", this.parseStaticGraphic(i, s), r && (s = "Wheel0", this.parseStaticGraphic(i, s), s = "Wheel1", this.parseStaticGraphic(i, s)), s = "driver_shin", this.parseStaticGraphic(i, s), s = "driver_hip", this.parseStaticGraphic(i, s), s = "driver_corpse", this.parseStaticGraphic(i, s), s = "driver_arm", this.parseStaticGraphic(i, s), s = "driver_forearm", this.parseStaticGraphic(i, s), s = "driver_head", this.parseStaticGraphic(i, s), h || (s = "suspend_front", this.parseStaticGraphic(i, s)), this.bike.x = a.default.WIDTH / 2, this.bike.y = a.default.HEIGHT / 2, this.background.addChild(this.bike), this.changeBike && this.changeBike.destroy();
                        var l = "EQUIPPED";
                        e.carList[e.currCar] !== g.Inventory.instance.skin && (l = "EQUIP IT"), this.changeBike = new n.default(this.game, l, a.default.styleGarage2, this.saveCarId, this, o.default.Garage), this.changeBike.x = a.default.WIDTH / 2, this.changeBike.y = a.default.HEIGHT - 50, this.changeBike.setFrames("orange_btn_big0000", "orange_btn_big0000", "orange_btn_big0000", "orange_btn_big0000"), this.changeBike.label.setMaxSize(200, 40), this.changeBike.label.y = -6, this.changeBike.label.setShadow(1, 1, "rgba(0,0,0,0.8)", 5), this.priceTxt && this.priceTxt.destroy(), this.priceTxt = new n.default(this.game, "PRICE:", a.default.styleMoney, null, null, o.default.Garage), this.priceTxt.setFrames("bg0000", "bg0000", "bg0000", "bg0000"), this.priceTxt.label.y = -15;
                        var c = new v.default(this.game, 0, 15, this.getPrice(), a.default.styleMoney);
                        if ("FREE" === this.getPrice()) c.anchor.set(.5);
                        else {
                            c.anchor.set(1.05, .5);
                            var u = this.game.add.sprite(0, 15, o.default.Garage, "w_star0000");
                            u.anchor.set(.15, .5), this.priceTxt.label.parent.addChild(u)
                        }
                        this.priceTxt.label.parent.addChild(c), this.priceTxt.x = a.default.WIDTH - 110, this.game.width - a.default.WIDTH > 0 && (this.priceTxt.x += (this.game.width - a.default.WIDTH) / 2), this.priceTxt.y = a.default.HEIGHT - 70, this.background.addChild(this.priceTxt), this.background.addChild(this.changeBike), this.onPlayerChange()
                    }, e.prototype.update = function() {
                        t.prototype.update.call(this)
                    }, e.prototype.onPrev = function() {
                        0 !== e.currCar && e.currCar--, this.setNewViewCar()
                    }, e.prototype.shutdown = function() {
                        this.background = null, this.changeBike = null, this.playBtn = null, this.btnLeft = null, this.btnRight = null, this.parts2 = null, t.prototype.shutdown.call(this)
                    }, e.prototype.resize = function() {
                        t.prototype.resize.call(this);
                        var e = 1;
                        e = this.game.width / a.default.WIDTH, e = e > 1 ? 1 : e, this.background.scale.set(e), this.background.x = (this.game.width - 720) / 2
                    }, e.prevNameState = "garage", e.Name = "garage", e.pause = !1, e.currCar = 0, e.carList = [1, 3, 5], e.priceList = [0, 15, 40], e
                }(Phaser.State);
            e.default = b
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0;
            var n = i(20),
                o = i(19),
                a = i(24),
                r = i(8),
                h = i(25),
                l = i(21),
                c = i(126),
                u = i(16),
                d = i(39),
                p = i(29),
                f = i(34),
                y = i(0),
                g = i(14),
                m = i(15),
                v = i(26),
                b = function(t) {
                    function e() {
                        var i = t.call(this) || this;
                        return i.name = e.Name, i
                    }
                    return s(e, t), e.prototype.init = function() {
                        this.game.world.removeAll(), r.default.getInstance().playMusic(a.default.MenuMusic)
                    }, e.prototype.create = function() {
                        t.prototype.create.call(this), y.Inventory.instance.signalUnlock.removeAll(), y.Inventory.instance.signalUnlock.addOnce(function() {
                            new u.default(this.game, 0, e.Name)
                        }, this), this.scaleGroup = this.game.add.group();
                        var i = this.game.add.sprite(0, 0, n.default.Garage, "0bg_garage0000"),
                            s = this.game.add.sprite(-30, 0, n.default.Garage, "0bg_garage_l0000"),
                            a = this.game.add.sprite(i.width - 10, 0, n.default.Garage, "0bg_garage_r0000"),
                            r = (this.game.width - 720) / 2;
                        s.x = -1 * r - 10, s.width = r + 20, a.width = r + 20, this.scaleGroup.addChild(s), this.scaleGroup.addChild(a), this.scaleGroup.addChild(i);
                        var h = this.game.add.sprite(0, 0, n.default.Garage, "top_bg0000");
                        h.x = this.game.width - h.width, h = this.game.add.sprite(this.game.width, 0, n.default.Garage, "top_bg0000"), h.x = h.width, h.scale.set(-1, 1);
                        var l = new g.default(this.game, "", null, this.onBackDown, this, n.default.Garage);
                        l.setFrames("shop_btn0000", "shop_btn0000", "shop_btn0000", "shop_btn0000"), l.x = 45, l.y = 30, this.world.addChild(l), this.musicBtn = this.game.add.image(120, 25, n.default.Garage, "InGameMusicButton0000"), this.musicBtn.inputEnabled = !0, this.musicBtn.events.onInputUp.add(this.toggleMusic, this), this.musicBtn.anchor.set(.5), this.musicBtn.x = this.game.width - 35;
                        var c = new g.default(this.game, y.Inventory.instance.getTotalStars() + "", o.default.styleMoney, null, null, n.default.Garage);
                        c.setFrames("w_star0000", "w_star0000", "w_star0000", "w_star0000"), c.position.set(110, 30), c.label.x = 20, c.label.anchor.set(0, .5), this.world.addChild(c), this.updateSoundButtons(), this.createButtons();
                        var p = new g.default(this.game, "", o.default.stylePopBtn2, this.onMenu, this, n.default.Garage);
                        p.setFrames("orange_btn0000", "orange_btn0000", "orange_btn0000", "orange_btn0000");
                        var f = this.game.add.sprite(0, -7, n.default.Garage, "next_btn0000");
                        f.anchor.set(.5), f.scale.set(-1, 1), p.scale.set(.7), p.label.parent.addChild(f), p.x = 10 + p.width / 2, p.y = o.default.HEIGHT - 5 - p.height / 2, this.game.width - o.default.WIDTH > 0 && (p.x -= (this.game.width - o.default.WIDTH) / 2), this.scaleGroup.addChild(p), p = new g.default(this.game, "", o.default.stylePopBtn2, this.onPlayNext, this, n.default.Garage), p.setFrames("orange_btn0000", "orange_btn0000", "orange_btn0000", "orange_btn0000"), f = this.game.add.sprite(0, -7, n.default.Garage, "next_btn0000"), f.anchor.set(.5), p.scale.set(.7), p.label.parent.addChild(f), p.x = o.default.WIDTH - 10 - p.width / 2, p.y = o.default.HEIGHT - 5 - p.height / 2, this.game.width - o.default.WIDTH > 0 && (p.x += (this.game.width - o.default.WIDTH) / 2), this.scaleGroup.addChild(p), new d.default(this.game, 0, null), this.resize()
                    }, e.prototype.onMenu = function() {
                        new u.default(this.game, 0, v.default.Name)
                    }, e.prototype.createButtons = function() {
                        for (var t = 0; t < 25; t++) {
                            var e = y.CarsData.geomObj["point" + t].x,
                                i = y.CarsData.geomObj["point" + t].y;
                            this.createButton(t, e, i, 0)
                        }
                    }, e.prototype.createButton = function(t, e, i, s) {
                        void 0 === t && (t = 0);
                        var o = t,
                            a = new c.default(this.game, o + ""),
                            r = "LeveMapItemLocked",
                            h = r + "0000";
                        a.btn.setFrames(h, h, h, h), a.x = e, a.y = i, a.label.visible = !1, o + 1 < 10 ? a.label.setText("0" + (o + 1)) : a.label.setText(o + 1 + "");
                        var l = 1;
                        void 0 !== y.Inventory.instance.save[y.Inventory.RACE_PREFIX + (o + 1).toString() + y.Inventory.RACE_RESULT] && (l = Number(y.Inventory.instance.save[y.Inventory.RACE_PREFIX + (o + 1).toString() + y.Inventory.RACE_RESULT]) + 2, a.label.visible = !0);
                        var u = this.game.add.sprite(0, 0, n.default.Garage, r + "000" + l);
                        u.anchor.set(.5), this.scaleGroup.addChild(a), a.btn.parent.addChild(u), a.label.visible ? (a.signalSelect.addOnce(this.onPlayDown, this), this.lastEnabled = a) : a.enable = !1
                    }, e.prototype.onPlayNext = function() {
                        this.onPlayDown(this.lastEnabled)
                    }, e.prototype.onPlayDown = function(t) {
                        r.default.getInstance().play(a.default.Click);
                        var i = p.default.list.indexOf(p.default.Level001),
                            s = Number(t.getID());
                        e.LevelNum = s, e.CurrentLevel = p.default.list[i + s], f.GameData.raceId = s + 1, f.GameData.currentLevel = this.game.cache.getJSON(e.CurrentLevel), y.GraphicUtil.currentAtlass = n.default.Theme0, new u.default(this.game, 0, h.default.Name)
                    }, e.prototype.onBackDown = function() {
                        r.default.getInstance().play(a.default.Click), this.game.state.start(l.default.Name)
                    }, e.prototype.toggleMusic = function() {
                        m.default.getInstance().music ? r.default.getInstance().toggleMusic() : m.default.getInstance().sfx ? r.default.getInstance().toggleSfx() : (r.default.getInstance().toggleSfx(), r.default.getInstance().toggleMusic()), this.updateSoundButtons(), r.default.getInstance().play(a.default.Click)
                    }, e.prototype.updateSoundButtons = function() {
                        var t = m.default.getInstance().music ? 0 : 1;
                        t += m.default.getInstance().sfx ? 0 : 1, this.musicBtn.loadTexture(n.default.Garage, "InGameMusicButton000" + t)
                    }, e.prototype.shutdown = function() {
                        this.scaleGroup = null, this.musicBtn = null, this.lastEnabled = null, this.scaleGroup = null, t.prototype.shutdown.call(this)
                    }, e.prototype.resize = function() {
                        var t = 1;
                        t = this.game.width / o.default.WIDTH, t = t > 1 ? 1 : t, this.scaleGroup.scale.set(t), this.scaleGroup.alignIn(this.world.bounds, Phaser.BOTTOM_CENTER)
                    }, e.Name = "choose_zone", e.pause = !1, e.CurrentLevel = "", e.LevelNum = 0, e
                }(Phaser.State);
            e.default = b
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = function() {
                function t() {
                    this.brandInstances = {}, this.brandDomains = [], this.brandInstances[t.YEP10] = "http://yep10.com/?utm_source=x3m4_html5", this.brandInstances[t.Google] = "https://play.google.com/store/apps/details?id=air.com.aceviral.motox3m&referrer=utm_source%3Dx3m4_html5", this.brandInstances[t.Apple] = "https://itunes.apple.com/us/app/moto-x3m-free/id1085088518/?referrer=utm_source%3Dx3m4_html5"
                }
                return t.getInstance = function() {
                    return null === t.instance && (t.instance = new t), t.instance
                }, t.prototype.checkDomain = function(t) {
                    for (var e = 0; e < this.brandDomains.length; e++) {
                        var i = this.brandDomains[e];
                        if (-1 !== t.indexOf(i)) return !0
                    }
                    return !1
                }, t.prototype.getUrlLock = function() {
                    return null !== t.Current ? this.brandInstances[t.Current] : ""
                }, t.prototype.getUrl = function(t) {
                    return this.brandInstances[t]
                }, t.instance = null, t.MOTO1 = "http://yep10.com/moto-x3m-bike-race-game-2/", t.YEP10 = "yep10", t.Current = t.YEP10, t.Google = "google", t.Apple = "itunes", t
            }();
            e.default = s
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = function() {
                function t() {}
                return t.FlySound = function() {
                    return Math.random() > .6 ? t.Fly1 : Math.random() > .3 ? t.Fly2 : t.Fly3
                }, t.FlipSound = function() {
                    return "flip_0" + (Math.round(5 * Math.random()) + 1)
                }, t.DieSound = function() {
                    return "dead_0" + (Math.round(5 * Math.random()) + 1)
                }, t.startSound = function() {
                    return "accel0" + (Math.round(3 * Math.random()) + 1)
                }, t.MenuMusic = "menu_track_1", t.GameMusic = "game_track", t.Click = "button", t.Landing = "landing", t.DriverSpikes = "driver_spikes", t.SavePoint = "safepoint", t.Stones = "stones", t.Explode1 = "explode1", t.Explode2 = "explode2", t.Barrel1 = "barrel_hit0", t.Barrel2 = "barrel_hit1", t.Engine1 = "motor", t.EngineFon = "eng_loop", t.Fly1 = "fly_01", t.Fly2 = "fly_02", t.Fly3 = "fly_03", t.Flip1 = "flip_01", t.Flip2 = "flip_02", t.Flip3 = "flip_03", t.Flip4 = "flip_04", t.Flip5 = "flip_05", t.Flip6 = "flip_06", t.Dead1 = "dead_01", t.Dead2 = "dead_02", t.Dead3 = "dead_03", t.Dead4 = "dead_04", t.Dead5 = "dead_05", t.Dead6 = "dead_06", t.Start = "engine_start", t.Finish = "engine_finish", t.Start1 = "accel01", t.Start2 = "accel02", t.Start3 = "accel03", t.Start4 = "accel04", t.Wood = "wood_hit0", t.Wendy = "wendy", t.Boost = "boost", t.GlassCrash = "glass_crash", t.preloadList = [], t.list = [t.MenuMusic, t.GameMusic, t.Engine1, t.EngineFon, t.Explode1, t.Explode2, t.Barrel1, t.Barrel2, t.Wood, t.Wendy, t.Stones, t.SavePoint, t.DriverSpikes, t.Landing, t.Fly1, t.Fly2, t.Fly3, t.Flip1, t.Flip2, t.Flip3, t.Flip4, t.Flip5, t.Flip6, t.Dead1, t.Dead2, t.Dead3, t.Dead4, t.Dead5, t.Dead6, t.Finish, t.Start, t.Start1, t.Start2, t.Start3, t.Start4, t.Click, t.Boost, t.GlassCrash], t
            }();
            e.default = s
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0, i(13), i(10);
            var n = i(3),
                o = i(22),
                a = i(20),
                r = i(14),
                h = i(15),
                l = i(8),
                c = i(16),
                u = i(4),
                d = i(0),
                p = i(28),
                f = i(17),
                y = i(36),
                g = i(21),
                m = i(2),
                v = i(23),
                b = i(12),
                x = function(t) {
                    function e() {
                        var i = t.call(this) || this;
                        return i.name = e.Name, i.popup = null, i.black = null, i.transition = null, i.bike = null, i._armatureDisplay = null, i
                    }
                    return s(e, t), e.prototype.onPlayNextLevel = function() {
                        if (l.default.getInstance().play(n.Sounds.Click), "undefined" != typeof gdsdk && "undefined" !== gdsdk.showBanner) var t = gdsdk.showBanner();
                        if (o.default.LevelNum + 1 === 25) this.onChooseZone();
                        else {
                            o.default.LevelNum++;
                            var i = n.JSONData.list.indexOf(n.JSONData.Level001),
                                s = o.default.LevelNum;
                            o.default.CurrentLevel = n.JSONData.list[i + s], d.GameData.raceId = s + 1, d.GameData.currentLevel = this.game.cache.getJSON(o.default.CurrentLevel), d.GraphicUtil.currentAtlass = a.default.Theme0, new c.default(this.game, 0, e.Name)
                        }
                    }, e.prototype.init = function() {
                        var i = this;
                        t.prototype.init.call(this), this.game.world.removeAll(), e.loadedLevel = !1, dragonBones.PhaserFactory.init(this.game);
                        var s = this.game.cache.getJSON(n.JSONData.DBBike),
                            o = this.game.cache.getJSON(n.JSONData.DBBike_Texture),
                            a = this.game.cache.getImage(p.default.DBBike, !0).base;
                        dragonBones.PhaserFactory.factory.parseDragonBonesData(s), dragonBones.PhaserFactory.factory.parseTextureAtlasData(o, a), this.initData(), this.game.time.advancedTiming = !0, d.GraphicUtil.game = this.game, u.MaxGameCore.instance.init(this.game), d.CarsData.geom[1] = this.game.cache.getJSON(n.JSONData.Bike), u.MaxGameCore.instance.signalFinish.add(this.onCallPopup, this), u.MaxGameCore.instance.start(), y.default.instance.init(this.game.add.group(), this.game), this.black = this.game.add.graphics(0, 0), this.black.beginFill(0, 1), this.black.drawRect(0, 0, this.game.width, this.game.height), this.black.endFill();
                        var r = this.game.add.text(this.game.width / 2, this.game.height / 2, "LOADING...", n.Constants.styleCredits0);
                        r.anchor.set(.5), this.black.addChild(r), this.transition = this.game.add.tween(this.black), this.transition.to({
                            alpha: 0
                        }, 100, Phaser.Easing.Linear.None, !1, 500), this.transition.onComplete.add(function() {
                            if (e.loadedLevel = !0, i.hardRestart(), i.black.destroy(), i.black = null, i.transition = null, b.default.isDesktop) {
                                i.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR).onUp.add(i.onSpace, i);
                                i.game.input.keyboard.addKey(Phaser.Keyboard.P).onUp.add(i.onPause, i);
                                i.game.input.keyboard.addKey(Phaser.Keyboard.R).onUp.add(i.onR, i)
                            } else i.game.input.onDown.add(i.onSpaceMobile, i); - 1 === e.currCar && (e.currCar = Math.round(2 * Math.random())), y.default.instance.signalRestart.add(i.hardRestart, i), y.default.instance.signalPause.add(i.onPause, i), y.default.instance.signalToggleMusic.add(i.onToggleMusic, i), u.MaxGameCore.instance.paused = !1, u.MaxGameCore.instance.enginePitch = l.default.getInstance().play(n.Sounds.Engine1, .1, !0)
                        }), u.MaxGameCore.instance.signalLoaded.removeAll(), u.MaxGameCore.instance.signalLoaded.addOnce(function() {
                            this.transition.start(), u.MaxGameCore.instance.paused = !0
                        }, this), l.default.getInstance().playMusic(n.Sounds.GameMusic), d.CarExplodeObject.setupPool()
                    }, e.prototype.create = function() {
                        t.prototype.create.call(this), this.resize()
                    }, e.prototype.onMoreGames = function() {
                        window.open(v.default.MOTO1, "_blank")
                    }, e.prototype.setNewViewCar = function() {
                        e.currCar++, e.currCar >= 2 && (e.currCar = 0), null !== this._armatureDisplay && this._armatureDisplay.destroy();
                        var t = "biker" + e.currCar + "_anim_btn";
                        this._armatureDisplay = dragonBones.PhaserFactory.factory.buildArmatureDisplay(t), this._armatureDisplay.x = 0, this._armatureDisplay.y = 150, this._armatureDisplay.animation.play("animation", 0), this.popup.addChild(this._armatureDisplay)
                    }, e.prototype.hardRestart = function() {
                        y.default.instance.hideControlsHint(), y.default.instance.continueShow = !1, y.default.instance.helperShow = !1, 1 === d.GameData.raceId && y.default.instance.showControlsHint(), u.MaxGameCore.instance.car.review(), u.MaxGameCore.instance.restart(), u.MaxGameCore.instance.drive = !1, u.MaxGameCore.instance.finished = !1, y.default.instance.showTimer(), u.MaxGameCore.instance.timer = 0, u.MaxGameCore.instance.car.callbackDie = y.default.instance.showDeathHint, u.MaxGameCore.instance.car.callbackStunt = y.default.instance.showFlipMsg, u.MaxGameCore.instance.car.callbackContext = y.default.instance, this.closePopup()
                    }, e.prototype.onSpaceMobile = function() {
                        u.MaxGameCore.instance.finished || u.MaxGameCore.instance.car.dead && (u.MaxGameCore.instance.paused || (y.default.instance.hideControlsHint(), u.MaxGameCore.instance.car.safeId >= 0 ? (u.MaxGameCore.instance.car.review(), u.MaxGameCore.instance.restartFromSafePoint(u.MaxGameCore.instance.car.safeId)) : this.hardRestart()))
                    }, e.prototype.onSpace = function() {
                        e.isAdsPause || u.MaxGameCore.instance.paused || u.MaxGameCore.instance.finished || u.MaxGameCore.instance.car.dead && (u.MaxGameCore.instance.paused || (y.default.instance.hideControlsHint(), u.MaxGameCore.instance.car.safeId >= 0 ? (u.MaxGameCore.instance.car.review(), u.MaxGameCore.instance.restartFromSafePoint(u.MaxGameCore.instance.car.safeId)) : this.hardRestart()))
                    }, e.prototype.onR = function() {
                        this.hardRestart()
                    }, e.prototype.onPause = function() {
                        u.MaxGameCore.instance.finished || this.onCallPopup(0)
                    }, e.prototype.onToggleMusic = function() {
                        this.toggleMusic()
                    }, e.prototype.toggleMusic = function() {
                        h.default.getInstance().music ? l.default.getInstance().toggleMusic() : h.default.getInstance().sfx ? l.default.getInstance().toggleSfx() : (l.default.getInstance().toggleSfx(), l.default.getInstance().toggleMusic()), y.default.instance.updateSoundButtons(), l.default.getInstance().play(n.Sounds.Click)
                    }, e.prototype.setFields = function(t) {
                        var e = d.RacesData.data,
                            i = new r.default(this.game, "", n.Constants.styleTime, null, this, a.default.Garage);
                        i.setFrames("bg0000", "bg0000", "bg0000", "bg0000"), t.addChild(i), i.y = 20, i.label.setMaxSize(200, 50), i.label.stroke = "#000000", i.label.strokeThickness = 2;
                        var s = this.game.add.sprite(-133, -76, a.default.Garage, "star00000"),
                            o = this.game.add.sprite(0, -88, a.default.Garage, "star00000"),
                            h = this.game.add.sprite(133, -76, a.default.Garage, "star00000");
                        s.anchor.set(.5), o.anchor.set(.5), h.anchor.set(.5), s.scale.set(.9), h.scale.set(.9), s.angle = -10, h.angle = 10;
                        var c = this.game.add.sprite(-133, -76, a.default.Garage, "star10000");
                        c.anchor.set(.5);
                        var u = this.game.add.sprite(0, -88, a.default.Garage, "star10000");
                        u.anchor.set(.5);
                        var p = this.game.add.sprite(133, -76, a.default.Garage, "star10000");
                        p.anchor.set(.5), c.angle = -10, p.angle = 10;
                        var f = new r.default(this.game, "0", n.Constants.styleTime, null, null);
                        f.x = -133, f.y = -6;
                        var y = new r.default(this.game, "0", n.Constants.styleTime, null, null);
                        y.y = -16;
                        var g = new r.default(this.game, "0", n.Constants.styleTime, null, null);
                        g.x = 133, g.y = -6, t.addChild(s), t.addChild(o), t.addChild(h), t.addChild(c), t.addChild(u), t.addChild(p), t.addChild(f), t.addChild(y), t.addChild(g);
                        var m = d.RacesData.map.settings.prizes,
                            v = m.split(",");
                        f.setText(v[2] + " sec."), y.setText(v[1] + " sec."), g.setText(v[0] + " sec.");
                        var b = e.stars;
                        c.visible = b > 0, u.visible = b > 1, p.visible = b > 2, c.scale.set(.9), p.scale.set(.9);
                        var x, _ = 200;
                        b > 0 && (c.scale.set(3), c.alpha = 0, x = this.game.add.tween(c), x.onComplete.addOnce(function() {
                            l.default.getInstance().play(n.Sounds.Explode2), d.RacesData.data.camera.shakeContainer(this.popup)
                        }, this), x.to({
                            alpha: 1
                        }, 400, Phaser.Easing.Linear.None, !0, _ - 150), x = this.game.add.tween(c.scale), x.to({
                            x: .9,
                            y: .9
                        }, 400, Phaser.Easing.Back.Out, !0, _), _ += 400), b > 1 && (u.scale.set(3), u.alpha = 0, x = this.game.add.tween(u), x.onComplete.addOnce(function() {
                            l.default.getInstance().play(n.Sounds.Explode1), d.RacesData.data.camera.shakeContainer(this.popup)
                        }, this), x.to({
                            alpha: 1
                        }, 400, Phaser.Easing.Linear.None, !0, _ - 100), x = this.game.add.tween(u.scale), x.to({
                            x: 1,
                            y: 1
                        }, 400, Phaser.Easing.Back.Out, !0, _), _ += 700), b > 2 && (p.scale.set(3), p.alpha = 0, x = this.game.add.tween(p), x.onComplete.addOnce(function() {
                            l.default.getInstance().play(n.Sounds.Explode2), d.RacesData.data.camera.shakeContainer(this.popup)
                        }, this), x.to({
                            alpha: 1
                        }, 400, Phaser.Easing.Linear.None, !0, _ - 100), x = this.game.add.tween(p.scale), x.to({
                            x: .9,
                            y: .9
                        }, 400, Phaser.Easing.Back.Out, !0, _), _ += 1e3);
                        var w = Math.ceil(100 * e.timer),
                            P = w / 100 >> 0;
                        w -= 100 * P;
                        var C = this.game.add.sprite(200, 90, a.default.Garage, "improved_bg0000");
                        if (C.anchor.set(.5), t.addChild(C), C.visible = e.improved, C.alpha = 0, e.improved) {
                            var T = new r.default(this.game, "NEW BEST TIME", n.Constants.styleBestTime, null, null);
                            T.angle = 25, T.y = -25, C.addChild(T);
                            var S = new r.default(this.game, P.toString() + "." + w.toString() + " sec", n.Constants.styleBestTime, null, null);
                            S.angle = 25, S.x = -8, S.y = -5, C.addChild(S), T.label.setShadow(1, 1, "rgba(0,0,0,0.8)"), S.label.setShadow(1, 1, "rgba(0,0,0,0.8)");
                            var A = C.x,
                                E = C.y;
                            C.x = -500, C.alpha = 0;
                            this.game.add.tween(C).to({
                                x: A,
                                y: E,
                                alpha: 1
                            }, 250, Phaser.Easing.Back.InOut, !0)
                        }
                        i.setText("Your time: " + P + "." + w + " sec.")
                    }, e.prototype.postRace = function(t) {
                        var e = d.RacesData.data;
                        e.timer = u.MaxGameCore.instance.timer;
                        var i = 0,
                            s, n = d.RacesData.map.settings.prizes;
                        if (0 === n.length);
                        else {
                            s = n.split(",");
                            var o = void 0,
                                a = void 0;
                            for (o = 0; o < s.length; o++) a = parseFloat(s[o]), e.timer <= a && i++
                        }
                        if (e.stars = i, e.improved = d.Inventory.instance.setRaceResult(d.GameData.raceId, i, e.timer), e.improved) {
                            var r = 1e3 + 50 * (d.RacesData.map.id - 1);
                            if (s) {
                                var l = parseFloat(s[0]) - 5,
                                    c = parseFloat(s[s.length - 1]) + 10,
                                    p = c - l,
                                    f = c - e.timer;
                                f < 0 ? f = 0 : f > p && (f = p), r += (3e3 + 100 * (d.RacesData.map.id - 1)) * f / p
                            }
                            var y = d.Inventory.instance.setScore(d.GameData.raceId, r)
                        }
                        this.setFields(t), h.default.getInstance().save()
                    }, e.prototype.onCallPopup = function(t) {
                        if (u.MaxGameCore.instance.paused) return void this.closePopup();
                        this.createPopup(), 1 !== t && (u.MaxGameCore.instance.paused = !0, y.default.instance.flipTexts.alpha = 0);
                        var i = null,
                            s = "GAME PAUSED",
                            h = o.default.LevelNum,
                            l = null;
                        if (1 === t) {
                            s = h + 1 < 10 ? "LEVEL 0" + (h + 1) + " COMPLETE" : "LEVEL " + (h + 1) + " COMPLETE", this.setNewViewCar(), l = new r.default(this.game, s, n.Constants.styleFinish, null, null, a.default.Garage), l.y = -220, l.label.stroke = "#000000", l.label.strokeThickness = 2;
                            var c = new f.default(this.game, 0, 2, s, n.Constants.styleFinish);
                            if (c.anchor.set(.5), l.label.parent.addChildAt(c, 0), c.stroke = "#FFFFFF", c.strokeThickness = 5, 2 !== e.currCar) {
                                var d = null;
                                d = new r.default(this.game, "CHANGE BIKE", n.Constants.styleFinish1, this.onGarage, this, a.default.Garage), d.y = 190, d.setFrames("orange_btn_big0000", "orange_btn_big0000", "orange_btn_big0000", "orange_btn_big0000"), d.label.setMaxSize(200, 40), d.label.y = -1, d.label.setText("CHANGE BIKE"), d.label.setShadow(1, 1, "rgba(0,0,0,0.8)", 5), this.popup.getChildAt(1).addChild(d)
                            }
                            y.default.instance.timer.visible = !1
                        } else {
                            i = this.game.add.sprite(0, 3, a.default.Garage, "bg0000"), i.anchor.set(.5), i.scale.set(1, 1.4), this.popup.getChildAt(1).addChild(i), l = new r.default(this.game, s, n.Constants.stylePause, null, this, a.default.Garage), l.y = -145, l.label.stroke = "#000000", l.label.strokeThickness = 2;
                            var p = this.game.add.group();
                            this.popup.getChildAt(1).addChild(p), this.setPauseViewCar(p)
                        }
                        l.setFrames("bg0000", "bg0000", "bg0000", "bg0000"), this.popup.getChildAt(1).addChild(l);
                        var g = new r.default(this.game, "", n.Constants.styleCredits1, this.onChooseZone, this, a.default.Garage);
                        g.x = -270, g.y = 200, g.setFrames("orange_btn0000", "orange_btn0000", "orange_btn0000", "orange_btn0000"), g.scale.set(.8);
                        var m = this.game.add.sprite(0, -11, a.default.Garage, "exit_btn0000");
                        m.anchor.set(.5), g.label.parent.addChild(m), this.popup.getChildAt(1).addChild(g);
                        var v = new r.default(this.game, "", n.Constants.stylePopBtn2, 1 === t ? this.onPlayNextLevel : this.onResume, this, a.default.Garage);
                        v.x = 270, v.y = 200, v.setFrames("orange_btn0000", "orange_btn0000", "orange_btn0000", "orange_btn0000"), v.scale.set(.8);
                        var b = this.game.add.sprite(0, -7, a.default.Garage, "next_btn0000");
                        if (b.anchor.set(.5), v.label.parent.addChild(b), this.popup.getChildAt(1).addChild(v), 1 === t) {
                            var x = this.game.add.group();
                            this.popup.getChildAt(1).addChild(x), this.postRace(x)
                        }
                        this.resizePopup(1)
                    }, e.prototype.disposePopup = function() {
                        this.popup && this.popup.destroy(), this.popup = null, u.MaxGameCore.instance.paused = !1, y.default.instance.showTimer()
                    }, e.prototype.backgroundPopup = function() {
                        this.popup = this.game.add.sprite(350, 250, a.default.Garage, "bg0000"), this.popup.anchor.set(.5);
                        var t = this.game.add.sprite(0, 0, a.default.Garage, "bg0000");
                        t.width = this.game.width, t.height = this.game.height, t.inputEnabled = !0, t.anchor.set(.5), this.popup.addChild(t), this.world.addChild(y.default.instance.container), y.default.instance.hideTimer()
                    }, e.prototype.createPopup = function() {
                        null !== this.popup && this.disposePopup(), this.backgroundPopup();
                        var t = this.game.add.sprite(0, 0, a.default.Garage, "0popup_bg0000");
                        t.anchor.set(.5), this.popup.addChild(t)
                    }, e.prototype.resizePopup = function(t) {
                        if (null !== this.popup) {
                            var e = this.popup.removeChildAt(0);
                            e.width = this.game.width, e.height = this.game.height, this.popup.x = this.world.bounds.centerX, this.popup.y = this.world.bounds.centerY, this.popup.addChildAt(e, 0)
                        }
                    }, e.prototype.closePopup = function() {
                        this.disposePopup()
                    }, e.prototype.onResume = function() {
                        this.closePopup()
                    }, e.prototype.onChooseZone = function() {
                        h.default.getInstance().save(), this.closePopup(), new c.default(this.game, 0, o.default.Name)
                    }, e.prototype.onGarage = function() {
                        h.default.getInstance().save(), this.closePopup(), new c.default(this.game, 0, g.default.Name)
                    }, e.prototype.parseStaticGraphic = function(t, e) {
                        var i = null;
                        i = this.game.add.image(t[e].x, t[e].y, a.default.Cars, t[e].g + "0000"), i.angle = t[e].r, -1 !== e.indexOf("base") ? i.anchor.set(m.AssetsList.FRAMES_ANCHORX[0], m.AssetsList.FRAMES_ANCHORY[0]) : -1 !== e.indexOf("suspend") ? -1 !== e.indexOf("front") ? i.anchor.set(.8, -1 !== t[e].g.indexOf("1") ? .2 : .5) : i.anchor.set(0, .5) : i.anchor.set(.5), this.bike.addChild(i)
                    }, e.prototype.setPauseViewCar = function(t) {
                        null !== this.bike ? (this.bike.destroy(), this.bike = this.game.add.group(t)) : this.bike = this.game.add.group(t);
                        var e = d.CarsData.geomObj.bike11,
                            i = "Wheel0";
                        this.parseStaticGraphic(e, i), i = "Wheel1", this.parseStaticGraphic(e, i), i = "suspend_back", this.parseStaticGraphic(e, i), i = "base", this.parseStaticGraphic(e, i), i = "driver_corpse", this.parseStaticGraphic(e, i), i = "driver_hip", this.parseStaticGraphic(e, i), i = "driver_shin", this.parseStaticGraphic(e, i), i = "driver_arm", this.parseStaticGraphic(e, i), i = "driver_forearm", this.parseStaticGraphic(e, i), i = "driver_head", this.parseStaticGraphic(e, i), i = "suspend_front", this.parseStaticGraphic(e, i), this.bike.x = 0, this.bike.y = 10
                    }, e.prototype.update = function() {
                        if (this.isFirstUpdate) return this.isFirstUpdate = !1, this.timeAcc = 0, void(this.prevTimeMS = Date.now());
                        if (!e.isAdsPause)
                            for (t.prototype.update.call(this), this.currTimeMS = Date.now(), this.deltaTime = (this.currTimeMS - this.prevTimeMS) / 1e3, this.deltaTime > e.MAX_FRAME_TIME && (this.deltaTime = e.MAX_FRAME_TIME), this.prevTimeMS = this.currTimeMS, this.timeAcc += this.deltaTime; this.timeAcc >= e.DESIRED_FRAME_TIME;) this.updateGameController(e.DESIRED_FRAME_TIME), this.timeAcc -= e.DESIRED_FRAME_TIME
                    }, e.prototype.resize = function() {
                        t.prototype.resize.call(this);
                        var e = 1;
                        this.game.width / this.game.height >= n.Constants.WIDTH / n.Constants.HEIGHT ? (e = this.game.width / n.Constants.WIDTH, e = e > 1 ? 1 : e) : (e = this.game.height / n.Constants.HEIGHT, e = e > 1 ? 1 : e), y.default.instance.resize(e), this.resizePopup(e)
                    }, e.prototype.shutdown = function() {
                        this.closePopup(), u.MaxGameCore.instance.release(), y.default.instance.release(), t.prototype.shutdown.call(this)
                    }, e.prototype.render = function() {
                        null !== this.popup && dragonBones.PhaserFactory.factory.dragonBones.advanceTime(-1), t.prototype.render.call(this)
                    }, e.prototype.initData = function() {
                        this.isFirstUpdate = !0
                    }, e.prototype.updateGameController = function(t) {
                        u.MaxGameCore.instance.update(t), y.default.instance.setTimer()
                    }, e.Name = "gameplay", e.pause = !1, e.MAX_FRAME_TIME = .1, e.DESIRED_FRAME_TIME = 1 / 30, e.isAdsPause = !1, e.loadedLevel = !1, e.currCar = -1, e
                }(Phaser.State);
            e.default = x
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0, i(13), i(10);
            var n = i(8),
                o = i(15),
                a = i(127),
                r = i(3),
                h = i(14),
                l = i(39),
                c = i(16),
                u = i(12),
                d = i(0),
                p = i(17),
                f = i(22),
                y = i(29),
                g = i(21),
                m = i(28),
                v = i(23),
                b = function(t) {
                    function e() {
                        var i = t.call(this) || this;
                        return i.name = e.Name, i.popup = null, i.popup_btn = null, i.google_btn = null, i.apple_btn = null, i._armatureDisplay = null, i
                    }
                    return s(e, t), e.prototype.init = function() {
                        this.game.world.removeAll(), dragonBones.PhaserFactory.init(this.game), u.default.DISPLAY_W = Phaser.Math.max(this.game.width, this.game.height), u.default.DISPLAY_H = Phaser.Math.min(this.game.width, this.game.height)
                    }, e.prototype.create = function() {
                        t.prototype.create.call(this), d.Inventory.instance.signalUnlock.removeAll(), d.Inventory.instance.signalUnlock.addOnce(function() {
                            new c.default(this.game, 0, f.default.Name)
                        }, this), this.background2 = this.game.add.sprite(0, 0, r.Atlases.Garage, "0bg_garage0000"), this.background = this.game.add.sprite(0, 0, r.Atlases.Garage, "0bg_garage0000"), this.background3 = this.game.add.sprite(0, 0, r.Atlases.Garage, "bg0000"), this.background4 = this.game.add.sprite(0, 0, r.Atlases.Garage, "bg0000");
                        var e = this.game.cache.getJSON(y.default.DBMenu),
                            i = this.game.cache.getJSON(y.default.DBMenu_Texture),
                            s = this.game.cache.getImage(m.default.DBMenu, !0).base;
                        dragonBones.PhaserFactory.factory.parseDragonBonesData(e), dragonBones.PhaserFactory.factory.parseTextureAtlasData(i, s), this._armatureDisplay = dragonBones.PhaserFactory.factory.buildArmatureDisplay("biker_anim"), this._armatureDisplay.x = 0, this._armatureDisplay.y = 360, this._armatureDisplay.animation.play("biker menu animation", -1), this.background.addChild(this._armatureDisplay);
                        var n = {
                            font: "bold 20px Djvu",
                            fill: "#FFFFFF"
                        };
                        this.bgTop = this.game.add.image(0, 0, r.Atlases.Garage, "top_bg0000"), this.bgTop.scale.set(1.5, 1), this.playBtn = new h.default(this.game, "Play", r.Constants.stylePlay, this.startGame, this, r.Atlases.Garage), this.playBtn.setFrames("play_btn0000", "play_btn0000", "play_btn0000", "play_btn0000"), this.playBtn.x = 500, this.playBtn.y = 200, this.playBtn.label.x = 130, this.playBtn.label.stroke = "#000000", this.playBtn.label.strokeThickness = 5;
                        var u = new p.default(this.game, 130, 2, "Play", r.Constants.stylePlay);
                        u.anchor.set(.5), this.playBtn.label.parent.addChildAt(u, 0);
                        var g = this.game.add.image(100, 0, r.Atlases.Garage, "black0000");
                        g.alpha = 0, g.width = 280, g.height = 100, g.anchor.set(.5), g.inputEnabled = !0, g.input.useHandCursor = !0, g.events.onInputDown.addOnce(this.startGame, this), this.playBtn.label.parent.addChild(g), u.stroke = "#FFFFFF", u.strokeThickness = 10, this.background4.addChild(this.playBtn), this.moregames = new h.default(this.game, "Reset", n, this.resetGame, this, r.Atlases.Garage), this.moregames.setFrames("play_btn0000", "play_btn0000", "play_btn0000", "play_btn0000"), this.moregames.x = 620, this.moregames.y = 400, this.background4.addChild(this.moregames), this.moregames.visible = !1;
                        var v = new a.default(this.game, 0, 0, " ", n, this.onCredits, this, 10, 10, r.Atlases.Garage);
                        v.setFrames("btn_credits0000", "btn_credits0000", "btn_credits0001", "btn_credits0000"), v.alignIn(this.world.bounds, Phaser.TOP_LEFT, -1, -1), this.world.addChild(v), this.logo = this.game.add.image(200, 100, r.Atlases.Garage, "0logo0000"), this.logo.anchor.set(.5), this.garageBtn = new h.default(this.game, "", null, this.onGarage, this, r.Atlases.Garage), this.garageBtn.setFrames("shop_btn0000", "shop_btn0000", "shop_btn0000", "shop_btn0000"), this.garageBtn.x = this.game.width - 140, this.garageBtn.y = 30, this.world.addChild(this.garageBtn), this.musicBtn = this.game.add.image(this.game.width - 40, 25, r.Atlases.Garage, "InGameMusicButton0000"), this.musicBtn.inputEnabled = !1, this.musicBtn.events.onInputUp.add(this.toggleMusic, this), this.musicBtn.anchor.set(.5), this.playBtn.visible = !1, this.blackRightBG = this.game.add.sprite(900, r.Constants.HEIGHT / 2, r.Atlases.Garage, "0popup_bg0000"), this.blackRightBG.anchor.set(.5), this.blackRightBG.angle = 90, this.background3.addChild(this.blackRightBG);
                        var b = this.game.add.sprite(0, -r.Constants.HEIGHT / 2, r.Atlases.Garage, "0popup_bg0000");
                        b.anchor.set(.5), this.blackRightBG.addChild(b), b = this.game.add.sprite(0, 0, r.Atlases.Garage, "0popup_bg0000"), b.anchor.set(.5), this.blackRightBG.addChild(b), this.textVersion = new p.default(this.game, 680, 470, " " + r.Constants.VERSION, r.Constants.styleVersion), this.background3.addChild(this.textVersion), this.google_btn = new h.default(this.game, "", n, this.onGoogle, this, r.Atlases.Garage), this.google_btn.setFrames("google_btn0000", "google_btn0000", "google_btn0000", "google_btn0000"), this.google_btn.x = 110, this.google_btn.y = 380, this.background.addChild(this.google_btn), this.apple_btn = new h.default(this.game, "", n, this.onApple, this, r.Atlases.Garage), this.apple_btn.setFrames("apple_btn0000", "apple_btn0000", "apple_btn0000", "apple_btn0000"), this.apple_btn.x = 110, this.apple_btn.y = 445, this.background.addChild(this.apple_btn), o.default.getInstance(this.game, this.onLoadSave, this), new l.default(this.game, 0, null), this.resize()
                    }, e.prototype.onLoadSave = function() {
                        n.default.getInstance(this.game).playMusic(r.Sounds.MenuMusic), this.musicBtn.inputEnabled = !0, this.updateSoundButtons(), this.playBtn.visible = !0
                    }, e.prototype.onGoogle = function() {
                        window.open(v.default.getInstance().getUrl(v.default.Google), "_blank")
                    }, e.prototype.onApple = function() {
                        window.open(v.default.getInstance().getUrl(v.default.Apple), "_blank")
                    }, e.prototype.initGame = function() {
                        null === d.GameData.currentCar && (d.GameData.currentCar = this.game.cache.getJSON(y.default.Car001), d.CarsData.geomObj = this.game.cache.getJSON(y.default.Objects), this.setCar(d.GameData.currentCar))
                    }, e.prototype.startGame = function() {
                        if ("undefined" != typeof gdsdk && "undefined" !== gdsdk.showBanner) var t = gdsdk.showBanner();
                        n.default.getInstance().play(r.Sounds.Click), this.initGame(), new c.default(this.game, 0, f.default.Name)
                    }, e.prototype.onGarage = function() {
                        n.default.getInstance().play(r.Sounds.Click), this.initGame(), new c.default(this.game, 0, g.default.Name)
                    }, e.prototype.setCar = function(t) {
                        d.CarsData.params = new d.CarParams, d.CarsData.params.setData(t), g.default.currCar = g.default.carList.indexOf(d.Inventory.instance.skin), d.CarsData.params.skinId = g.default.carList[g.default.currCar]
                    }, e.prototype.resetGame = function() {
                        d.Inventory.instance.reset(), o.default.getInstance().save()
                    }, e.unlockGame = function() {
                        d.Inventory.instance.unlockAll(), o.default.getInstance().save()
                    }, e.prototype.toggleMusic = function() {
                        o.default.getInstance().music ? n.default.getInstance().toggleMusic() : o.default.getInstance().sfx ? n.default.getInstance().toggleSfx() : (n.default.getInstance().toggleSfx(), n.default.getInstance().toggleMusic()), this.updateSoundButtons(), n.default.getInstance().play(r.Sounds.Click)
                    }, e.prototype.updateSoundButtons = function() {
                        var t = o.default.getInstance().music ? 0 : 1;
                        t += o.default.getInstance().sfx ? 0 : 1, this.musicBtn.loadTexture(r.Atlases.Garage, "InGameMusicButton000" + t)
                    }, e.prototype.onCredits = function() {
                        this.createPopup();
                        for (var t = 23, e, i = [" ", " ", " ", " ", " ", "CEO: Konstantin Matrunchik", "Coding: Dmitry Borozenets", "Art: Andrey Zdyschuk", "Game Design: Vasiliy Kachor", "Menu song: skyler182.newgrounds.com", "Ported by iriysoft.com"], s = 0; s < i.length; s++) e = new h.default(this.game, i[s], i.length - 2 <= s ? r.Constants.styleCredits2 : r.Constants.styleCredits1, null, this, r.Atlases.Garage), e.y = 23 * s - 75, e.setFrames("bg0000", "bg0000", "bg0000", "bg0000"), e.btn.inputEnabled = !1, this.popup.getChildAt(1).addChild(e);
                        this.popup_btn = new h.default(this.game, "OK", r.Constants.styleCreditsOK, this.disposePopup, this, r.Atlases.Garage), this.popup_btn.setFrames("orange_btn0000", "orange_btn0000", "orange_btn0000", "orange_btn0000"), this.popup_btn.y = 200, this.popup_btn.btn.alpha = 0, this.popup_btn.label.y = 0, this.popup_btn.label.stroke = "#000000", this.popup_btn.label.strokeThickness = 5;
                        var n = new p.default(this.game, 0, 0, "OK", r.Constants.styleCreditsOK);
                        n.anchor.set(.5), this.popup_btn.label.parent.addChildAt(n, 0), n.stroke = "#FFFFFF", n.strokeThickness = 10;
                        var o = this.game.add.image(0, -130, r.Atlases.Garage, "logo_mad0000");
                        o.anchor.set(.5), o.scale.set(.5), o.inputEnabled = !0, o.input.useHandCursor = !0, o.events.onInputDown.add(this.onLogo, this), this.popup.getChildAt(1).addChild(o);
                        var a = this.game.add.image(0, 0, r.Atlases.Garage, "vk_icon0000");
                        a.anchor.set(.5), a.inputEnabled = !0, a.input.useHandCursor = !0, a.events.onInputDown.add(this.onVK, this), this.popup.getChildAt(1).addChild(a);
                        var l = this.game.add.image(70, 0, r.Atlases.Garage, "fb_icon0000");
                        l.anchor.set(.5), l.inputEnabled = !0, l.input.useHandCursor = !0, l.events.onInputDown.add(this.onFB, this), this.popup.getChildAt(1).addChild(l);
                        var c = this.game.add.image(-70, 0, r.Atlases.Garage, "tw_icon0000");
                        c.anchor.set(.5), c.inputEnabled = !0, c.input.useHandCursor = !0, c.events.onInputDown.add(this.onTW, this), this.popup.getChildAt(1).addChild(c), this.resizePopup(1)
                    }, e.prototype.onLogo = function() {
                        window.open("http://madpuffers.com/", "_blank")
                    }, e.prototype.onVK = function() {
                        window.open("https://vk.com/madpuffers", "_blank")
                    }, e.prototype.onFB = function() {
                        window.open("https://www.facebook.com/madpuffers", "_blank")
                    }, e.prototype.onTW = function() {
                        window.open("https://twitter.com/MadPuffers", "_blank")
                    }, e.prototype.disposePopup = function() {
                        this.popup.destroy(), this.popup = null, this.popup_btn.destroy(), this.popup_btn = null
                    }, e.prototype.backgroundPopup = function() {
                        this.popup = this.game.add.sprite(350, 250, r.Atlases.Garage, "bg0000"), this.popup.anchor.set(.5);
                        var t = this.game.add.sprite(0, 0, r.Atlases.Garage, "black0000");
                        t.width = this.game.width + 500, t.height = this.game.height + 500, t.inputEnabled = !0, t.anchor.set(.5), this.popup.addChild(t)
                    }, e.prototype.createPopup = function() {
                        null !== this.popup && this.disposePopup(), this.backgroundPopup();
                        var t = this.game.add.sprite(0, 0, r.Atlases.Garage, "0popup_bg0000");
                        t.anchor.set(.5), this.popup.addChild(t)
                    }, e.prototype.resizePopup = function(t) {
                        if (null !== this.popup) {
                            var e = this.popup.removeChildAt(0);
                            e.width = this.game.width + 500, e.height = this.game.height + 500, this.popup.x = this.world.bounds.centerX, this.popup.y = this.world.bounds.centerY, this.popup.addChildAt(e, 0), this.popup_btn.x = this.world.bounds.centerX, this.popup_btn.y = this.world.bounds.centerY + 200
                        }
                    }, e.prototype.render = function() {
                        dragonBones.PhaserFactory.factory.dragonBones.advanceTime(-1), t.prototype.render.call(this)
                    }, e.prototype.resize = function() {
                        var e = 1;
                        e = this.game.width / r.Constants.WIDTH, e = e > 1 ? 1 : e, this.garageBtn.x = this.game.width - 120, this.musicBtn.x = this.game.width - 35, this.bgTop.x = this.game.width - 250, this.background.scale.set(e), this.background.alignIn(this.world.bounds, Phaser.BOTTOM_CENTER), this.logo.scale.set(e), this.background2.scale.set(2.02 * Phaser.Math.max(this.game.width / r.Constants.WIDTH, this.game.height / r.Constants.HEIGHT)), this.background2.alignIn(this.world.bounds, Phaser.CENTER), this.background2.visible = !1, this._armatureDisplay.x = -this.background.x - 50, this.game.width > 820 ? this.blackRightBG.x = 900 : this.game.width - 110 > 450 ? this.blackRightBG.x = this.game.width - 110 : this.blackRightBG.x = this.game.width, this.game.width > r.Constants.WIDTH && (this.google_btn.x = 110 - (this.game.width - r.Constants.WIDTH) / 2, this.apple_btn.x = this.google_btn.x), this.playBtn.x = this.game.width - 250, this.playBtn.y = 200, this.moregames.x = this.game.width - 100, this.moregames.y = this.game.height - 180, this.playBtn.scale.set(e), this.moregames.scale.set(e), this.textVersion.x = this.game.width - 60, this.textVersion.y = this.game.height - 20, this.resizePopup(e), t.prototype.resize.call(this)
                    }, e.prototype.shutdown = function() {
                        t.prototype.shutdown.call(this), this.background = null, this.background2 = null, this.popup = null, this.popup_btn = null, this.playBtn = null, this.moregames = null, this.musicBtn = null, this.bgTop = null, this._armatureDisplay = null
                    }, e.Name = "menu", e
                }(Phaser.State);
            e.default = b
        }, function(t, e) {
            var i;
            i = function() {
                return this
            }();
            try {
                i = i || Function("return this")() || (0, eval)("this")
            } catch (t) {
                "object" == typeof window && (i = window)
            }
            t.exports = i
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = function() {
                function t() {}
                return t.DBBike = "bikes_texture", t.DBMenu = "menu_texture", t.preloadList = [], t.list = [t.DBBike, t.DBMenu], t
            }();
            e.default = s
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = function() {
                function t() {}
                return t.Level001 = "map1", t.Level002 = "map2", t.Level003 = "map3", t.Level004 = "map4", t.Level005 = "map5", t.Level006 = "map6", t.Level007 = "map7", t.Level008 = "map8", t.Level009 = "map9", t.Level010 = "map10", t.Level011 = "map11", t.Level012 = "map12", t.Level013 = "map13", t.Level014 = "map14", t.Level015 = "map15", t.Level016 = "map16", t.Level017 = "map17", t.Level018 = "map18", t.Level019 = "map19", t.Level020 = "map20", t.Level021 = "map21", t.Level022 = "map22", t.Level023 = "map23", t.Level024 = "map24", t.Level025 = "map25", t.Car001 = "1", t.Bike = "bike", t.DBBike = "bikes_skeleton", t.DBBike_Texture = "bikes_texture", t.DBMenu = "menu_skeleton", t.DBMenu_Texture = "menu_texture", t.Objects = "objects", t.preloadList = [t.Objects], t.list = [t.Car001, t.Level001, t.Level002, t.Level003, t.Level004, t.Level005, t.Level006, t.Level007, t.Level008, t.Level009, t.Level010, t.Level011, t.Level012, t.Level013, t.Level014, t.Level015, t.Level016, t.Level017, t.Level018, t.Level019, t.Level020, t.Level021, t.Level022, t.Level023, t.Level024, t.Level025, t.Objects, t.DBBike, t.DBBike_Texture, t.DBMenu, t.DBMenu_Texture, t.Bike], t
            }();
            e.default = s
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0, i(13), i(10);
            var n = i(3),
                o = i(16),
                a = i(26),
                r = i(2),
                h = function(t) {
                    function e() {
                        var i = t.call(this) || this;
                        return i.name = e.Name, i.loadComplete = !0, i.bike = null, i.w0 = null, i.w1 = null, i.wait = null, i.mainParent = null, i
                    }
                    return s(e, t), e.prototype.preload = function() {
                        var e = this;
                        t.prototype.preload.call(this), this.wait = this.game.add.text(this.game.width / 2, this.game.height / 2, "LOADING...", n.Constants.styleCredits0), this.wait.anchor.set(.5), this.game.sound.muteOnPause = !0, this.game.load.onFileComplete.add(this.fileComplete, this);
                        var i = "x" + n.Constants.GAME_SCALE + "/";
                        n.JSONData.list.forEach(function(t) {
                            e.game.load.json(t, "assets/levels/" + t + ".json")
                        }), n.Images.list.forEach(function(t) {
                            e.game.load.image(t, "assets/images/" + i + t + ".png")
                        }), n.Atlases.list.forEach(function(t) {
                            e.game.load.atlas(t, "assets/atlases/" + i + t + ".png", "assets/atlases/" + i + t + ".json")
                        }), n.Sounds.list.forEach(function(t) {
                            e.game.device.iOS ? e.game.load.audio(t, ["assets/sound/" + t + ".m4a"]) : e.game.load.audio(t, ["assets/sound/" + t + ".ogg", "assets/sound/" + t + ".mp3"])
                        }), this.game.scale.onSizeChange.add(function() {
                            e.game.state.getCurrentState().resize()
                        }, this)
                    }, e.prototype.init = function() {
                        t.prototype.init.call(this), this.mainParent = this.game.add.group(), this.mainParent.x = this.game.width / 2, this.mainParent.y = this.game.height / 2 - 80, this.setPauseViewCar(this.mainParent)
                    }, e.prototype.setPauseViewCar = function(t) {
                        null !== this.bike ? (this.bike.destroy(), this.bike = this.game.add.group(t)) : this.bike = this.game.add.group(t);
                        var e = this.game.cache.getJSON(n.JSONData.Objects).bike11,
                            i = "Wheel0";
                        this.w0 = this.parseStaticGraphic(e, i), i = "Wheel1", this.w1 = this.parseStaticGraphic(e, i), i = "suspend_back", this.parseStaticGraphic(e, i), i = "base", this.parseStaticGraphic(e, i), i = "driver_corpse", this.parseStaticGraphic(e, i), i = "driver_hip", this.parseStaticGraphic(e, i), i = "driver_shin", this.parseStaticGraphic(e, i), i = "driver_arm", this.parseStaticGraphic(e, i), i = "driver_forearm", this.parseStaticGraphic(e, i), i = "driver_head", this.parseStaticGraphic(e, i), i = "suspend_front", this.parseStaticGraphic(e, i), this.bike.x = 0, this.bike.y = 10
                    }, e.prototype.parseStaticGraphic = function(t, e) {
                        var i = null;
                        return i = this.game.add.image(t[e].x, t[e].y, n.Atlases.Cars, t[e].g + "0000"), i.angle = t[e].r, -1 !== e.indexOf("base") ? i.anchor.set(r.AssetsList.FRAMES_ANCHORX[0], r.AssetsList.FRAMES_ANCHORY[0]) : -1 !== e.indexOf("suspend") ? -1 !== e.indexOf("front") ? i.anchor.set(.8, -1 !== t[e].g.indexOf("1") ? .2 : .5) : i.anchor.set(0, .5) : i.anchor.set(.5), this.bike.addChild(i), i
                    }, e.prototype.create = function() {
                        t.prototype.create.call(this)
                    }, e.prototype.update = function() {
                        t.prototype.update.call(this), this.loadComplete && (this.loadComplete = !1, e.game = this.game, new o.default(this.game, 0, a.default.Name))
                    }, e.prototype.fileComplete = function(t, e, i, s, n) {
                        this.wait.setText("Loading..." + t + "%"), this.w0.angle = 720 * t / 100, this.w1.angle = 720 * t / 100
                    }, e.prototype.resize = function() {
                        var e = 1;
                        e = this.game.width / n.Constants.WIDTH, e = e > 1 ? 1 : e, this.mainParent && (this.mainParent.x = this.game.width / 2, this.mainParent.y = this.game.height / 2 - 80), this.wait && this.wait.position.set(this.game.width / 2, this.game.height / 2), t.prototype.resize.call(this)
                    }, e.prototype.shutdown = function() {
                        t.prototype.shutdown.call(this)
                    }, e.Name = "preloader", e.game = null, e
                }(Phaser.State);
            e.default = h
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = i(0),
                n = i(32),
                o = function() {
                    function t() {
                        this.object = null, this.car = null, this.tweening = !1
                    }
                    return t.prototype.setup = function(t, e, i, s) {
                        this.maxScale = this.maxScale, this.tweening = !1, this.viewportW = e, this.viewportH = i, this.viewportHalfH = .5 * i, this.viewportHalfW = .5 * e, this.object = t, this.prevX = t.x, this.prevY = t.y, this.car = s, this.prevScale = t.scale.x, this.prevFrameH = i, n.CameraPathes.instance.tweened = !1, this.shakeX = 0, this.shakeY = 0
                    }, t.prototype.hardFocusOnCar = function(e, i, s) {
                        this.update(e + t.CAR_DX / s, i - 100, s, !1)
                    }, t.prototype.shake = function() {
                        var t = s.GraphicUtil.game.add.tween(this);
                        t.to({
                            shakeX: 15,
                            shakeY: 15
                        }, 100, Phaser.Easing.Bounce.InOut, !1, 0, 3, !0), t.start()
                    }, t.prototype.shakeContainer = function(t) {
                        void 0 === t && (t = null);
                        var e = s.GraphicUtil.game.add.tween(t),
                            i = t.x,
                            n = t.y;
                        e.to({
                            x: t.x - 10,
                            y: t.y - 10
                        }, 15, Phaser.Easing.Bounce.InOut, !1, 0, 3, !0), e.onComplete.addOnce(function() {
                            t.x = i, t.y = n
                        }, this), e.start()
                    }, t.prototype.update = function(e, i, s, n) {
                        void 0 === n && (n = !1);
                        var o, a, r = 1;
                        if (n) {
                            var h = .4;
                            this.prevX += .4 * (e - this.prevX), this.prevY += .4 * (i - this.prevY), r = this.prevScale + (s - this.prevScale), o = -this.prevX * r + this.viewportHalfW, a = -this.prevY * r + this.viewportHalfH
                        } else r = s, o = -e * r + this.viewportHalfW, a = -i * r + this.viewportHalfH, this.prevX = e, this.prevY = i;
                        this.prevScale = r, t.x = -o / r, t.y = -a / r, this.car.finished || this.updateObject(o + this.shakeX, a + this.shakeY, r), t.w = this.viewportW / r, t.h = this.viewportH / r, t.scale = r
                    }, t.prototype.updateObject = function(t, e, i) {
                        this.object.scale.set(i), this.object.x = t, this.object.y = e
                    }, t.prototype.focusOnCar = function(e, i, s) {
                        var o = n.CameraPathes.instance.getPathPointXY(e, i),
                            a = !1,
                            r = 1,
                            h = this.getFrameHBySpeed(s),
                            l, c;
                        if (isNaN(o)) r = t.SCALE_MULT * this.viewportH / h, l = e + t.CAR_DX / r, c = i - 100;
                        else {
                            var u = 200,
                                d = o - i + 200;
                            d > h && (h = d), r = t.SCALE_MULT * this.viewportH / h, c = o - .5 * h, l = e + t.CAR_DX / r, a = n.CameraPathes.instance.tweened
                        }
                        a && (this.tweening = !0), this.update(l, c, r, this.tweening)
                    }, t.prototype.focusOnCameraZone = function(t, e) {
                        var i = s.CameraZone.current,
                            n = i.x,
                            o = i.y;
                        i.move === s.CameraZone.HOR ? n = t < i.minMove ? i.minMove : t > i.maxMove ? i.maxMove : t : i.move === s.CameraZone.VER && (o = e < i.minMove ? i.minMove : e > i.maxMove ? i.maxMove : e), this.tweening = !0, this.update(n, o, i.scale, !0)
                    }, t.prototype.focusOnPoint = function(t, e) {
                        this.tweening = !0, this.update(t, e, 1, !0)
                    }, t.prototype.getFrameHBySpeed = function(t) {
                        var e = this.viewportH,
                            i = 500,
                            s = 3e3;
                        if (t > 500) {
                            var n = this.viewportH;
                            t = t > 3e3 ? 3e3 : t;
                            e += (t - 500) / 2500 * n
                        }
                        var o = e - this.prevFrameH,
                            a = 2;
                        return o < -2 ? e = this.prevFrameH - 2 : o > 8 && (e = this.prevFrameH + 8), this.prevFrameH = e, e
                    }, t.prototype.release = function() {
                        this.object = null, this.car = null
                    }, t.inCamera = function(e, i, s) {
                        return e > t.x - s && e < t.x + t.w + s && i > t.y - s && i < t.y + t.h + s
                    }, t.CAR_DX = 150, t.SCALE_MULT = 1, t
                }();
            e.RaceCamera = o
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = nape.geom.Vec2,
                n = function() {
                    function t() {
                        this.tweened = !1, this.pathes = []
                    }
                    return t.prototype.reset = function() {
                        this.prevPath = null, this.tweened = !1
                    }, t.prototype.addPathByPoints = function(t) {
                        var e = new o(t);
                        this.pathes.push(e)
                    }, t.prototype.getPathPointXY = function(t, e) {
                        for (var i = NaN, s = this.pathes.length, n, o = 0; o < s; o++) {
                            var a = this.pathes[o],
                                r = a.getPoint(t, e);
                            isNaN(r) || (isNaN(i) ? (i = r, n = a) : r < i && (i = r, n = a))
                        }
                        return null !== this.prevPath && this.prevPath !== n && (this.tweened = !0), this.prevPath = n, i
                    }, t.prototype.clearPrevPath = function() {
                        this.tweened = !1, this.prevPath = null
                    }, t.prototype.clear = function() {
                        this.clearPrevPath(), this.pathes.splice(0, this.pathes.length)
                    }, Object.defineProperty(t, "instance", {
                        get: function() {
                            return null === t._instance && (t._instance = new t), t._instance
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t._instance = null, t
                }();
            e.CameraPathes = n;
            var o = function() {
                function t(t) {
                    this.points = t, this.minX = t[0].x, this.maxX = t[t.length - 1].x
                }
                return t.prototype.getPoint = function(t, e) {
                    if (t < this.minX || t > this.maxX) return NaN;
                    for (var i = this.points.length, n = s.get(0, 0), o = 1; o < i; o++) {
                        var a = this.points[o];
                        if (a.x >= t) {
                            var r = this.points[o - 1],
                                h = t - r.x;
                            n.x = a.x - r.x, n.y = a.y - r.y;
                            var l = h * Math.tan(n.angle),
                                c = r.y + l;
                            return c < e ? NaN : c
                        }
                    }
                    return NaN
                }, t
            }();
            e.CameraPath = o
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = function() {
                function t() {}
                return Object.defineProperty(t, "map", {
                    get: function() {
                        return t._map
                    },
                    set: function(e) {
                        t._map !== e && t.data.reset(), t._map = e
                    },
                    enumerable: !0,
                    configurable: !0
                }), t.EDITED = -1, t.MAP_COUNT = 25, t._map = {}, t.prize_coin = 100, t
            }();
            e.RacesData = s
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = function() {
                function t() {}
                return t.raceId = 0, t.currentLevel = null, t.currentCar = null, t.raceResult = 0, t.carId = -1, t
            }();
            e.GameData = s
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = Phaser.Keyboard,
                n = i(3),
                o = i(14),
                a = i(12),
                r = function() {
                    function t() {
                        this.container = null, this.btnUp = null, this.btnDown = null, this.btnLeft = null, this.btnRight = null, this._isbtnUp = !1, this._isbtnDown = !1, this._isbtnLeft = !1, this._isbtnRight = !1
                    }
                    return Object.defineProperty(t.prototype, "isbtnUp", {
                        get: function() {
                            return a.default.isDesktop ? this.keyboard.isDown(s.UP) || this.keyboard.isDown(s.W) : this._isbtnUp || this.keyboard.isDown(s.UP) || this.keyboard.isDown(s.W)
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t.prototype, "isbtnDown", {
                        get: function() {
                            return a.default.isDesktop ? this.keyboard.isDown(s.DOWN) || this.keyboard.isDown(s.S) : this._isbtnDown || this.keyboard.isDown(s.DOWN) || this.keyboard.isDown(s.S)
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t.prototype, "isbtnLeft", {
                        get: function() {
                            return a.default.isDesktop ? this.keyboard.isDown(s.LEFT) || this.keyboard.isDown(s.A) : this._isbtnLeft || this.keyboard.isDown(s.LEFT) || this.keyboard.isDown(s.A)
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t.prototype, "isbtnRight", {
                        get: function() {
                            return a.default.isDesktop ? this.keyboard.isDown(s.RIGHT) || this.keyboard.isDown(s.D) : this._isbtnRight || this.keyboard.isDown(s.RIGHT) || this.keyboard.isDown(s.D)
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t.prototype.init = function(t, e) {
                        this.container = t, this.game = e, this.container.inputEnableChildren = !0, this.keyboard = this.game.input.keyboard, this.keyboard.addKeyCapture(s.RIGHT), this.keyboard.addKeyCapture(s.LEFT), this.keyboard.addKeyCapture(s.DOWN), this.keyboard.addKeyCapture(s.UP), a.default.isDesktop || this.createButtons()
                    }, t.prototype.createButtons = function() {
                        var t = this.game.add.image(0, 0, n.Atlases.Garage, "arrow_key0000");
                        t.anchor.set(.5), this.btnUp = new o.default(this.game, "", {}, null, null, n.Atlases.Garage), this.btnUp.setFrames("btn_body0000", "btn_body0000", "btn_body0001", "btn_body0000"), this.btnUp.x = this.game.width - 70, this.btnUp.y = this.game.height - 70, this.btnUp.scale.set(1.3), this.btnUp.btn.events.onInputDown.add(this.upTap, this), this.btnUp.btn.events.onInputUp.add(this.upUnTap, this), this.container.addChild(this.btnUp), this.btnUp.label.parent.addChild(t), t = this.game.add.image(0, 0, n.Atlases.Garage, "arrow_key0000"), t.anchor.set(.5), t.rotation = 180 * Math.PI / 180, this.btnDown = new o.default(this.game, "", {}, null, null, n.Atlases.Garage), this.btnDown.setFrames("btn_body0000", "btn_body0000", "btn_body0001", "btn_body0000"), this.btnDown.x = this.game.width - 220, this.btnDown.y = this.game.height - 70, this.btnDown.scale.set(1.3), this.btnDown.btn.events.onInputDown.add(this.downTap, this), this.btnDown.btn.events.onInputUp.add(this.downUnTap, this), this.container.addChild(this.btnDown), this.btnDown.label.parent.addChild(t), t = this.game.add.image(0, 0, n.Atlases.Garage, "arrow_key20000"), t.anchor.set(.5), t.scale.set(-1, 1), this.btnLeft = new o.default(this.game, "", {}, null, null, n.Atlases.Garage), this.btnLeft.setFrames("btn_body0000", "btn_body0000", "btn_body0001", "btn_body0000"), this.btnLeft.x = 70, this.btnLeft.y = this.game.height - 70, this.btnLeft.scale.set(1.3), this.btnLeft.btn.events.onInputDown.add(this.leftTap, this), this.btnLeft.btn.events.onInputUp.add(this.leftUnTap, this), this.container.addChild(this.btnLeft), this.btnLeft.label.parent.addChild(t), t = this.game.add.image(0, 0, n.Atlases.Garage, "arrow_key20000"), t.anchor.set(.5), this.btnRight = new o.default(this.game, "", {}, null, null, n.Atlases.Garage), this.btnRight.setFrames("btn_body0000", "btn_body0000", "btn_body0001", "btn_body0000"), this.btnRight.x = 220, this.btnRight.y = this.game.height - 70, this.btnRight.scale.set(1.3), this.btnRight.btn.events.onInputDown.add(this.rightTap, this), this.btnRight.btn.events.onInputUp.add(this.rightUnTap, this), this.container.addChild(this.btnRight), this.btnRight.label.parent.addChild(t)
                    }, t.prototype.upTap = function() {
                        this._isbtnUp = !0
                    }, t.prototype.downTap = function() {
                        this._isbtnDown = !0
                    }, t.prototype.leftTap = function() {
                        this._isbtnLeft = !0
                    }, t.prototype.rightTap = function() {
                        this._isbtnRight = !0
                    }, t.prototype.upUnTap = function() {
                        this._isbtnUp = !1
                    }, t.prototype.downUnTap = function() {
                        this._isbtnDown = !1
                    }, t.prototype.leftUnTap = function() {
                        this._isbtnLeft = !1
                    }, t.prototype.rightUnTap = function() {
                        this._isbtnRight = !1
                    }, t.prototype.resize = function(t) {
                        this.container && (this.container.scale.set(t), this.btnUp.x = this.game.width / t - 70, this.btnUp.y = this.game.height / t - 70, this.btnDown.x = this.game.width / t - 220, this.btnDown.y = this.game.height / t - 70, this.btnLeft.x = 70, this.btnLeft.y = this.game.height / t - 70, this.btnRight.x = 220, this.btnRight.y = this.game.height / t - 70)
                    }, Object.defineProperty(t, "instance", {
                        get: function() {
                            return t._instance || (t._instance = new t), t._instance
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t
                }();
            e.default = r
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = i(3),
                n = i(14),
                o = i(22),
                a = i(35),
                r = i(25),
                h = i(4),
                l = i(17),
                c = i(8),
                u = i(23),
                d = i(15),
                p = i(12),
                f = function() {
                    function t() {
                        this.stars = null, this.signalRestart = null, this.signalPause = null, this.signalToggleMusic = null, this.game = null, this.scl = 1, this.container = null, this.bgBtnRight = null, this.timer = null, this.helperText = null, this.continueText = null, this.bgBtnLeft = null, this.time = 0, this.helperShow = !1, this.continueShow = !1, this.lFront = null, this.lBack = null, this.flipTexts = null, this.flipBG = null, this.MSG_DELAY = 40
                    }
                    return t.prototype.setTimer = function() {
                        var t = Math.ceil(100 * h.MaxGameCore.instance.timer),
                            e = t / 100 >> 0;
                        t -= 100 * e;
                        var i = (e < 10 ? "0" + e : e) + "." + t;
                        i.length < 5 && (i += "0"), this.timer.setText(i)
                    }, t.prototype.showFlipMsg = function(t, e) {
                        var i = "FLIP",
                            n = "";
                        n = n + "-" + .5 * t + " sec", this.flipTexts.setText(n), this.flipBG.setText(n), t > 1 && (i = i + " " + t + "X"), this.lFront.setText(i), this.lBack.setText(i), h.MaxGameCore.instance.timer -= .5 * t, this.startTextAnim(this.flipTexts, this.hideFlipTxtAnim, this), c.default.getInstance().play(s.Sounds.FlipSound())
                    }, t.prototype.startTextAnim = function(t, e, i) {
                        t.scale.set(.1), this.flipBG.stroke = "#000000", this.flipBG.strokeThickness = 2, t.label.stroke = "#FFFFFF", t.label.strokeThickness = 5;
                        var s = this.game.add.tween(t.scale);
                        t.alpha = 1, s.to({
                            x: 1,
                            y: 1
                        }, 350, Phaser.Easing.Back.Out, !0), s.onComplete.addOnce(e, i)
                    }, t.prototype.hideFlipTxtAnim = function() {
                        this.game.add.tween(this.flipTexts).to({
                            alpha: 0
                        }, 250, Phaser.Easing.Linear.None, !0, 500)
                    }, t.prototype.release = function() {
                        this.flipTexts = null, this.flipBG = null, this.bgBtnRight = null, this.bgBtnLeft = null, this.helperText = null, this.continueText = null, this.continueShow = !1, this.helperShow = !1, this.game = null, this.timer = null, this.pauseBtn = null, this.restartBtn = null, this.musicBtn = null, this.stars = null, this.signalToggleMusic.removeAll(), this.signalRestart.removeAll(), this.signalPause.removeAll(), this.signalToggleMusic = null, this.signalRestart = null, this.signalPause = null, this.container.destroy(), this.container = null
                    }, t.prototype.showControlsHint = function() {
                        this.helperText.visible = !0, this.continueText.visible = !1, this.helperShow = !0, this.continueShow = !1
                    }, t.prototype.showDeathHint = function() {
                        h.MaxGameCore.instance.finished || (this.continueText.visible = !0), this.helperText.visible = !1, this.helperShow = !1, this.continueShow = !0, c.default.getInstance().play(s.Sounds.DieSound())
                    }, t.prototype.hideControlsHint = function() {
                        this.helperShow = !1, this.continueShow = !1, this.helperText.visible = !1, this.continueText.visible = !1
                    }, t.prototype.showTimer = function() {
                        this.timer.visible || h.MaxGameCore.instance.finished || (this.timer.visible = !0, this.helperShow && (this.helperText.visible = !0), this.continueShow && (this.continueText.visible = !0), a.default.instance.container.visible = !0)
                    }, t.prototype.hideTimer = function() {
                        this.timer.visible && (this.timer.visible = !1, this.helperText.visible = !1, this.continueText.visible = !1, a.default.instance.container.visible = !1)
                    }, t.prototype.init = function(e, i) {
                        this.container = e, this.game = i, p.default.isDesktop || (t.MSG_CONTINUE = "Tap to continue", t.MSG_HELP = "Use arrows to move"), this.scl = Math.max(this.game.width, this.game.height) / s.Constants.WIDTH, this.scl = this.scl > 1 ? 1 : this.scl, this.signalRestart = new Phaser.Signal, this.signalPause = new Phaser.Signal, this.signalToggleMusic = new Phaser.Signal, this.timer = new n.default(this.game, "00.00", s.Constants.styleTimer, null, null, s.Atlases.Garage), this.timer.setFrames("timer_bg0000", "timer_bg0000", "timer_bg0000", "timer_bg0000"), this.timer.x = this.game.width / 2, this.timer.y = 25, this.timer.label.x = -2, this.timer.label.anchor.set(0, .6), this.timer.inputEnableChildren = !1, this.helperText = new n.default(this.game, t.MSG_HELP, s.Constants.styleHelp, null, null, s.Atlases.Garage), this.helperText.setFrames("0popup_bg0000", "0popup_bg0000", "0popup_bg0000", "0popup_bg0000"), this.helperText.x = this.game.width / 2, this.helperText.y = this.game.height + this.helperText.height / 2 - 90 * s.Constants.GAME_SCALE, this.helperText.label.anchor.set(.5, 5.5), this.helperText.visible = !1, this.continueText = new n.default(this.game, t.MSG_CONTINUE, s.Constants.styleHelp, null, null, s.Atlases.Garage), this.continueText.setFrames("0popup_bg0000", "0popup_bg0000", "0popup_bg0000", "0popup_bg0000"), this.continueText.x = this.game.width / 2, this.continueText.y = this.game.height + this.helperText.height / 2 - 90 * s.Constants.GAME_SCALE, this.continueText.label.anchor.set(.5, 5.5), this.continueText.visible = !1, this.bgBtnRight = this.game.add.image(this.game.width, 0, s.Atlases.Garage, "pause_bg0000"), this.bgBtnRight.scale.set(-1.4, 1), this.bgBtnLeft = this.game.add.image(0, 0, s.Atlases.Garage, "pause_bg0000"), this.bgBtnLeft.scale.set(1.4, 1), this.restartBtn = this.game.add.image(0, 0, s.Atlases.Garage, "restart_btn0000"), this.pauseBtn = this.game.add.image(this.game.width - 90, 0, s.Atlases.Garage, "InGamePauseButton0000"), this.musicBtn = this.game.add.image(this.game.width - 58, 0, s.Atlases.Garage, "InGameMusicButton0000"), this.stars = this.game.add.text(45, 6, "#" + (o.default.LevelNum + 1), s.Constants.styleMoney), this.flipTexts = new n.default(i, "", s.Constants.styleTrick, null, null, s.Atlases.Garage), this.flipTexts.setFrames("bg0000", "bg0000", "bg0000", "bg0000"), this.flipTexts.label.setMaxSize(200, 45), this.flipTexts.label.y = 20, this.flipTexts.alpha = 0, this.lBack = new l.default(this.game, 0, -20, "FLIP", s.Constants.styleTrick), this.lBack.anchor.set(.5), this.flipTexts.label.parent.addChildAt(this.lBack, 0), this.lBack.stroke = "#FFFFFF", this.lBack.strokeThickness = 5, this.lFront = new l.default(this.game, 0, -20, "FLIP", s.Constants.styleTrick), this.lFront.anchor.set(.5), this.flipTexts.label.parent.addChild(this.lFront), this.lFront.stroke = "#000000", this.lFront.strokeThickness = 2, this.flipBG = new l.default(this.game, 0, 20, "", s.Constants.styleTrick), this.flipBG.anchor.set(.5), this.flipTexts.label.parent.addChild(this.flipBG), this.restartBtn.inputEnabled = !0, this.restartBtn.events.onInputDown.add(this.onRestart, this), this.pauseBtn.inputEnabled = !0, this.pauseBtn.events.onInputDown.add(this.onPause, this), this.musicBtn.inputEnabled = !0, this.musicBtn.events.onInputDown.add(this.toggleMusic, this), this.updateSoundButtons(), this.container.addChild(this.bgBtnRight), this.container.addChild(this.bgBtnLeft), this.container.addChild(this.pauseBtn), this.container.addChild(this.restartBtn), this.container.addChild(this.musicBtn), this.container.addChild(this.flipTexts), this.container.addChild(this.stars), this.container.addChild(this.timer), this.container.addChild(this.helperText), this.container.addChild(this.continueText), p.default.isDesktop || a.default.instance.container.parent.addChild(a.default.instance.container), this.flipTexts.x = .5 * this.game.width / this.scl, this.flipTexts.y = .2 * s.Constants.HEIGHT
                    }, t.prototype.toggleMusic = function() {
                        this.signalToggleMusic.dispatch()
                    }, t.prototype.updateSoundButtons = function() {
                        var t = d.default.getInstance().music ? 0 : 1;
                        t += d.default.getInstance().sfx ? 0 : 1, this.musicBtn.loadTexture(s.Atlases.Garage, "InGameMusicButton000" + t)
                    }, t.prototype.resize = function(t) {
                        this.container.scale.set(t), this.bgBtnRight.x = this.game.width / t, this.musicBtn.x = this.game.width / t - 58, this.pauseBtn.x = this.game.width / t - 100, this.bgBtnRight.y = 0, this.bgBtnLeft.y = 0, this.game.state.current === r.default.Name && this.resizeGameplay(t), p.default.isDesktop || a.default.instance.resize(t)
                    }, t.prototype.onMoreGames = function() {
                        window.open(u.default.getInstance().getUrl(u.default.YEP10), "_blank")
                    }, t.prototype.resizeGameplay = function(t) {
                        this.flipTexts.x = .5 * this.game.width
                    }, t.prototype.onPause = function() {
                        this.signalPause.dispatch()
                    }, t.prototype.onRestart = function() {
                        this.signalRestart.dispatch()
                    }, Object.defineProperty(t, "instance", {
                        get: function() {
                            return t._instance || (t._instance = new t), t._instance
                        },
                        enumerable: !0,
                        configurable: !0
                    }), t.MSG_CONTINUE = "Press SPACE to continue", t.MSG_HELP = "Use arrows to move", t
                }();
            e.default = f
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = i(44),
                n = function() {
                    function t() {}
                    return t.prototype.init = function(t, e) {
                        this.prevX = t, this.prevY = e, this.prevDist = 0
                    }, t.prototype.emit = function(e, i) {
                        var n = Math.sqrt((e - this.prevX) * (e - this.prevX) + (i - this.prevY) * (i - this.prevY));
                        if (n < t.MIN_DIST) s.TrailPartObject.get().put(e, i), this.prevX = e, this.prevY = i, this.prevDist = n;
                        else
                            for (var o = Math.atan2(i - this.prevY, e - this.prevX), a = Math.cos(o), r = Math.sin(o); n > t.MIN_DIST;) this.prevX += t.MIN_DIST * a, this.prevY += t.MIN_DIST * r, s.TrailPartObject.get().put(this.prevX, this.prevY), n -= t.MIN_DIST
                    }, t.MIN_DIST = 16, t
                }();
            e.TrailParticlesSystem = n
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0;
            var n = i(0),
                o = i(1),
                a = i(4),
                r = i(5),
                h = i(2),
                l = function(t) {
                    function e() {
                        var e = t.call(this) || this;
                        return e.create(), e
                    }
                    return s(e, t), e.setupPool = function() {
                        for (var t = 0; t < 11; t++) e.pool.push(new e);
                        e.poolLen = e.pool.length
                    }, e.get = function() {
                        for (var t = 0; t < e.poolLen; t++) {
                            var i = e.pool[t];
                            if (!1 === i.active) return i
                        }
                        var s = new e;
                        return e.pool.push(s), e.poolLen = e.pool.length, s
                    }, e.prototype.create = function(t) {
                        void 0 === t && (t = null), this.active = !1, this.type = o.ObjectTypes.EFFECT, this.graphic = r.GraphicUtil.createMovieClip(null, h.AssetsStorage.instance.getByKey("car_exp_anim"), 30, !1);
                        var e = h.AssetsStorage.instance.getByKey("car_exp_anim");
                        this.graphic.animations.getAnimation(e).onComplete.add(this.animComplete, this), this.graphic.completeCallback = this.animComplete, this.graphic.scale.set(2), this.graphic.visible = !1, a.MaxGameCore.instance.add(this)
                    }, e.prototype.animComplete = function(t) {
                        this.active = !1, this.graphic.visible = !1, null !== this.completeCallback && (this.completeCallback(), this.completeCallback = null)
                    }, e.prototype.activate = function(t, e, i, s, n) {
                        void 0 === i && (i = null), void 0 === s && (s = null), void 0 === n && (n = null), this.active = !0, this.graphic.x = t, this.graphic.y = e, this.graphic.visible = !0, this.maxSizeCallback = i, this.completeCallback = s, this.completeCallbackContext = n;
                        var o = h.AssetsStorage.instance.getByKey("car_exp_anim"),
                            a = this.graphic.animations.getAnimation(o);
                        a.frame = 0, a.play(30)
                    }, e.prototype.restart = function() {
                        this.active && (this.graphic.visible = !1, this.active = !1, this.maxSizeCallback = null, this.completeCallback = null, this.completeCallbackContext = null)
                    }, e.prototype.update = function(t) {
                        void 0 === t && (t = 0), this.active && null !== this.maxSizeCallback && (this.maxSizeCallback(this.completeCallbackContext), this.maxSizeCallback = null, this.completeCallbackContext = null)
                    }, e.prototype.release = function() {
                        e.poolLen > 0 && e.pool.splice(0, e.poolLen), this.maxSizeCallback = null, this.completeCallback = null, this.completeCallbackContext = null, t.prototype.release.call(this)
                    }, e.pool = new Array, e.poolLen = 0, e
                }(n.GameObject);
            e.CarExplodeObject = l
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0;
            var n = i(3),
                o = function(t) {
                    function e(e, i, s) {
                        void 0 === s && (s = null);
                        var o = t.call(this, e) || this;
                        o.beginFill(i, 1), o.drawRect(0, 0, o.game.width, o.game.height), o.endFill(), e.add.group(o, "white", !0).add(o);
                        var a = o.game.add.text(o.game.width / 2, o.game.height / 2, "LOADING...", n.Constants.styleCredits0);
                        a.anchor.set(.5), o.addChild(a);
                        var r = o.game.add.tween(o);
                        return r.to({
                            alpha: 0
                        }, 100), r.onComplete.add(function() {
                            null !== s && s()
                        }), r.start(), o
                    }
                    return s(e, t), e
                }(Phaser.Graphics);
            e.default = o
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = i(10),
                n = i(0),
                o = function() {
                    function t() {}
                    return t.setTransform = function(t, e, i, s, n, o, a, r) {
                        void 0 === n && (n = null), void 0 === o && (o = null), void 0 === a && (a = null), void 0 === r && (r = null), t.x = e, t.y = i, t.rotation = s, n && (t.pivot.x = n), o && (t.pivot.y = o), a && (t.scale.x = a), r && (t.scale.y = r)
                    }, t.release = function() {
                        for (var e in t.mapTexture)
                            if (t.mapTexture.hasOwnProperty(e)) {
                                var i = t.mapTexture[e];
                                i.destroy(!0)
                            } t.mapTexture = {}
                    }, t.drawBitmapPath = function(e, i, s) {
                        var n = s.length,
                            o = [],
                            a = 0,
                            r = null;
                        for (a = 0; a < n; a++) o.push(new Phaser.Point(s[a].x, s[a].y));
                        r = t.choosePic(e, o.slice()), i.addChild(r)
                    }, t.drawBitmapPath2 = function(e, i, s) {
                        var o = new Phaser.Image(n.GraphicUtil.game, -200, -200, n.GraphicUtil.currentAtlass, e + "0000"),
                            a = [];
                        t.addPoints(s, o.width, a), t.drawOld(e, i, a)
                    }, t.addPoints = function(t, e, i) {
                        var n, o, a = t.length,
                            r = 0,
                            h = 0,
                            l = 0,
                            c = 0,
                            u = 0,
                            d = 0,
                            p = new s.Point;
                        for (r = 0; r < a - 1; r++) n = t[r], o = t[r + 1], h += Phaser.Point.distance(n, o);
                        if (l = h, null != t[0]) {
                            for (i.push(new s.Point(t[0].x, t[0].y)); h > .15;) n = i[i.length - 1], o = t[d + 1], c = Phaser.Point.distance(n, o), c > e ? (u = e / c, c *= u, Phaser.Point.interpolate(n, o, u, p), i.push(new s.Point(p.x, p.y))) : (d++, i.push(new s.Point(t[d].x, t[d].y))), h -= c;
                            return l
                        }
                    }, t.choosePic = function(e, i) {
                        if (void 0 === t.mapTexture[e]) {
                            var s = new Phaser.Image(n.GraphicUtil.game, 0, 0, n.GraphicUtil.currentAtlass, e + "0000"),
                                o = s.generateTexture();
                            s.visible = !1, t.mapTexture[e] = o
                        }
                        return n.GraphicUtil.game.add.rope(0, 0, t.mapTexture[e], null, i)
                    }, t.drawOld = function(t, e, i) {
                        var s, o, a = 0,
                            r = i.length,
                            h = 0,
                            l = null;
                        for (h = 0; h < r && h !== r - 1; h++) {
                            s = i[h], o = i[h + 1];
                            var c = o.x - s.x,
                                u = o.y - s.y,
                                d = Math.atan(u / c);
                            c < 0 && (d += Math.PI), l = n.GraphicUtil.game.add.image(s.x, s.y, n.GraphicUtil.currentAtlass, t + "0000"), 0 === h && (a = d), l.anchor.set(0, .5), a = d, l.rotation = d, l.width = Math.sqrt(c * c + u * u), e.addChild(l)
                        }
                    }, t.mapTexture = {}, t
                }();
            e.Drawing = o
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = function() {
                function t() {}
                return t.prototype.add = function(t) {}, t.prototype.release = function() {}, t.prototype.update = function(t) {}, t.prototype.start = function() {}, t
            }();
            e.GamePhysics = s
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0;
            var n = nape.space.Space,
                o = i(41),
                a = i(18),
                r = function(t) {
                    function e() {
                        var i = t.call(this) || this;
                        return e.space = new n, i
                    }
                    return s(e, t), e.prototype.start = function() {}, e.prototype.update = function(t) {
                        e.space.step(.5 * t), e.space.step(.5 * t);
                        for (var i = e.space.liveBodies.iterator(), s; i.hasNext();) {
                            var n = i.next(),
                                o = n.userData;
                            o.graphic ? (s = o.graphic, s.x = n.position.x, s.y = n.position.y, s.rotation = n.rotation % (2 * Math.PI)) : o.graphicEx && (s = o.graphicEx, s.x = n.position.x, s.y = n.position.y, s.rotation = n.rotation % (2 * Math.PI))
                        }
                    }, e.prototype.add = function(t) {
                        null !== t.body.compound ? t.body.compound.space = e.space : t.body.space = e.space
                    }, e.prototype.release = function() {
                        for (t.prototype.release.call(this); !e.space.bodies.empty();) a.NapeUtil.disposeBody(e.space.bodies.at(0))
                    }, e
                }(o.GamePhysics);
            e.NapePhysics = r
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = i(0),
                n = function() {
                    function t() {}
                    return t.release = function() {
                        t.paramsList.splice(0, t.paramsList.length);
                        for (var e in t.geom) t.geom[e] && (t.geom[e] = null)
                    }, t.EDITED = -1, t.paramsList = [], t.geom = {}, t.geomObj = {}, t.cars = new s.RaceCars, t.BASE_PHASE = 3, t.MAX_PARTS = 3, t.INVURNABLE_TIME = 2.5, t.DEAD_TIME = .5, t.FLIP = .5, t.WHEELIE_PART = .1, t.ITEM_MIN_DELAY = 0, t.ITEM_DELTA_DELAY = 0, t.BOMB_ITEM_DAMAGE = 2500, t.BOMB_ITEM_RADIUS = 32, t.RC_ITEM_DAMAGE = 2500, t.RC_ITEM_RADIUS = 32, t.prize_kill = 100, t.BOSSES = [3, 5, 7, 9], t.MAX_TORQUE_MULT = 3, t
                }();
            e.CarsData = n
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0;
            var n = i(0),
                o = i(4),
                a = i(1),
                r = function(t) {
                    function e() {
                        var e = t.call(this) || this;
                        return e.create(), e
                    }
                    return s(e, t), e.get = function() {
                        return e.pool.length > 0 ? e.pool.pop() : new e
                    }, e.prototype.create = function(t) {
                        void 0 === t && (t = null), this.type = a.ObjectTypes.LANDSCAPE, this.graphic = new n.TrailPart, this.active = !1, o.MaxGameCore.instance.add(this)
                    }, e.prototype.update = function(t) {
                        void 0 === t && (t = 0), this.active && (this.graphic.update(t), this.graphic.isPlaying || this.remove())
                    }, e.prototype.put = function(t, e) {
                        this.graphic.x = t, this.graphic.y = e, this.graphic.visible = !0, this.active = !0, this.graphic.gotoAndPlay(0)
                    }, e.prototype.remove = function() {
                        this.active && (e.pool[e.pool.length] = this), this.active = !1, this.graphic.visible = !1
                    }, e.prototype.restart = function() {
                        this.remove()
                    }, e.pool = [], e
                }(n.GameObject);
            e.TrailPartObject = r
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0;
            var n = i(5),
                o = i(2),
                a = function(t) {
                    function e() {
                        var e = t.call(this, n.GraphicUtil.game) || this;
                        e.anim = null;
                        var i = o.AssetsStorage.instance.getByKey("smoke_part"),
                            s = e.game.add.sprite(0, 0, n.GraphicUtil.currentAtlass, i + "0000");
                        return s.animations.add(i, Phaser.Animation.generateFrameNames(i, 0, 28, "", 4)), s.anchor.set(.5), e.anim = s.animations.getAnimation(i), e.anim.play(30), e.anim.stop(), e.anim.onComplete.add(e.animationComplete, e), e.addChild(s), e.visible = !1, e
                    }
                    return s(e, t), e.prototype.update2 = function(t) {
                        void 0 === t && (t = 0), this.anim.isPlaying && (this.x += this.velX * t, this.y += this.velY * t, this.velY += e.GRAVITY_Y * t)
                    }, e.prototype.animationComplete = function() {
                        this.visible = !1
                    }, e.prototype.emit = function(t, i, s) {
                        this.visible = !0, this.x = t, this.y = i, this.velX = e.BASE_VEL * Math.cos(s), this.velY = e.BASE_VEL * Math.sin(s), this.anim.play(30)
                    }, e.GRAVITY_Y = -500, e.BASE_VEL = -50, e
                }(Phaser.Group);
            e.SmokePartClip = a
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0;
            var n = i(0),
                o = i(2),
                a = function(t) {
                    function e() {
                        var e = t.call(this, n.GraphicUtil.game) || this;
                        e.anim = null;
                        var i = o.AssetsStorage.instance.getByKey("ground_part"),
                            s = e.game.add.sprite(0, 0, n.GraphicUtil.currentAtlass, i + "0000");
                        return s.animations.add(i, Phaser.Animation.generateFrameNames(i, 0, 28, "", 4)), s.anchor.set(.5), e.anim = s.animations.getAnimation(i), e.anim.play(30), e.anim.stop(), e.anim.onComplete.add(e.animationComplete, e), e.addChild(s), e.visible = !1, e
                    }
                    return s(e, t), e.prototype.update2 = function(t) {
                        void 0 === t && (t = 0), this.anim.isPlaying && (this.x += this.velX * t, this.y += this.velY * t, this.velY += e.GRAVITY_Y * t)
                    }, e.prototype.animationComplete = function() {
                        this.visible = !1
                    }, e.prototype.emit = function(t, e, i, s) {
                        this.visible = !0, this.x = t, this.y = e, this.velX = i, this.velY = s, this.anim.play(30)
                    }, e.GRAVITY_Y = 500, e
                }(Phaser.Group);
            e.GroundPartClip = a
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0;
            var n = nape.geom.Ray,
                o = nape.geom.Vec2,
                a = nape.phys.Compound,
                r = i(0),
                h = i(4),
                l = i(8),
                c = i(3),
                u = i(25),
                d = function(t) {
                    function e() {
                        var e = t.call(this) || this;
                        return e.LONG_FLY_TIME = .1, e.dampingDelta = .99, e._drive = !0, e.ray = new n(o.weak(), o.weak(0, 1)), e.itemId = -1, e.accell = !1, e.smokeTimer = 0, e.wheelieTimer = 0, e.tilt = 0, e.compound = new a, e
                    }
                    return s(e, t), e.prototype.create = function(t) {
                        void 0 === t && (t = null), this.space = h.MaxGameCore.instance.getSpace(), this.setParams(t), this.finished = !1, this.boost = new r.BoostEffector(this.frame.body), this.boost.anim = this.frame.graphic.boostAnim, this.restart()
                    }, e.prototype.setParams = function(t) {
                        this.skinId = t.skinId;
                        var e;
                        0 === t.wd ? (this.wdWheels = [this.backWheel.body], e = this.backWheel.body.shapes.at(0).radius) : 1 === t.wd ? (e = this.frontWheel.body.shapes.at(0).radius, this.wdWheels = [this.frontWheel.body]) : (this.wdWheels = [this.backWheel.body, this.frontWheel.body], e = Math.max(this.backWheel.body.shapes.at(0).radius, this.frontWheel.body.shapes.at(0).radius)), this.wheelRadius = e;
                        var i = 2 * Math.PI * e,
                            s = t.maxSpeed / i;
                        this.maxAngularVel = 2 * s * Math.PI, this.accelTorque = t.torque, t.maxTorque > t.torque ? this.deltaTorque = t.maxTorque - t.torque : this.deltaTorque = 0, this.tiltTorque = t.flipTorque, this.frame.maxFlipVel = this.maxTiltSpeed = t.maxFlipSpeed
                    }, e.prototype.restart = function() {
                        this.wheelieTimer = 0, this.accell = !1, this.safeId = -1, this.finished = !1, this.maxFlyAngle = this.minFlyAngle = this.startFlyAngle = this.rotation = this.frame.body.rotation, this.fallTime = this.flyTime = 0, this.frame.body.userData.handler = this, this.backWheel.body.userData.handler = this, this.frontWheel.body.userData.handler = this, this.frame.body.userData.graphic = this.frame.graphic, this.backWheel.body.userData.graphicEx = this.backWheel.graphic, this.frontWheel.body.userData.graphicEx = this.frontWheel.graphic, this._drive = !0, this._deadDelay = 0, this.dead = !1, this.itemId = -1, this.setVisible(!0), this.setAlpha(1), this.review(), this.compound.space = this.space
                    }, e.prototype.release = function() {
                        this.space = null, this.compound.space = null, this.compound = null, this.frame = null, this.backWheel = null, this.frontWheel = null, this.callbackFinish = null, this.callbackDie = null, this.callbackStunt = null, this.callbackFight = null, this.suspendBack = null, this.suspendBackLocal && this.suspendBackLocal.dispose(), this.suspendBackLocal = null, this.suspendFront = null, this.boost.dispose(), this.boost = null, t.prototype.release.call(this)
                    }, Object.defineProperty(e.prototype, "drive", {
                        get: function() {
                            return this._drive
                        },
                        set: function(t) {
                            t && !this._drive && (this.frontWheel.startSpin(), this.backWheel.startSpin()), this._drive = t
                        },
                        enumerable: !0,
                        configurable: !0
                    }), e.prototype.addBoost = function(t, e) {
                        this.boost.add(t, e)
                    }, e.prototype.update = function(t) {
                        void 0 === t && (t = 0), this.dead && this.driver ? (this.x = this.driver.parts[0].body.position.x, this.y = this.driver.parts[0].body.position.y) : (this.x = this.frame.body.position.x, this.y = this.frame.body.position.y), this.rotation = this.frame.body.rotation;
                        var i = this.speed;
                        this.speed = this.frame.body.velocity.length, this.speedV = this.frame.body.velocity.y, this.hasGround = this.frame.hasGround || this.backWheel.hasGround || this.frontWheel.hasGround, this.hasGround ? (this.flyTime > this.LONG_FLY_TIME && (this.processLand(), i > 500 && l.default.getInstance().play(c.Sounds.Landing)), this.flyTime = 0, this.fallTime = 0) : (0 === this.flyTime && (this.maxFlyAngle = this.minFlyAngle = this.startFlyAngle = this.rotation), this.rotation > this.maxFlyAngle ? this.maxFlyAngle = this.rotation : this.rotation < this.minFlyAngle && (this.minFlyAngle = this.rotation), this.flyTime += t, this.speedV > 0 ? this.fallTime += t : this.fallTime = 0);
                        var s;
                        if (this._drive) {
                            var n = this.controller.getDrive();
                            if (this.applyDrive(t, !1, n), this.finished) this.applyTilt(t, 0);
                            else {
                                var o = this.controller.getTilt();
                                this.applyTilt(t, o)
                            }
                            if (4 !== this.skinId && (this.controller.accell ? this.smokeTimer -= 2 * t : this.smokeTimer -= t, this.smokeTimer <= 0)) {
                                this.smokeTimer += e.SMOKE_TIME, s = this.frame.graphic;
                                var a = this.frame.body.localPointToWorld(this.frame.localSmokePos),
                                    h = .1 * Math.PI;
                                this.controller.accell ? (s.emitSmoke(a.x, a.y, this.rotation - .5 * h + Math.random() * h), s.emitSmoke(a.x, a.y, this.rotation - .1 * Math.PI + .5 * h + Math.random() * h), s.emitSmoke(a.x, a.y, this.rotation + .1 * Math.PI + .5 * h + Math.random() * h), a.dispose()) : (s.emitSmoke(a.x, a.y, this.rotation - .5 * h + Math.random() * h), a.dispose())
                            }
                            s = this.frame.graphic, this.updateWheelie(t)
                        } else this._deadDelay > 0 && (this._deadDelay -= t, this._deadDelay <= 0 && 9 !== this.skinId && (this._drive = !0, this._deadDelay = 0, this.dead = !1, this.setVisible(!0), this.compound.space = this.space)), this.finished && (this.frontWheel.body.angularVel *= .8, this.backWheel.body.angularVel *= .8);
                        if (this.suspendBack) {
                            var u = this.frame.body.localPointToWorld(this.suspendBackLocal),
                                d = this.backWheel.body.position.sub(u);
                            r.Drawing.setTransform(this.suspendBack.graphic, u.x, u.y, d.angle, NaN, NaN, d.length / this.suspendBackW, 1), d.dispose(), u.dispose()
                        }
                        this.suspendFront && (this.suspendFront.graphic.x = this.frontWheel.body.position.x, this.suspendFront.graphic.y = this.frontWheel.body.position.y, this.suspendFront.graphic.rotation = (this.suspendFrontAngle + this.frame.body.rotation) % (2 * Math.PI)), this.driver.head && (this.driver.head.trail && this.driver.head.trail.emit(this.driver.head.body.position.x, this.driver.head.body.position.y), this.driver.head.update(t)), this.boost.update(t, this.hasGround)
                    }, e.prototype.updateWheelie = function(t) {
                        h.MaxGameCore.instance.finished || (this.hasGround ? this.frame.hasGround ? this.wheelieTimer > 0 && this.wheelieComplete() : this.backWheel.hasGround && !this.frontWheel.hasGround || !this.backWheel.hasGround && this.frontWheel.hasGround ? (this.wheelieTimer += t, this.wheelieTimer > 1 && this.callbackWheelie && this.callbackWheelie(this.wheelieTimer, !1)) : this.wheelieTimer > 0 && this.wheelieComplete() : this.wheelieTimer > 0 && this.wheelieComplete())
                    }, e.prototype.wheelieComplete = function() {
                        this.wheelieTimer > 1 && this.callbackWheelie && this.callbackWheelie(this.wheelieTimer, !0), this.wheelieTimer = 0
                    }, e.prototype.setAlpha = function(t) {
                        this.frame.graphic.alpha = this.backWheel.graphic.alpha = this.frontWheel.graphic.alpha = t
                    }, e.prototype.processLand = function() {
                        if (!h.MaxGameCore.instance.finished) {
                            if (!this.dead && (this.backWheel.hasGround || this.frontWheel.hasGround)) {
                                var t = void 0,
                                    e = Math.PI;
                                t = this.startFlyAngle - this.minFlyAngle;
                                var i = t / (2 * Math.PI) >> 0;
                                t -= 2 * i * Math.PI, t >= e && i++;
                                var s = i;
                                t = this.maxFlyAngle - this.startFlyAngle, i = t / (2 * Math.PI) >> 0, t -= 2 * i * Math.PI, t >= e && i++;
                                var n = i;
                                s > 0 && this.callbackStunt && this.callbackStunt.call(this.callbackContext, s, !0), n > 0 && this.callbackStunt && this.callbackStunt.call(this.callbackContext, n, !1)
                            }
                            this.startFlyAngle = this.maxFlyAngle = this.minFlyAngle = this.rotation
                        }
                    }, e.prototype.applyDrive = function(t, e, i) {
                        var s = !1,
                            n = !1;
                        this.finished || (1 === i ? s = !0 : -1 === i && (n = !0));
                        var o = this.accelTorque,
                            a = this.maxAngularVel;
                        if (this.deltaTorque > 0 && (s || n)) {
                            var r = this.speed / this.wheelRadius;
                            if (r < a) {
                                var h = void 0,
                                    l = .5,
                                    c = 2.5,
                                    u = 1 / 9,
                                    d = 4,
                                    p = .5 + 2.5 * r / a;
                                h = (1 / (p * p) - 1 / 9) / (4 - 1 / 9), o = this.accelTorque + h * this.deltaTorque
                            }
                        }
                        this.frontWheel.brake(n), this.backWheel.brake(n);
                        for (var f = this.wdWheels.length, y = a, g = 0; g < f; g++) {
                            var m = this.wdWheels[g];
                            this.finished ? m.angularVel *= .8 : (s ? (m.angularVel < 0 && (m.angularVel *= .5), m.angularVel < a && m.applyAngularImpulse(t * o / f)) : n ? (m.angularVel > 0 && (m.angularVel *= .5), m.angularVel > -a && m.applyAngularImpulse(-t * o / f)) : e || (m.angularVel *= this.dampingDelta), Math.abs(m.angularVel) < y && (y = Math.abs(m.angularVel)))
                        }
                    }, e.prototype.applyTilt = function(t, e) {
                        this.tilt = e;
                        var i = this.frame.body;
                        i.torque = e * this.tiltTorque;
                        var s = i.angularVel;
                        if (s < 0 && s < -this.maxTiltSpeed ? i.angularVel = -this.maxTiltSpeed : s > 0 && s > this.maxTiltSpeed && (i.angularVel = this.maxTiltSpeed), this.driver) {
                            var n = e;
                            if (0 === n)
                                if (this.hasGround) this.controller.accell && (n = -1);
                                else {
                                    var o = this.frame.body.velocity.y;
                                    o < -20 ? n = 1 : o > 20 && (n = -1)
                                } this.driver.move(e, n)
                        }
                    }, e.prototype.setReviewPos = function(t, e, i) {
                        this.safeId = i, this.frame.body.userData.reviewX = t, this.frame.body.userData.reviewY = e
                    }, e.prototype.review = function() {
                        h.MaxGameCore.instance.stopAllSounds(), u.default.loadedLevel && (h.MaxGameCore.instance.engineStart = l.default.getInstance().play(c.Sounds.Start)), this.wheelieTimer = 0, this.backWheel.connect(!1), this.frontWheel.connect(!1), this.driver.connectDriver(!1), this.driver.connect(!1), r.NapeUtil.stopBody(this.frame.body), r.NapeUtil.stopBody(this.backWheel.body), r.NapeUtil.stopBody(this.frontWheel.body), this.driver.stop(), this.frame.review(), this.startFlyAngle = this.maxFlyAngle = this.minFlyAngle = this.rotation = this.frame.body.rotation;
                        var t = o.get(-this.frame.wheelBackDx, this.frame.wheelDy),
                            e = this.frame.body.localPointToWorld(t);
                        this.backWheel.body.position.set(e), e.dispose(), t.setxy(this.frame.wheelFrontDx, this.frame.wheelDy), e = this.frame.body.localPointToWorld(t), this.frontWheel.body.position.set(e), e.dispose(), t.dispose(), this.driver.review(this.frame.body.position), this.backWheel.connect(!0), this.frontWheel.connect(!0), this.driver.connectDriver(!0), this.driver.connect(!0), this.driver.activateMirrorParts(!1), this.dead = !1, this._drive = !0, this.boost.restart()
                    }, e.prototype.setVisible = function(t) {
                        this.frame.graphic.visible = this.backWheel.graphic.visible = this.frontWheel.graphic.visible = t
                    }, e.prototype.processFinish = function(t) {
                        this.wheelieComplete(), this._drive = !1, this.finished = !0, this.applyTilt(0, 0), h.MaxGameCore.instance.processFinish()
                    }, e.SMOKE_TIME = .2, e
                }(r.GameObject);
            e.CarObject = d
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0;
            var n = i(0),
                o = i(1),
                a = i(6),
                r = i(2),
                h = function(t) {
                    function e(e) {
                        var i = t.call(this) || this;
                        return i.type = e ? o.ObjectTypes.LANDSCAPE : o.ObjectTypes.FRONT, i
                    }
                    return s(e, t), e.prototype.create = function(t) {
                        void 0 === t && (t = null);
                        var e = t.className;
                        0 !== n.RacesData.map.settings.theme && 2 !== n.RacesData.map.settings.theme || (this.type = o.ObjectTypes.LANDSCAPE_BACK, 0 === e.indexOf("Dec") && Number(e.slice(3, e.length)) <= 7 && (this.type = o.ObjectTypes.FRONT));
                        var i = e.indexOf("_dup");
                        i >= 0 && (e = e.substring(0, i));
                        var s = r.AssetsStorage.instance.getByKey(e);
                        if (s) {
                            var h = s + "0000";
                            if (this.graphic = n.GraphicUtil.game.add.sprite(0, 0, n.GraphicUtil.currentAtlass, h), n.Drawing.setTransform(this.graphic, t.params.x, t.params.y, a.default.TO_RAD * t.params.rotation, 0, 0, t.params.scaleX, t.params.scaleY), this.graphic.anchor.set(.5), 0 === h.indexOf("Sign") && "SignPillar0000" !== h && (this.type = o.ObjectTypes.LANDSCAPE), "Dec120000" === h) {
                                var l = this.graphic;
                                l.animations.add(e, Phaser.Animation.generateFrameNames(e, 0, 22, "", 4)), l.anchor.set(.5, .7), l.animations.getAnimation(e).play(30, !0)
                            } else if ("Dec130000" === h) {
                                var l = this.graphic;
                                l.anchor.set(.22142857142857142, .4854771784232365)
                            } else if ("Dec140000" === h) {
                                var l = this.graphic;
                                l.anchor.set(.7979274611398963, .5563380281690141)
                            } else if ("Dec150000" === h) {
                                var l = this.graphic;
                                l.anchor.set(.4943820224719101, .023255813953488372)
                            } else if ("Dec160000" === h) {
                                var l = this.graphic;
                                l.anchor.set(.6333333333333333, .4309623430962343)
                            } else if ("Dec290000" === h) {
                                var l = this.graphic;
                                l.anchor.set(.453125, .6987951807228916)
                            } else if ("Dec300000" === h) {
                                var l = this.graphic;
                                l.anchor.set(.6375, 1)
                            } else if ("Dec310000" === h) {
                                var l = this.graphic;
                                l.anchor.set(.5, 1)
                            } else if ("Dec320000" === h) {
                                var l = this.graphic;
                                l.anchor.set(.5, 1)
                            } else if ("Dec330000" === h) {
                                var l = this.graphic;
                                l.anchor.set(.5025641025641026, .5116279069767442)
                            } else if ("Dec340000" === h) {
                                var l = this.graphic;
                                l.anchor.set(.5, .5)
                            } else if ("Dec350000" === h) {
                                var l = this.graphic;
                                l.anchor.set(.5, .5)
                            }
                        }
                    }, e
                }(n.GameObject);
            e.DecorObject = h
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0;
            var n = nape.phys.BodyType,
                o = i(0),
                a = i(1),
                r = i(5),
                h = i(7),
                l = i(2),
                c = function(t) {
                    function e(e, i) {
                        var s = t.call(this) || this;
                        return s.id = e, s.parentKey = i, s
                    }
                    return s(e, t), e.prototype.create = function(t) {
                        void 0 === t && (t = null), this.type = a.ObjectTypes.LANDSCAPE;
                        var e = l.AssetsStorage.instance,
                            i = this.parentKey + this.id.toString();
                        this.graphic = r.GraphicUtil.createImage(0, 0, 0, i), this.body = o.NapeUtil.createCircleBody(n.DYNAMIC, h.Filters.NOTHING, !1, 4), this.body.userData.graphicEx = this.graphic
                    }, e.prototype.restart = function() {
                        this.killTweenLite(), this.body.space = null, this.graphic.visible = !1
                    }, e.prototype.release = function() {
                        this.killTweenLite(), t.prototype.release.call(this)
                    }, e.prototype.activate = function(t, e, i) {
                        this.killTweenLite(), o.NapeUtil.stopBody(this.body), this.tweenLite = r.GraphicUtil.game.add.tween(this), this.tweenLite.to({
                            x: 100
                        }, 5e3), this.tweenLite.start(), this.tweenLite.onComplete.addOnce(this.deactivate, this, 0, this), this.body.position = t, this.body.rotation = e, this.body.space = o.NapePhysics.space, this.graphic.visible = !0
                    }, e.prototype.killTweenLite = function() {
                        this.tweenLite && (this.tweenLite.onComplete.removeAll(), this.tweenLite = null)
                    }, e.prototype.deactivate = function(t) {
                        t.restart()
                    }, e
                }(o.GameObject);
            e.GlassBlockPart = c
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = nape.geom.GeomPoly,
                n = nape.geom.GeomPolyList,
                o = nape.geom.Vec2,
                a = nape.phys.Body,
                r = nape.phys.BodyType,
                h = nape.shape.Polygon,
                l = i(6),
                c = i(0),
                u = function() {
                    function t() {}
                    return t.createGroundBody = function(e) {
                        var i = e.params.x,
                            s = e.params.y,
                            n = e.params.vertices,
                            h = n.length,
                            u = NaN,
                            d = NaN,
                            p = null != e.params.thick ? e.params.thick : 128,
                            f = e.params.direction * l.default.TO_RAD,
                            y = e.params.directed,
                            g = c.Materials.GROUND,
                            m = new a(r.STATIC, o.weak(i, s));
                        m.cbTypes.add(c.CbTypes.GROUND);
                        var v, b = n[0];
                        v = [b];
                        for (var x, _ = 1; _ < h; _++) {
                            b = n[_];
                            var w = v[v.length - 1],
                                P = v.length;
                            if (1 === P) v[P] = b, x = o.weak(b.x - w.x, b.y - w.y).angle, isNaN(u) && (u = x + .5 * Math.PI);
                            else {
                                var C = o.weak(b.x - w.x, b.y - w.y).angle;
                                if (l.default.normalizeAngle(C - x) < 0) {
                                    if (!y) {
                                        var T = o.fromPolar(1, x),
                                            S = o.fromPolar(1, C);
                                        d = T.sub(S, !0).angle, T.dispose(), S.dispose()
                                    }
                                    t.addGroundShape(m, v, f, y, u, d, g, p), u = d, v = [w, b]
                                } else v[v.length] = b;
                                x = C
                            }
                        }
                        return t.addGroundShape(m, v, f, y, u, x + .5 * Math.PI, g, p), 0 === m.shapes.length ? null : (m.align(), m)
                    }, t.addGroundShape = function(e, i, n, a, r, l, u, d) {
                        var p = [],
                            f = i.length,
                            y;
                        for (y = 0; y < f; y++) {
                            var g = i[y];
                            if (null == g) return;
                            var m = o.get(g.x, g.y);
                            0 === y && (p[p.length] = a ? o.get(m.x + Math.cos(n) * d, m.y + Math.sin(n) * d) : o.get(m.x + Math.cos(r) * d, m.y + Math.sin(r) * d)), p[p.length] = m, y === f - 1 && (p[p.length] = a ? o.get(m.x + Math.cos(n) * d, m.y + Math.sin(n) * d) : o.get(m.x + Math.cos(l) * d, m.y + Math.sin(l) * d))
                        }
                        var v = s.get(p),
                            b;
                        if (v.isConvex()) b = new h(p, u, c.Filters.GROUND), e.shapes.add(b);
                        else
                            for (v.convexDecomposition(!1, t.geomPolyList); !t.geomPolyList.empty();) v = t.geomPolyList.pop(), v.isConvex() && (b = new h(v, u, c.Filters.GROUND), e.shapes.add(b));
                        for (v.dispose(), f = p.length, y = 0; y < f; y++) p[y].dispose();
                        e.userData.isGround = !0
                    }, t.geomPolyList = new n, t
                }();
            e.PhysicUtil = u
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0;
            var n = nape.phys.BodyType,
                o = i(0),
                a = i(1),
                r = i(7),
                h = i(6),
                l = i(5),
                c = i(11),
                u = i(9),
                d = i(4),
                p = i(2),
                f = function(t) {
                    function e() {
                        var e = t.call(this) || this;
                        return e.activeOnStart = !0, e
                    }
                    return s(e, t), e.prototype.create = function(t) {
                        void 0 === t && (t = null), this.type = a.ObjectTypes.OBJECT, null !== t.params.id && (this.id = t.params.id), this.safeId = t.params.safeId;
                        var i = p.AssetsStorage.instance,
                            s = t.className,
                            d = i.getByKey(s + "_data"),
                            f = t.params,
                            y = f.x,
                            g = f.y,
                            m = t.params.rotation * h.default.TO_RAD,
                            v = r.Filters.GROUND;
                        "reg" === d.shape ? this.body = o.NapeUtil.createRegularBody(n.DYNAMIC, v, !1, d.w, d.h, 8, y, g, m, null, u.Materials.DEFAULT) : "rect" === d.shape ? this.body = o.NapeUtil.createRectBodyWH(n.DYNAMIC, v, !1, d.w, d.h, y, g, m, null, u.Materials.DEFAULT) : "circ" === d.shape && (this.body = o.NapeUtil.createCircleBody(n.DYNAMIC, v, !1, .5 * d.w, y, g, m, null, u.Materials.DEFAULT));
                        var b = s.indexOf("Candy") > 0 || s.indexOf("Bone") > 0;
                        if (b) {
                            var x = "PlankCandy" + Math.floor(e.CANDIES_COUNT * Math.random());
                            this.graphic = l.GraphicUtil.createImageWithObj(f, x)
                        } else this.graphic = l.GraphicUtil.createImageWithObj(f, i.getByKey(s));
                        o.NapeUtil.setupStartPos(this.body), this.body.userData.graphicEx = this.graphic, s.indexOf("Barrel") >= 0 && this.body.cbTypes.add(c.CbTypes.BARREL), 0 === s.indexOf("Removed") && this.body.cbTypes.add(c.CbTypes.WOOD), (b || 0 === s.indexOf("Plank")) && (this.body.userData.isGround = !0, b && (this.body.userData.isPT = !0)), !1 === t.params.active ? this.activeOnStart = !1 : this.activeOnStart = !0
                    }, e.prototype.restart = function() {
                        o.NapeUtil.stopBody(this.body), o.NapeUtil.resetStartPos(this.body), this.activeOnStart || (this.graphic.x = this.body.position.x, this.graphic.y = this.body.position.y, this.graphic.rotation = this.body.rotation, this.activate(!1))
                    }, e.prototype.review = function() {
                        this.restart()
                    }, e.prototype.activate = function(t) {
                        void 0 === t && (t = !0);
                        var e, i;
                        if (t)
                            for (this.body.space = d.MaxGameCore.instance.getSpace(), e = this.body.constraints.iterator(); e.hasNext();) i = e.next(), i.active = !0;
                        else {
                            for (e = this.body.constraints.iterator(); e.hasNext();) i = e.next(), i.active = !1, i.userData.skipActive = !0;
                            this.body.space = null
                        }
                    }, e.prototype.isActive = function() {
                        return this.activeOnStart
                    }, e.CANDIES = ["PlankCandy0", "PlankCandy1", "PlankCandy2", "PlankCandy3"], e.CANDIES_COUNT = 4, e
                }(o.GameObject);
            e.DynamicBodyObject = f
        }, function(t, e, i) {
            "use strict";
            e.__esModule = !0;
            var s = function() {
                function t(t) {
                    this.accell = !1, this.brake = !1, this.car = t
                }
                return t.prototype.getBoost = function() {
                    return !1
                }, t.prototype.getDrive = function() {
                    return 0
                }, t.prototype.getTilt = function() {
                    return 0
                }, t.prototype.getUseItem = function() {
                    return !1
                }, t.prototype.dispose = function() {
                    this.car = null
                }, t
            }();
            e.CarController = s
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0, i(13), i(10);
            var n = i(3),
                o = i(23),
                a = i(16),
                r = i(30),
                h = function(t) {
                    function e() {
                        var i = t.call(this) || this;
                        return i.name = e.Name, i.bike = null, i.logo = null, i.google_btn = null, i.apple_btn = null, i.wait = null, i.mainParent = null, i
                    }
                    return s(e, t), e.prototype.preload = function() {
                        t.prototype.preload.call(this), this.game.load.onFileComplete.add(this.fileComplete, this), o.default.getInstance().checkDomain(document.URL.split("//")[1].split("/")[0]) ? this.preloadSplash() : this.preloadLock()
                    }, e.prototype.init = function() {
                        t.prototype.init.call(this), this.mainParent = this.game.add.group(), this.mainParent.x = this.game.width / 2, this.mainParent.y = this.game.height / 2, this.setPauseViewCar(this.mainParent)
                    }, e.prototype.preloadLock = function() {
                        this.game.load.atlas(n.Atlases.Garage, "assets/atlases/x1/" + n.Atlases.Garage + ".png", "assets/atlases/x1/" + n.Atlases.Garage + ".json")
                    }, e.prototype.preloadSplash = function() {}, e.prototype.createLock = function() {}, e.prototype.opensitelockLink = function() {
                        window.open("http://" + o.default.getInstance().getUrlLock(), "_blank")
                    }, e.prototype.createSplash = function() {
                        new a.default(this.game, 0, r.default.Name)
                    }, e.prototype.nextMethod = function() {
                        var t = this.game.add.tween(this.logo);
                        t.to({
                            alpha: 0
                        }, 660, Phaser.Easing.Linear.None, !1, 4e3), t.onComplete.add(function() {
                            new a.default(this.game, 0, r.default.Name)
                        }, this), t.start()
                    }, e.prototype.onGoogle = function() {
                        window.open(o.default.getInstance().getUrl(o.default.Google), "_blank")
                    }, e.prototype.onApple = function() {
                        window.open(o.default.getInstance().getUrl(o.default.Apple), "_blank")
                    }, e.prototype.fileComplete = function(t, e, i, s, n) {
                        100 === t && this.game.load.onFileComplete.removeAll()
                    }, e.prototype.setPauseViewCar = function(t) {
                        null !== this.bike ? (this.bike.destroy(), this.bike = this.game.add.group(t)) : this.bike = this.game.add.group(t), this.bike.x = 0, this.bike.y = 10
                    }, e.prototype.create = function() {
                        t.prototype.create.call(this), o.default.getInstance().checkDomain(document.URL.split("//")[1].split("/")[0]) ? this.createSplash() : this.createLock()
                    }, e.prototype.resize = function() {
                        var e = 1;
                        e = this.game.width / n.Constants.WIDTH, e = e > 1 ? 1 : e, this.mainParent && (this.mainParent.x = this.game.width / 2, this.mainParent.y = this.game.height / 2), this.wait && this.wait.position.set(this.game.width / 2, this.game.height / 2), t.prototype.resize.call(this)
                    }, e.prototype.shutdown = function() {
                        t.prototype.shutdown.call(this)
                    }, e.Name = "sitelock", e
                }(Phaser.State);
            e.default = h
        }, function(t, e, i) {
            "use strict";
            var s = this && this.__extends || function() {
                var t = Object.setPrototypeOf || {
                    __proto__: []
                }
                instanceof Array && function(t, e) {
                    t.__proto__ = e
                } || function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i])
                };
                return function(e, i) {
                    function s() {
                        this.constructor = e
                    }
                    t(e, i), e.prototype = null === i ? Object.create(i) : (s.prototype = i.prototype, new s)
                }
            }();
            e.__esModule = !0, i(55), i(13), i(10);
            var n = i(60),
                o = i(61),
                a = i(30),
                r = i(53),
                h = i(36),
                l = i(12),
                c;
            ! function(t) {
                var e = function(t) {
                    function e() {
                        var e = t.call(this, {
                            enableDebug: !0,
                            width: 720,
                            height: 480,
                            renderer: Phaser.AUTO,
                            parent: "content",
                            transparent: !0,
                            antialias: !0,
                            preserveDrawingBuffer: !1,
                            physicsConfig: null,
                            seed: "",
                            state: null,
                            forceSetTimeOut: !1
                        }) || this;
                        return e.clearBeforeRender = !1, Phaser.Device.whenReady(function() {
                            l.default.isDesktop = e.device.desktop, e._isPad() && (l.default.isDesktop = !1), e.stage.disableVisibilityChange = !0;
                            var t = l.default.isDesktop ? "click" : "touchstart";
                            document.getElementById("content").addEventListener(t, function(t) {
                                e.gameResumed(t), window.focus()
                            }), document.getElementById("content").addEventListener("SDK_GAME_START", function(t) {
                                e.adsResume()
                            }), document.getElementById("content").addEventListener("SDK_GAME_PAUSE", function(t) {
                                e.adsPause()
                            })
                        }), e.state.add("game", {
                            create: e.stateCreator.bind(e),
                            preload: e.statePreloader.bind(e)
                        }, !0), e
                    }
                    return s(e, t), e.prototype._isPad = function() {
                        var t = -1 !== navigator.userAgent.toLowerCase().indexOf("ipad");
                        return !!(!t && navigator.userAgent.match(/Mac/) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2) || t
                    }, e.prototype.statePreloader = function() {
                        var t = this;
                        ["https://cdn.jsdelivr.net/npm/@orange-games/phaser-cachebuster@2.0/build/phaser-cachebuster.min.js", "https://cdn.jsdelivr.net/npm/@orange-games/phaser-super-storage@1.0/build/phaser-super-storage.min.js", "assets/box2dweb/dragonBones.min.js"].forEach(function(e) {
                            t.load.script(e, e)
                        })
                    }, e.prototype.stateCreator = function() {
                        var t = this;
                        this.plugins.add(PhaserSuperStorage.StoragePlugin), this.plugins.add(PhaserCachebuster.CacheBuster), this.storage.forcePromises = !0, this.state.add(o.Boot.Name, o.Boot, !1), this.state.add(a.default.Name, a.default, !1), this.state.add(r.default.Name, r.default, !1), this.state.add(o.Menu.Name, o.Menu, !1), this.state.add(o.Garage.Name, o.Garage, !1), this.state.add(o.ChooseZone.Name, o.ChooseZone, !1), this.state.add(o.Gameplay.Name, o.Gameplay, !1);
                        var e = function() {
                            t.recursiveUpdateText(t.stage)
                        };
                        n.load({
                            custom: {
                                families: ["Aller Display", "CfCrackBold", "Impact"],
                                urls: ["assets/css/AllerDisplay.css", "assets/css/CfCrackBold.css", "assets/css/impact.css"]
                            },
                            active: e,
                            inactive: e
                        }), this.state.start(o.Boot.Name), this.state.remove("game")
                    }, e.prototype.recursiveUpdateText = function(t) {
                        var e = this;
                        t instanceof Phaser.Text && (t.dirty = !0), t.children && t.children.length > 0 && t.children.forEach(function(t) {
                            e.recursiveUpdateText(t)
                        })
                    }, e.prototype.adsResume = function() {
                        this.sound.mute = !1, o.Gameplay.isAdsPause = !1
                    }, e.prototype.adsPause = function() {
                        this.sound.mute = !0, o.Gameplay.isAdsPause = !0, h.default.instance.signalPause && h.default.instance.signalPause.dispatch()
                    }, e
                }(Phaser.Game);
                t.Game = e
            }(c || (c = {})), new c.Game
        }, function(t, e, i) {
            (function(e) {
                t.exports = e.p2 = i(56)
            }).call(e, i(27))
        }, function(t, e, i) {
            var s, s;
            ! function(e) {
                var i;
                t.exports = e()
            }(function() {
                var t, e, i;
                return function t(e, i, n) {
                    function o(r, h) {
                        if (!i[r]) {
                            if (!e[r]) {
                                var l = "function" == typeof s && s;
                                if (!h && l) return s(r, !0);
                                if (a) return a(r, !0);
                                throw new Error("Cannot find module '" + r + "'")
                            }
                            var c = i[r] = {
                                exports: {}
                            };
                            e[r][0].call(c.exports, function(t) {
                                var i = e[r][1][t];
                                return o(i || t)
                            }, c, c.exports, t, e, i, n)
                        }
                        return i[r].exports
                    }
                    for (var a = "function" == typeof s && s, r = 0; r < n.length; r++) o(n[r]);
                    return o
                }({
                    1: [function(t, e, i) {
                        function s() {}
                        var n = t("./Scalar");
                        e.exports = s, s.lineInt = function(t, e, i) {
                            i = i || 0;
                            var s = [0, 0],
                                o, a, r, h, l, c, u;
                            return o = t[1][1] - t[0][1], a = t[0][0] - t[1][0], r = o * t[0][0] + a * t[0][1], h = e[1][1] - e[0][1], l = e[0][0] - e[1][0], c = h * e[0][0] + l * e[0][1], u = o * l - h * a, n.eq(u, 0, i) || (s[0] = (l * r - a * c) / u, s[1] = (o * c - h * r) / u), s
                        }, s.segmentsIntersect = function(t, e, i, s) {
                            var n = e[0] - t[0],
                                o = e[1] - t[1],
                                a = s[0] - i[0],
                                r = s[1] - i[1];
                            if (a * o - r * n == 0) return !1;
                            var h = (n * (i[1] - t[1]) + o * (t[0] - i[0])) / (a * o - r * n),
                                l = (a * (t[1] - i[1]) + r * (i[0] - t[0])) / (r * n - a * o);
                            return h >= 0 && h <= 1 && l >= 0 && l <= 1
                        }
                    }, {
                        "./Scalar": 4
                    }],
                    2: [function(t, e, i) {
                        function s() {}
                        e.exports = s, s.area = function(t, e, i) {
                            return (e[0] - t[0]) * (i[1] - t[1]) - (i[0] - t[0]) * (e[1] - t[1])
                        }, s.left = function(t, e, i) {
                            return s.area(t, e, i) > 0
                        }, s.leftOn = function(t, e, i) {
                            return s.area(t, e, i) >= 0
                        }, s.right = function(t, e, i) {
                            return s.area(t, e, i) < 0
                        }, s.rightOn = function(t, e, i) {
                            return s.area(t, e, i) <= 0
                        };
                        var n = [],
                            o = [];
                        s.collinear = function(t, e, i, a) {
                            if (a) {
                                var r = n,
                                    h = o;
                                r[0] = e[0] - t[0], r[1] = e[1] - t[1], h[0] = i[0] - e[0], h[1] = i[1] - e[1];
                                var l = r[0] * h[0] + r[1] * h[1],
                                    c = Math.sqrt(r[0] * r[0] + r[1] * r[1]),
                                    u = Math.sqrt(h[0] * h[0] + h[1] * h[1]);
                                return Math.acos(l / (c * u)) < a
                            }
                            return 0 == s.area(t, e, i)
                        }, s.sqdist = function(t, e) {
                            var i = e[0] - t[0],
                                s = e[1] - t[1];
                            return i * i + s * s
                        }
                    }, {}],
                    3: [function(t, e, i) {
                        function s() {
                            this.vertices = []
                        }

                        function n(t, e, i, s, n) {
                            n = n || 0;
                            var o = e[1] - t[1],
                                a = t[0] - e[0],
                                h = o * t[0] + a * t[1],
                                l = s[1] - i[1],
                                c = i[0] - s[0],
                                u = l * i[0] + c * i[1],
                                d = o * c - l * a;
                            return r.eq(d, 0, n) ? [0, 0] : [(c * h - a * u) / d, (o * u - l * h) / d]
                        }
                        var o = t("./Line"),
                            a = t("./Point"),
                            r = t("./Scalar");
                        e.exports = s, s.prototype.at = function(t) {
                            var e = this.vertices,
                                i = e.length;
                            return e[t < 0 ? t % i + i : t % i]
                        }, s.prototype.first = function() {
                            return this.vertices[0]
                        }, s.prototype.last = function() {
                            return this.vertices[this.vertices.length - 1]
                        }, s.prototype.clear = function() {
                            this.vertices.length = 0
                        }, s.prototype.append = function(t, e, i) {
                            if (void 0 === e) throw new Error("From is not given!");
                            if (void 0 === i) throw new Error("To is not given!");
                            if (i - 1 < e) throw new Error("lol1");
                            if (i > t.vertices.length) throw new Error("lol2");
                            if (e < 0) throw new Error("lol3");
                            for (var s = e; s < i; s++) this.vertices.push(t.vertices[s])
                        }, s.prototype.makeCCW = function() {
                            for (var t = 0, e = this.vertices, i = 1; i < this.vertices.length; ++i)(e[i][1] < e[t][1] || e[i][1] == e[t][1] && e[i][0] > e[t][0]) && (t = i);
                            a.left(this.at(t - 1), this.at(t), this.at(t + 1)) || this.reverse()
                        }, s.prototype.reverse = function() {
                            for (var t = [], e = 0, i = this.vertices.length; e !== i; e++) t.push(this.vertices.pop());
                            this.vertices = t
                        }, s.prototype.isReflex = function(t) {
                            return a.right(this.at(t - 1), this.at(t), this.at(t + 1))
                        };
                        var h = [],
                            l = [];
                        s.prototype.canSee = function(t, e) {
                            var i, s, n = h,
                                r = l;
                            if (a.leftOn(this.at(t + 1), this.at(t), this.at(e)) && a.rightOn(this.at(t - 1), this.at(t), this.at(e))) return !1;
                            s = a.sqdist(this.at(t), this.at(e));
                            for (var c = 0; c !== this.vertices.length; ++c)
                                if ((c + 1) % this.vertices.length !== t && c !== t && a.leftOn(this.at(t), this.at(e), this.at(c + 1)) && a.rightOn(this.at(t), this.at(e), this.at(c)) && (n[0] = this.at(t), n[1] = this.at(e), r[0] = this.at(c), r[1] = this.at(c + 1), i = o.lineInt(n, r), a.sqdist(this.at(t), i) < s)) return !1;
                            return !0
                        }, s.prototype.copy = function(t, e, i) {
                            var n = i || new s;
                            if (n.clear(), t < e)
                                for (var o = t; o <= e; o++) n.vertices.push(this.vertices[o]);
                            else {
                                for (var o = 0; o <= e; o++) n.vertices.push(this.vertices[o]);
                                for (var o = t; o < this.vertices.length; o++) n.vertices.push(this.vertices[o])
                            }
                            return n
                        }, s.prototype.getCutEdges = function() {
                            for (var t = [], e = [], i = [], n = new s, o = Number.MAX_VALUE, a = 0; a < this.vertices.length; ++a)
                                if (this.isReflex(a))
                                    for (var r = 0; r < this.vertices.length; ++r)
                                        if (this.canSee(a, r)) {
                                            e = this.copy(a, r, n).getCutEdges(), i = this.copy(r, a, n).getCutEdges();
                                            for (var h = 0; h < i.length; h++) e.push(i[h]);
                                            e.length < o && (t = e, o = e.length, t.push([this.at(a), this.at(r)]))
                                        } return t
                        }, s.prototype.decomp = function() {
                            var t = this.getCutEdges();
                            return t.length > 0 ? this.slice(t) : [this]
                        }, s.prototype.slice = function(t) {
                            if (0 == t.length) return [this];
                            if (t instanceof Array && t.length && t[0] instanceof Array && 2 == t[0].length && t[0][0] instanceof Array) {
                                for (var e = [this], i = 0; i < t.length; i++)
                                    for (var s = t[i], n = 0; n < e.length; n++) {
                                        var o = e[n],
                                            a = o.slice(s);
                                        if (a) {
                                            e.splice(n, 1), e.push(a[0], a[1]);
                                            break
                                        }
                                    }
                                return e
                            }
                            var s = t,
                                i = this.vertices.indexOf(s[0]),
                                n = this.vertices.indexOf(s[1]);
                            return -1 != i && -1 != n && [this.copy(i, n), this.copy(n, i)]
                        }, s.prototype.isSimple = function() {
                            for (var t = this.vertices, e = 0; e < t.length - 1; e++)
                                for (var i = 0; i < e - 1; i++)
                                    if (o.segmentsIntersect(t[e], t[e + 1], t[i], t[i + 1])) return !1;
                            for (var e = 1; e < t.length - 2; e++)
                                if (o.segmentsIntersect(t[0], t[t.length - 1], t[e], t[e + 1])) return !1;
                            return !0
                        }, s.prototype.quickDecomp = function(t, e, i, o, r, h) {
                            r = r || 100, h = h || 0, o = o || 25, t = void 0 !== t ? t : [], e = e || [], i = i || [];
                            var l = [0, 0],
                                c = [0, 0],
                                u = [0, 0],
                                d = 0,
                                p = 0,
                                f = 0,
                                y = 0,
                                g = 0,
                                m = 0,
                                v = 0,
                                b = new s,
                                x = new s,
                                _ = this,
                                w = this.vertices;
                            if (w.length < 3) return t;
                            if (++h > r) return t;
                            for (var P = 0; P < this.vertices.length; ++P)
                                if (_.isReflex(P)) {
                                    e.push(_.vertices[P]), d = p = Number.MAX_VALUE;
                                    for (var C = 0; C < this.vertices.length; ++C) a.left(_.at(P - 1), _.at(P), _.at(C)) && a.rightOn(_.at(P - 1), _.at(P), _.at(C - 1)) && (u = n(_.at(P - 1), _.at(P), _.at(C), _.at(C - 1)), a.right(_.at(P + 1), _.at(P), u) && (f = a.sqdist(_.vertices[P], u)) < p && (p = f, c = u, m = C)), a.left(_.at(P + 1), _.at(P), _.at(C + 1)) && a.rightOn(_.at(P + 1), _.at(P), _.at(C)) && (u = n(_.at(P + 1), _.at(P), _.at(C), _.at(C + 1)), a.left(_.at(P - 1), _.at(P), u) && (f = a.sqdist(_.vertices[P], u)) < d && (d = f, l = u, g = C));
                                    if (m == (g + 1) % this.vertices.length) u[0] = (c[0] + l[0]) / 2, u[1] = (c[1] + l[1]) / 2, i.push(u), P < g ? (b.append(_, P, g + 1), b.vertices.push(u), x.vertices.push(u), 0 != m && x.append(_, m, _.vertices.length), x.append(_, 0, P + 1)) : (0 != P && b.append(_, P, _.vertices.length), b.append(_, 0, g + 1), b.vertices.push(u), x.vertices.push(u), x.append(_, m, P + 1));
                                    else {
                                        if (m > g && (g += this.vertices.length), y = Number.MAX_VALUE, g < m) return t;
                                        for (var C = m; C <= g; ++C) a.leftOn(_.at(P - 1), _.at(P), _.at(C)) && a.rightOn(_.at(P + 1), _.at(P), _.at(C)) && (f = a.sqdist(_.at(P), _.at(C))) < y && (y = f, v = C % this.vertices.length);
                                        P < v ? (b.append(_, P, v + 1), 0 != v && x.append(_, v, w.length), x.append(_, 0, P + 1)) : (0 != P && b.append(_, P, w.length), b.append(_, 0, v + 1), x.append(_, v, P + 1))
                                    }
                                    return b.vertices.length < x.vertices.length ? (b.quickDecomp(t, e, i, o, r, h), x.quickDecomp(t, e, i, o, r, h)) : (x.quickDecomp(t, e, i, o, r, h), b.quickDecomp(t, e, i, o, r, h)), t
                                } return t.push(this), t
                        }, s.prototype.removeCollinearPoints = function(t) {
                            for (var e = 0, i = this.vertices.length - 1; this.vertices.length > 3 && i >= 0; --i) a.collinear(this.at(i - 1), this.at(i), this.at(i + 1), t) && (this.vertices.splice(i % this.vertices.length, 1), i--, e++);
                            return e
                        }
                    }, {
                        "./Line": 1,
                        "./Point": 2,
                        "./Scalar": 4
                    }],
                    4: [function(t, e, i) {
                        function s() {}
                        e.exports = s, s.eq = function(t, e, i) {
                            return i = i || 0, Math.abs(t - e) < i
                        }
                    }, {}],
                    5: [function(t, e, i) {
                        e.exports = {
                            Polygon: t("./Polygon"),
                            Point: t("./Point")
                        }
                    }, {
                        "./Point": 2,
                        "./Polygon": 3
                    }],
                    6: [function(t, e, i) {
                        e.exports = {
                            name: "p2",
                            version: "0.7.0",
                            description: "A JavaScript 2D physics engine.",
                            author: "Stefan Hedman <schteppe@gmail.com> (http://steffe.se)",
                            keywords: ["p2.js", "p2", "physics", "engine", "2d"],
                            main: "./src/p2.js",
                            engines: {
                                node: "*"
                            },
                            repository: {
                                type: "git",
                                url: "https://github.com/schteppe/p2.js.git"
                            },
                            bugs: {
                                url: "https://github.com/schteppe/p2.js/issues"
                            },
                            licenses: [{
                                type: "MIT"
                            }],
                            devDependencies: {
                                grunt: "^0.4.5",
                                "grunt-contrib-jshint": "^0.11.2",
                                "grunt-contrib-nodeunit": "^0.4.1",
                                "grunt-contrib-uglify": "~0.4.0",
                                "grunt-contrib-watch": "~0.5.0",
                                "grunt-browserify": "~2.0.1",
                                "grunt-contrib-concat": "^0.4.0"
                            },
                            dependencies: {
                                "poly-decomp": "0.1.0"
                            }
                        }
                    }, {}],
                    7: [function(t, e, i) {
                        function s(t) {
                            this.lowerBound = n.create(), t && t.lowerBound && n.copy(this.lowerBound, t.lowerBound), this.upperBound = n.create(), t && t.upperBound && n.copy(this.upperBound, t.upperBound)
                        }
                        var n = t("../math/vec2"),
                            o = t("../utils/Utils");
                        e.exports = s;
                        var a = n.create();
                        s.prototype.setFromPoints = function(t, e, i, s) {
                            var o = this.lowerBound,
                                r = this.upperBound;
                            "number" != typeof i && (i = 0), 0 !== i ? n.rotate(o, t[0], i) : n.copy(o, t[0]), n.copy(r, o);
                            for (var h = Math.cos(i), l = Math.sin(i), c = 1; c < t.length; c++) {
                                var u = t[c];
                                if (0 !== i) {
                                    var d = u[0],
                                        p = u[1];
                                    a[0] = h * d - l * p, a[1] = l * d + h * p, u = a
                                }
                                for (var f = 0; f < 2; f++) u[f] > r[f] && (r[f] = u[f]), u[f] < o[f] && (o[f] = u[f])
                            }
                            e && (n.add(this.lowerBound, this.lowerBound, e), n.add(this.upperBound, this.upperBound, e)), s && (this.lowerBound[0] -= s, this.lowerBound[1] -= s, this.upperBound[0] += s, this.upperBound[1] += s)
                        }, s.prototype.copy = function(t) {
                            n.copy(this.lowerBound, t.lowerBound), n.copy(this.upperBound, t.upperBound)
                        }, s.prototype.extend = function(t) {
                            for (var e = 2; e--;) {
                                var i = t.lowerBound[e];
                                this.lowerBound[e] > i && (this.lowerBound[e] = i);
                                var s = t.upperBound[e];
                                this.upperBound[e] < s && (this.upperBound[e] = s)
                            }
                        }, s.prototype.overlaps = function(t) {
                            var e = this.lowerBound,
                                i = this.upperBound,
                                s = t.lowerBound,
                                n = t.upperBound;
                            return (s[0] <= i[0] && i[0] <= n[0] || e[0] <= n[0] && n[0] <= i[0]) && (s[1] <= i[1] && i[1] <= n[1] || e[1] <= n[1] && n[1] <= i[1])
                        }, s.prototype.containsPoint = function(t) {
                            var e = this.lowerBound,
                                i = this.upperBound;
                            return e[0] <= t[0] && t[0] <= i[0] && e[1] <= t[1] && t[1] <= i[1]
                        }, s.prototype.overlapsRay = function(t) {
                            var e = 0,
                                i = 1 / t.direction[0],
                                s = 1 / t.direction[1],
                                n = (this.lowerBound[0] - t.from[0]) * i,
                                o = (this.upperBound[0] - t.from[0]) * i,
                                a = (this.lowerBound[1] - t.from[1]) * s,
                                r = (this.upperBound[1] - t.from[1]) * s,
                                h = Math.max(Math.max(Math.min(n, o), Math.min(a, r))),
                                l = Math.min(Math.min(Math.max(n, o), Math.max(a, r)));
                            return l < 0 ? -1 : h > l ? -1 : h
                        }
                    }, {
                        "../math/vec2": 30,
                        "../utils/Utils": 57
                    }],
                    8: [function(t, e, i) {
                        function s(t) {
                            this.type = t, this.result = [], this.world = null, this.boundingVolumeType = s.AABB
                        }
                        var n = t("../math/vec2"),
                            o = t("../objects/Body");
                        e.exports = s, s.AABB = 1, s.BOUNDING_CIRCLE = 2, s.prototype.setWorld = function(t) {
                            this.world = t
                        }, s.prototype.getCollisionPairs = function(t) {};
                        var a = n.create();
                        s.boundingRadiusCheck = function(t, e) {
                            n.sub(a, t.position, e.position);
                            var i = n.squaredLength(a),
                                s = t.boundingRadius + e.boundingRadius;
                            return i <= s * s
                        }, s.aabbCheck = function(t, e) {
                            return t.getAABB().overlaps(e.getAABB())
                        }, s.prototype.boundingVolumeCheck = function(t, e) {
                            var i;
                            switch (this.boundingVolumeType) {
                                case s.BOUNDING_CIRCLE:
                                    i = s.boundingRadiusCheck(t, e);
                                    break;
                                case s.AABB:
                                    i = s.aabbCheck(t, e);
                                    break;
                                default:
                                    throw new Error("Bounding volume type not recognized: " + this.boundingVolumeType)
                            }
                            return i
                        }, s.canCollide = function(t, e) {
                            var i = o.KINEMATIC,
                                s = o.STATIC;
                            return (t.type !== s || e.type !== s) && (!(t.type === i && e.type === s || t.type === s && e.type === i) && ((t.type !== i || e.type !== i) && ((t.sleepState !== o.SLEEPING || e.sleepState !== o.SLEEPING) && !(t.sleepState === o.SLEEPING && e.type === s || e.sleepState === o.SLEEPING && t.type === s))))
                        }, s.NAIVE = 1, s.SAP = 2
                    }, {
                        "../math/vec2": 30,
                        "../objects/Body": 31
                    }],
                    9: [function(t, e, i) {
                        function s() {
                            h.call(this, h.NAIVE)
                        }
                        var n = t("../shapes/Circle"),
                            o = t("../shapes/Plane"),
                            a = t("../shapes/Shape"),
                            r = t("../shapes/Particle"),
                            h = t("../collision/Broadphase"),
                            l = t("../math/vec2");
                        e.exports = s, s.prototype = new h, s.prototype.constructor = s, s.prototype.getCollisionPairs = function(t) {
                            var e = t.bodies,
                                i = this.result;
                            i.length = 0;
                            for (var s = 0, n = e.length; s !== n; s++)
                                for (var o = e[s], a = 0; a < s; a++) {
                                    var r = e[a];
                                    h.canCollide(o, r) && this.boundingVolumeCheck(o, r) && i.push(o, r)
                                }
                            return i
                        }, s.prototype.aabbQuery = function(t, e, i) {
                            i = i || [];
                            for (var s = t.bodies, n = 0; n < s.length; n++) {
                                var o = s[n];
                                o.aabbNeedsUpdate && o.updateAABB(), o.aabb.overlaps(e) && i.push(o)
                            }
                            return i
                        }
                    }, {
                        "../collision/Broadphase": 8,
                        "../math/vec2": 30,
                        "../shapes/Circle": 39,
                        "../shapes/Particle": 43,
                        "../shapes/Plane": 44,
                        "../shapes/Shape": 45
                    }],
                    10: [function(t, e, i) {
                        function s() {
                            this.contactEquations = [], this.frictionEquations = [], this.enableFriction = !0, this.enabledEquations = !0, this.slipForce = 10, this.frictionCoefficient = .3, this.surfaceVelocity = 0, this.contactEquationPool = new u({
                                size: 32
                            }), this.frictionEquationPool = new d({
                                size: 64
                            }), this.restitution = 0, this.stiffness = f.DEFAULT_STIFFNESS, this.relaxation = f.DEFAULT_RELAXATION, this.frictionStiffness = f.DEFAULT_STIFFNESS, this.frictionRelaxation = f.DEFAULT_RELAXATION, this.enableFrictionReduction = !0, this.collidingBodiesLastStep = new p, this.contactSkinSize = .01
                        }

                        function n(t, e) {
                            a.set(t.vertices[0], .5 * -e.length, -e.radius), a.set(t.vertices[1], .5 * e.length, -e.radius), a.set(t.vertices[2], .5 * e.length, e.radius), a.set(t.vertices[3], .5 * -e.length, e.radius)
                        }

                        function o(t, e, i, s) {
                            for (var n = K, o = J, l = Z, c = Q, u = t, d = e.vertices, p = null, f = 0; f !== d.length + 1; f++) {
                                var y = d[f % d.length],
                                    g = d[(f + 1) % d.length];
                                a.rotate(n, y, s), a.rotate(o, g, s), h(n, n, i), h(o, o, i), r(l, n, u), r(c, o, u);
                                var m = a.crossLength(l, c);
                                if (null === p && (p = m), m * p <= 0) return !1;
                                p = m
                            }
                            return !0
                        }
                        var a = t("../math/vec2"),
                            r = a.sub,
                            h = a.add,
                            l = a.dot,
                            c = t("../utils/Utils"),
                            u = t("../utils/ContactEquationPool"),
                            d = t("../utils/FrictionEquationPool"),
                            p = t("../utils/TupleDictionary"),
                            f = t("../equations/Equation"),
                            y = t("../equations/ContactEquation"),
                            g = t("../equations/FrictionEquation"),
                            m = t("../shapes/Circle"),
                            v = t("../shapes/Convex"),
                            b = t("../shapes/Shape"),
                            x = t("../objects/Body"),
                            _ = t("../shapes/Box");
                        e.exports = s;
                        var w = a.fromValues(0, 1),
                            P = a.fromValues(0, 0),
                            C = a.fromValues(0, 0),
                            T = a.fromValues(0, 0),
                            S = a.fromValues(0, 0),
                            A = a.fromValues(0, 0),
                            E = a.fromValues(0, 0),
                            I = a.fromValues(0, 0),
                            M = a.fromValues(0, 0),
                            O = a.fromValues(0, 0),
                            R = a.fromValues(0, 0),
                            B = a.fromValues(0, 0),
                            D = a.fromValues(0, 0),
                            L = a.fromValues(0, 0),
                            k = a.fromValues(0, 0),
                            F = a.fromValues(0, 0),
                            G = a.fromValues(0, 0),
                            U = a.fromValues(0, 0),
                            N = a.fromValues(0, 0),
                            j = [],
                            W = a.create(),
                            X = a.create();
                        s.prototype.bodiesOverlap = function(t, e) {
                            for (var i = W, s = X, n = 0, o = t.shapes.length; n !== o; n++) {
                                var a = t.shapes[n];
                                t.toWorldFrame(i, a.position);
                                for (var r = 0, h = e.shapes.length; r !== h; r++) {
                                    var l = e.shapes[r];
                                    if (e.toWorldFrame(s, l.position), this[a.type | l.type](t, a, i, a.angle + t.angle, e, l, s, l.angle + e.angle, !0)) return !0
                                }
                            }
                            return !1
                        }, s.prototype.collidedLastStep = function(t, e) {
                            var i = 0 | t.id,
                                s = 0 | e.id;
                            return !!this.collidingBodiesLastStep.get(i, s)
                        }, s.prototype.reset = function() {
                            this.collidingBodiesLastStep.reset();
                            for (var t = this.contactEquations, e = t.length; e--;) {
                                var i = t[e],
                                    s = i.bodyA.id,
                                    n = i.bodyB.id;
                                this.collidingBodiesLastStep.set(s, n, !0)
                            }
                            for (var o = this.contactEquations, a = this.frictionEquations, r = 0; r < o.length; r++) this.contactEquationPool.release(o[r]);
                            for (var r = 0; r < a.length; r++) this.frictionEquationPool.release(a[r]);
                            this.contactEquations.length = this.frictionEquations.length = 0
                        }, s.prototype.createContactEquation = function(t, e, i, s) {
                            var n = this.contactEquationPool.get();
                            return n.bodyA = t, n.bodyB = e, n.shapeA = i, n.shapeB = s, n.restitution = this.restitution, n.firstImpact = !this.collidedLastStep(t, e), n.stiffness = this.stiffness, n.relaxation = this.relaxation, n.needsUpdate = !0, n.enabled = this.enabledEquations, n.offset = this.contactSkinSize, n
                        }, s.prototype.createFrictionEquation = function(t, e, i, s) {
                            var n = this.frictionEquationPool.get();
                            return n.bodyA = t, n.bodyB = e, n.shapeA = i, n.shapeB = s, n.setSlipForce(this.slipForce), n.frictionCoefficient = this.frictionCoefficient, n.relativeVelocity = this.surfaceVelocity, n.enabled = this.enabledEquations, n.needsUpdate = !0, n.stiffness = this.frictionStiffness, n.relaxation = this.frictionRelaxation, n.contactEquations.length = 0, n
                        }, s.prototype.createFrictionFromContact = function(t) {
                            var e = this.createFrictionEquation(t.bodyA, t.bodyB, t.shapeA, t.shapeB);
                            return a.copy(e.contactPointA, t.contactPointA), a.copy(e.contactPointB, t.contactPointB), a.rotate90cw(e.t, t.normalA), e.contactEquations.push(t), e
                        }, s.prototype.createFrictionFromAverage = function(t) {
                            var e = this.contactEquations[this.contactEquations.length - 1],
                                i = this.createFrictionEquation(e.bodyA, e.bodyB, e.shapeA, e.shapeB),
                                s = e.bodyA,
                                n = e.bodyB;
                            a.set(i.contactPointA, 0, 0), a.set(i.contactPointB, 0, 0), a.set(i.t, 0, 0);
                            for (var o = 0; o !== t; o++) e = this.contactEquations[this.contactEquations.length - 1 - o], e.bodyA === s ? (a.add(i.t, i.t, e.normalA), a.add(i.contactPointA, i.contactPointA, e.contactPointA), a.add(i.contactPointB, i.contactPointB, e.contactPointB)) : (a.sub(i.t, i.t, e.normalA), a.add(i.contactPointA, i.contactPointA, e.contactPointB), a.add(i.contactPointB, i.contactPointB, e.contactPointA)), i.contactEquations.push(e);
                            var r = 1 / t;
                            return a.scale(i.contactPointA, i.contactPointA, r), a.scale(i.contactPointB, i.contactPointB, r), a.normalize(i.t, i.t), a.rotate90cw(i.t, i.t), i
                        }, s.prototype[b.LINE | b.CONVEX] = s.prototype.convexLine = function(t, e, i, s, n, o, a, r, h) {
                            return !h && 0
                        }, s.prototype[b.LINE | b.BOX] = s.prototype.lineBox = function(t, e, i, s, n, o, a, r, h) {
                            return !h && 0
                        };
                        var H = new _({
                                width: 1,
                                height: 1
                            }),
                            V = a.create();
                        s.prototype[b.CAPSULE | b.CONVEX] = s.prototype[b.CAPSULE | b.BOX] = s.prototype.convexCapsule = function(t, e, i, s, o, r, h, l, c) {
                            var u = V;
                            a.set(u, r.length / 2, 0), a.rotate(u, u, l), a.add(u, u, h);
                            var d = this.circleConvex(o, r, u, l, t, e, i, s, c, r.radius);
                            a.set(u, -r.length / 2, 0), a.rotate(u, u, l), a.add(u, u, h);
                            var p = this.circleConvex(o, r, u, l, t, e, i, s, c, r.radius);
                            if (c && (d || p)) return !0;
                            var f = H;
                            return n(f, r), this.convexConvex(t, e, i, s, o, f, h, l, c) + d + p
                        }, s.prototype[b.CAPSULE | b.LINE] = s.prototype.lineCapsule = function(t, e, i, s, n, o, a, r, h) {
                            return !h && 0
                        };
                        var Y = a.create(),
                            q = a.create(),
                            z = new _({
                                width: 1,
                                height: 1
                            });
                        s.prototype[b.CAPSULE | b.CAPSULE] = s.prototype.capsuleCapsule = function(t, e, i, s, o, r, h, l, c) {
                            for (var u, d = Y, p = q, f = 0, y = 0; y < 2; y++) {
                                a.set(d, (0 === y ? -1 : 1) * e.length / 2, 0), a.rotate(d, d, s), a.add(d, d, i);
                                for (var g = 0; g < 2; g++) {
                                    a.set(p, (0 === g ? -1 : 1) * r.length / 2, 0), a.rotate(p, p, l), a.add(p, p, h), this.enableFrictionReduction && (u = this.enableFriction, this.enableFriction = !1);
                                    var m = this.circleCircle(t, e, d, s, o, r, p, l, c, e.radius, r.radius);
                                    if (this.enableFrictionReduction && (this.enableFriction = u), c && m) return !0;
                                    f += m
                                }
                            }
                            this.enableFrictionReduction && (u = this.enableFriction, this.enableFriction = !1);
                            var v = z;
                            n(v, e);
                            var b = this.convexCapsule(t, v, i, s, o, r, h, l, c);
                            if (this.enableFrictionReduction && (this.enableFriction = u), c && b) return !0;
                            if (f += b, this.enableFrictionReduction) {
                                var u = this.enableFriction;
                                this.enableFriction = !1
                            }
                            n(v, r);
                            var x = this.convexCapsule(o, v, h, l, t, e, i, s, c);
                            return this.enableFrictionReduction && (this.enableFriction = u), !(!c || !x) || (f += x, this.enableFrictionReduction && f && this.enableFriction && this.frictionEquations.push(this.createFrictionFromAverage(f)), f)
                        }, s.prototype[b.LINE | b.LINE] = s.prototype.lineLine = function(t, e, i, s, n, o, a, r, h) {
                            return !h && 0
                        }, s.prototype[b.PLANE | b.LINE] = s.prototype.planeLine = function(t, e, i, s, n, o, c, u, d) {
                            var p = P,
                                f = C,
                                y = T,
                                g = S,
                                m = A,
                                v = E,
                                b = I,
                                x = M,
                                _ = O,
                                R = j,
                                B = 0;
                            a.set(p, -o.length / 2, 0), a.set(f, o.length / 2, 0), a.rotate(y, p, u), a.rotate(g, f, u), h(y, y, c), h(g, g, c), a.copy(p, y), a.copy(f, g), r(m, f, p), a.normalize(v, m), a.rotate90cw(_, v), a.rotate(x, w, s), R[0] = p, R[1] = f;
                            for (var D = 0; D < R.length; D++) {
                                var L = R[D];
                                r(b, L, i);
                                var k = l(b, x);
                                if (k < 0) {
                                    if (d) return !0;
                                    var F = this.createContactEquation(t, n, e, o);
                                    B++, a.copy(F.normalA, x), a.normalize(F.normalA, F.normalA), a.scale(b, x, k), r(F.contactPointA, L, b), r(F.contactPointA, F.contactPointA, t.position), r(F.contactPointB, L, c), h(F.contactPointB, F.contactPointB, c), r(F.contactPointB, F.contactPointB, n.position), this.contactEquations.push(F), this.enableFrictionReduction || this.enableFriction && this.frictionEquations.push(this.createFrictionFromContact(F))
                                }
                            }
                            return !d && (this.enableFrictionReduction || B && this.enableFriction && this.frictionEquations.push(this.createFrictionFromAverage(B)), B)
                        }, s.prototype[b.PARTICLE | b.CAPSULE] = s.prototype.particleCapsule = function(t, e, i, s, n, o, a, r, h) {
                            return this.circleLine(t, e, i, s, n, o, a, r, h, o.radius, 0)
                        }, s.prototype[b.CIRCLE | b.LINE] = s.prototype.circleLine = function(t, e, i, s, n, o, c, u, d, p, f) {
                            var p = p || 0,
                                f = void 0 !== f ? f : e.radius,
                                y = P,
                                g = C,
                                m = T,
                                v = S,
                                b = A,
                                x = E,
                                _ = I,
                                w = M,
                                F = O,
                                G = R,
                                U = B,
                                N = D,
                                W = L,
                                X = k,
                                H = j;
                            a.set(w, -o.length / 2, 0), a.set(F, o.length / 2, 0), a.rotate(G, w, u), a.rotate(U, F, u), h(G, G, c), h(U, U, c), a.copy(w, G), a.copy(F, U), r(x, F, w), a.normalize(_, x), a.rotate90cw(b, _), r(N, i, w);
                            var V = l(N, b);
                            r(v, w, c), r(W, i, c);
                            var Y = f + p;
                            if (Math.abs(V) < Y) {
                                a.scale(y, b, V), r(m, i, y), a.scale(g, b, l(b, W)), a.normalize(g, g), a.scale(g, g, p), h(m, m, g);
                                var q = l(_, m),
                                    z = l(_, w),
                                    K = l(_, F);
                                if (q > z && q < K) {
                                    if (d) return !0;
                                    var J = this.createContactEquation(t, n, e, o);
                                    return a.scale(J.normalA, y, -1), a.normalize(J.normalA, J.normalA), a.scale(J.contactPointA, J.normalA, f), h(J.contactPointA, J.contactPointA, i), r(J.contactPointA, J.contactPointA, t.position), r(J.contactPointB, m, c), h(J.contactPointB, J.contactPointB, c), r(J.contactPointB, J.contactPointB, n.position), this.contactEquations.push(J), this.enableFriction && this.frictionEquations.push(this.createFrictionFromContact(J)), 1
                                }
                            }
                            H[0] = w, H[1] = F;
                            for (var Z = 0; Z < H.length; Z++) {
                                var Q = H[Z];
                                if (r(N, Q, i), a.squaredLength(N) < Math.pow(Y, 2)) {
                                    if (d) return !0;
                                    var J = this.createContactEquation(t, n, e, o);
                                    return a.copy(J.normalA, N), a.normalize(J.normalA, J.normalA), a.scale(J.contactPointA, J.normalA, f), h(J.contactPointA, J.contactPointA, i), r(J.contactPointA, J.contactPointA, t.position), r(J.contactPointB, Q, c), a.scale(X, J.normalA, -p), h(J.contactPointB, J.contactPointB, X), h(J.contactPointB, J.contactPointB, c), r(J.contactPointB, J.contactPointB, n.position), this.contactEquations.push(J), this.enableFriction && this.frictionEquations.push(this.createFrictionFromContact(J)), 1
                                }
                            }
                            return 0
                        }, s.prototype[b.CIRCLE | b.CAPSULE] = s.prototype.circleCapsule = function(t, e, i, s, n, o, a, r, h) {
                            return this.circleLine(t, e, i, s, n, o, a, r, h, o.radius)
                        }, s.prototype[b.CIRCLE | b.CONVEX] = s.prototype[b.CIRCLE | b.BOX] = s.prototype.circleConvex = function(t, e, i, s, n, l, c, u, d, p) {
                            for (var p = "number" == typeof p ? p : e.radius, f = P, y = C, g = T, m = S, v = A, b = E, x = I, _ = M, w = O, U = R, N = B, j = -1, W = null, X = D, H = L, V = k, Y = F, q = G, z = !1, K = Number.MAX_VALUE, J = 0, Z = l.vertices, Q = 0; Q !== Z.length + 1; Q++) {
                                var $ = Z[Q % Z.length],
                                    tt = Z[(Q + 1) % Z.length];
                                if (a.rotate(f, $, u), a.rotate(y, tt, u), h(f, f, c), h(y, y, c), r(g, y, f), a.normalize(m, g), a.rotate90cw(v, m), a.scale(V, v, -e.radius), h(V, V, i), o(V, l, c, u)) {
                                    a.sub(Y, f, V);
                                    var et = Math.abs(a.dot(Y, v));
                                    et < K && (a.copy(q, V), K = et, a.scale(H, v, et), a.add(H, H, V), z = !0)
                                }
                            }
                            if (z) {
                                if (d) return !0;
                                var it = this.createContactEquation(t, n, e, l);
                                return a.sub(it.normalA, q, i), a.normalize(it.normalA, it.normalA), a.scale(it.contactPointA, it.normalA, p), h(it.contactPointA, it.contactPointA, i), r(it.contactPointA, it.contactPointA, t.position), r(it.contactPointB, H, c), h(it.contactPointB, it.contactPointB, c), r(it.contactPointB, it.contactPointB, n.position), this.contactEquations.push(it), this.enableFriction && this.frictionEquations.push(this.createFrictionFromContact(it)), 1
                            }
                            if (p > 0)
                                for (var Q = 0; Q < Z.length; Q++) {
                                    var st = Z[Q];
                                    if (a.rotate(N, st, u), h(N, N, c), r(U, N, i), a.squaredLength(U) < Math.pow(p, 2)) {
                                        if (d) return !0;
                                        var it = this.createContactEquation(t, n, e, l);
                                        return a.copy(it.normalA, U), a.normalize(it.normalA, it.normalA), a.scale(it.contactPointA, it.normalA, p), h(it.contactPointA, it.contactPointA, i), r(it.contactPointA, it.contactPointA, t.position), r(it.contactPointB, N, c), h(it.contactPointB, it.contactPointB, c), r(it.contactPointB, it.contactPointB, n.position), this.contactEquations.push(it), this.enableFriction && this.frictionEquations.push(this.createFrictionFromContact(it)), 1
                                    }
                                }
                            return 0
                        };
                        var K = a.create(),
                            J = a.create(),
                            Z = a.create(),
                            Q = a.create();
                        s.prototype[b.PARTICLE | b.CONVEX] = s.prototype[b.PARTICLE | b.BOX] = s.prototype.particleConvex = function(t, e, i, s, n, c, u, d, p) {
                            var f = P,
                                y = C,
                                g = T,
                                m = S,
                                v = A,
                                b = E,
                                x = I,
                                _ = M,
                                w = O,
                                j = R,
                                W = B,
                                X = -1,
                                H = null,
                                V = D,
                                Y = L,
                                q = k,
                                z = F,
                                K = G,
                                J = U,
                                Z = N,
                                Q = Number.MAX_VALUE,
                                $ = 0,
                                tt = !1,
                                et = c.vertices;
                            if (!o(i, c, u, d)) return 0;
                            if (p) return !0;
                            for (var it = null, st = 0; st !== et.length + 1; st++) {
                                var nt = et[st % et.length],
                                    ot = et[(st + 1) % et.length];
                                a.rotate(f, nt, d), a.rotate(y, ot, d), h(f, f, u), h(y, y, u), r(g, y, f), a.normalize(m, g), a.rotate90cw(v, m), r(j, i, f);
                                var at = l(j, v);
                                r(b, f, u), r(x, i, u), a.sub(J, f, i);
                                var rt = Math.abs(a.dot(J, v));
                                rt < Q && (Q = rt, a.scale(Y, v, rt), a.add(Y, Y, i), a.copy(Z, v), tt = !0)
                            }
                            if (tt) {
                                var ht = this.createContactEquation(t, n, e, c);
                                return a.scale(ht.normalA, Z, -1), a.normalize(ht.normalA, ht.normalA), a.set(ht.contactPointA, 0, 0), h(ht.contactPointA, ht.contactPointA, i), r(ht.contactPointA, ht.contactPointA, t.position), r(ht.contactPointB, Y, u), h(ht.contactPointB, ht.contactPointB, u), r(ht.contactPointB, ht.contactPointB, n.position), this.contactEquations.push(ht), this.enableFriction && this.frictionEquations.push(this.createFrictionFromContact(ht)), 1
                            }
                            return 0
                        }, s.prototype[b.CIRCLE] = s.prototype.circleCircle = function(t, e, i, s, n, o, l, c, u, d, p) {
                            var f = P,
                                d = d || e.radius,
                                p = p || o.radius;
                            r(f, i, l);
                            var y = d + p;
                            if (a.squaredLength(f) > Math.pow(y, 2)) return 0;
                            if (u) return !0;
                            var g = this.createContactEquation(t, n, e, o);
                            return r(g.normalA, l, i), a.normalize(g.normalA, g.normalA), a.scale(g.contactPointA, g.normalA, d), a.scale(g.contactPointB, g.normalA, -p), h(g.contactPointA, g.contactPointA, i), r(g.contactPointA, g.contactPointA, t.position), h(g.contactPointB, g.contactPointB, l), r(g.contactPointB, g.contactPointB, n.position), this.contactEquations.push(g), this.enableFriction && this.frictionEquations.push(this.createFrictionFromContact(g)), 1
                        }, s.prototype[b.PLANE | b.CONVEX] = s.prototype[b.PLANE | b.BOX] = s.prototype.planeConvex = function(t, e, i, s, n, o, c, u, d) {
                            var p = P,
                                f = C,
                                y = T,
                                g = 0;
                            a.rotate(f, w, s);
                            for (var m = 0; m !== o.vertices.length; m++) {
                                var v = o.vertices[m];
                                if (a.rotate(p, v, u), h(p, p, c), r(y, p, i), l(y, f) <= 0) {
                                    if (d) return !0;
                                    g++;
                                    var b = this.createContactEquation(t, n, e, o);
                                    r(y, p, i), a.copy(b.normalA, f);
                                    var x = l(y, b.normalA);
                                    a.scale(y, b.normalA, x), r(b.contactPointB, p, n.position), r(b.contactPointA, p, y), r(b.contactPointA, b.contactPointA, t.position), this.contactEquations.push(b), this.enableFrictionReduction || this.enableFriction && this.frictionEquations.push(this.createFrictionFromContact(b))
                                }
                            }
                            return this.enableFrictionReduction && this.enableFriction && g && this.frictionEquations.push(this.createFrictionFromAverage(g)), g
                        }, s.prototype[b.PARTICLE | b.PLANE] = s.prototype.particlePlane = function(t, e, i, s, n, o, h, c, u) {
                            var d = P,
                                p = C;
                            c = c || 0, r(d, i, h), a.rotate(p, w, c);
                            var f = l(d, p);
                            if (f > 0) return 0;
                            if (u) return !0;
                            var y = this.createContactEquation(n, t, o, e);
                            return a.copy(y.normalA, p), a.scale(d, y.normalA, f), r(y.contactPointA, i, d), r(y.contactPointA, y.contactPointA, n.position), r(y.contactPointB, i, t.position), this.contactEquations.push(y), this.enableFriction && this.frictionEquations.push(this.createFrictionFromContact(y)), 1
                        }, s.prototype[b.CIRCLE | b.PARTICLE] = s.prototype.circleParticle = function(t, e, i, s, n, o, l, c, u) {
                            var d = P;
                            if (r(d, l, i), a.squaredLength(d) > Math.pow(e.radius, 2)) return 0;
                            if (u) return !0;
                            var p = this.createContactEquation(t, n, e, o);
                            return a.copy(p.normalA, d), a.normalize(p.normalA, p.normalA), a.scale(p.contactPointA, p.normalA, e.radius), h(p.contactPointA, p.contactPointA, i), r(p.contactPointA, p.contactPointA, t.position), r(p.contactPointB, l, n.position), this.contactEquations.push(p), this.enableFriction && this.frictionEquations.push(this.createFrictionFromContact(p)), 1
                        };
                        var $ = new m({
                                radius: 1
                            }),
                            tt = a.create(),
                            et = a.create(),
                            it = a.create();
                        s.prototype[b.PLANE | b.CAPSULE] = s.prototype.planeCapsule = function(t, e, i, s, n, o, r, l, c) {
                            var u = tt,
                                d = et,
                                p = $,
                                f = it;
                            a.set(u, -o.length / 2, 0), a.rotate(u, u, l), h(u, u, r), a.set(d, o.length / 2, 0), a.rotate(d, d, l), h(d, d, r), p.radius = o.radius;
                            var y;
                            this.enableFrictionReduction && (y = this.enableFriction, this.enableFriction = !1);
                            var g = this.circlePlane(n, p, u, 0, t, e, i, s, c),
                                m = this.circlePlane(n, p, d, 0, t, e, i, s, c);
                            if (this.enableFrictionReduction && (this.enableFriction = y), c) return g || m;
                            var v = g + m;
                            return this.enableFrictionReduction && v && this.frictionEquations.push(this.createFrictionFromAverage(v)), v
                        }, s.prototype[b.CIRCLE | b.PLANE] = s.prototype.circlePlane = function(t, e, i, s, n, o, c, u, d) {
                            var p = t,
                                f = e,
                                y = i,
                                g = n,
                                m = o,
                                v = c,
                                b = u;
                            b = b || 0;
                            var x = P,
                                _ = C,
                                S = T;
                            r(x, y, v), a.rotate(_, w, b);
                            var A = l(_, x);
                            if (A > f.radius) return 0;
                            if (d) return !0;
                            var E = this.createContactEquation(g, p, o, e);
                            return a.copy(E.normalA, _), a.scale(E.contactPointB, E.normalA, -f.radius), h(E.contactPointB, E.contactPointB, y), r(E.contactPointB, E.contactPointB, p.position), a.scale(S, E.normalA, A), r(E.contactPointA, x, S), h(E.contactPointA, E.contactPointA, v), r(E.contactPointA, E.contactPointA, g.position), this.contactEquations.push(E), this.enableFriction && this.frictionEquations.push(this.createFrictionFromContact(E)), 1
                        }, s.prototype[b.CONVEX] = s.prototype[b.CONVEX | b.BOX] = s.prototype[b.BOX] = s.prototype.convexConvex = function(t, e, i, n, o, c, u, d, p, f) {
                            var y = P,
                                g = C,
                                m = T,
                                v = S,
                                b = A,
                                x = E,
                                _ = I,
                                w = M,
                                R = O,
                                B = 0,
                                f = "number" == typeof f ? f : 0;
                            if (!s.findSeparatingAxis(e, i, n, c, u, d, y)) return 0;
                            r(w, u, i), l(y, w) > 0 && a.scale(y, y, -1);
                            var D = s.getClosestEdge(e, n, y, !0),
                                L = s.getClosestEdge(c, d, y);
                            if (-1 === D || -1 === L) return 0;
                            for (var k = 0; k < 2; k++) {
                                var F = D,
                                    G = L,
                                    U = e,
                                    N = c,
                                    j = i,
                                    W = u,
                                    X = n,
                                    H = d,
                                    V = t,
                                    Y = o;
                                if (0 === k) {
                                    var q;
                                    q = F, F = G, G = q, q = U, U = N, N = q, q = j, j = W, W = q, q = X, X = H, H = q, q = V, V = Y, Y = q
                                }
                                for (var z = G; z < G + 2; z++) {
                                    var K = N.vertices[(z + N.vertices.length) % N.vertices.length];
                                    a.rotate(g, K, H), h(g, g, W);
                                    for (var J = 0, Z = F - 1; Z < F + 2; Z++) {
                                        var Q = U.vertices[(Z + U.vertices.length) % U.vertices.length],
                                            $ = U.vertices[(Z + 1 + U.vertices.length) % U.vertices.length];
                                        a.rotate(m, Q, X), a.rotate(v, $, X), h(m, m, j), h(v, v, j), r(b, v, m), a.rotate90cw(R, b), a.normalize(R, R), r(w, g, m);
                                        var tt = l(R, w);
                                        (Z === F && tt <= f || Z !== F && tt <= 0) && J++
                                    }
                                    if (J >= 3) {
                                        if (p) return !0;
                                        var et = this.createContactEquation(V, Y, U, N);
                                        B++;
                                        var Q = U.vertices[F % U.vertices.length],
                                            $ = U.vertices[(F + 1) % U.vertices.length];
                                        a.rotate(m, Q, X), a.rotate(v, $, X), h(m, m, j), h(v, v, j), r(b, v, m), a.rotate90cw(et.normalA, b), a.normalize(et.normalA, et.normalA), r(w, g, m);
                                        var tt = l(et.normalA, w);
                                        a.scale(_, et.normalA, tt), r(et.contactPointA, g, j), r(et.contactPointA, et.contactPointA, _), h(et.contactPointA, et.contactPointA, j), r(et.contactPointA, et.contactPointA, V.position), r(et.contactPointB, g, W), h(et.contactPointB, et.contactPointB, W), r(et.contactPointB, et.contactPointB, Y.position), this.contactEquations.push(et), this.enableFrictionReduction || this.enableFriction && this.frictionEquations.push(this.createFrictionFromContact(et))
                                    }
                                }
                            }
                            return this.enableFrictionReduction && this.enableFriction && B && this.frictionEquations.push(this.createFrictionFromAverage(B)), B
                        };
                        var st = a.fromValues(0, 0);
                        s.projectConvexOntoAxis = function(t, e, i, s, n) {
                            var o = null,
                                r = null,
                                h, c, u = st;
                            a.rotate(u, s, -i);
                            for (var d = 0; d < t.vertices.length; d++) h = t.vertices[d], c = l(h, u), (null === o || c > o) && (o = c), (null === r || c < r) && (r = c);
                            if (r > o) {
                                var p = r;
                                r = o, o = p
                            }
                            var f = l(e, s);
                            a.set(n, r + f, o + f)
                        };
                        var nt = a.fromValues(0, 0),
                            ot = a.fromValues(0, 0),
                            at = a.fromValues(0, 0),
                            rt = a.fromValues(0, 0),
                            ht = a.fromValues(0, 0),
                            lt = a.fromValues(0, 0);
                        s.findSeparatingAxis = function(t, e, i, n, o, h, l) {
                            var c = null,
                                u = !1,
                                d = !1,
                                p = nt,
                                f = ot,
                                y = at,
                                g = rt,
                                m = ht,
                                v = lt;
                            if (t instanceof _ && n instanceof _)
                                for (var b = 0; 2 !== b; b++) {
                                    var x = t,
                                        w = i;
                                    1 === b && (x = n, w = h);
                                    for (var P = 0; 2 !== P; P++) {
                                        0 === P ? a.set(g, 0, 1) : 1 === P && a.set(g, 1, 0), 0 !== w && a.rotate(g, g, w), s.projectConvexOntoAxis(t, e, i, g, m), s.projectConvexOntoAxis(n, o, h, g, v);
                                        var C = m,
                                            T = v,
                                            S = !1;
                                        m[0] > v[0] && (T = m, C = v, S = !0);
                                        var A = T[0] - C[1];
                                        u = A <= 0, (null === c || A > c) && (a.copy(l, g), c = A, d = u)
                                    }
                                } else
                                    for (var b = 0; 2 !== b; b++) {
                                        var x = t,
                                            w = i;
                                        1 === b && (x = n, w = h);
                                        for (var P = 0; P !== x.vertices.length; P++) {
                                            a.rotate(f, x.vertices[P], w), a.rotate(y, x.vertices[(P + 1) % x.vertices.length], w), r(p, y, f), a.rotate90cw(g, p), a.normalize(g, g), s.projectConvexOntoAxis(t, e, i, g, m), s.projectConvexOntoAxis(n, o, h, g, v);
                                            var C = m,
                                                T = v,
                                                S = !1;
                                            m[0] > v[0] && (T = m, C = v, S = !0);
                                            var A = T[0] - C[1];
                                            u = A <= 0, (null === c || A > c) && (a.copy(l, g), c = A, d = u)
                                        }
                                    }
                            return d
                        };
                        var ct = a.fromValues(0, 0),
                            ut = a.fromValues(0, 0),
                            dt = a.fromValues(0, 0);
                        s.getClosestEdge = function(t, e, i, s) {
                            var n = ct,
                                o = ut,
                                h = dt;
                            a.rotate(n, i, -e), s && a.scale(n, n, -1);
                            for (var c = -1, u = t.vertices.length, d = -1, p = 0; p !== u; p++) {
                                r(o, t.vertices[(p + 1) % u], t.vertices[p % u]), a.rotate90cw(h, o), a.normalize(h, h);
                                var f = l(h, n);
                                (-1 === c || f > d) && (c = p % u, d = f)
                            }
                            return c
                        };
                        var pt = a.create(),
                            ft = a.create(),
                            yt = a.create(),
                            gt = a.create(),
                            mt = a.create(),
                            vt = a.create(),
                            bt = a.create();
                        s.prototype[b.CIRCLE | b.HEIGHTFIELD] = s.prototype.circleHeightfield = function(t, e, i, s, n, o, l, c, u, d) {
                            var p = o.heights,
                                d = d || e.radius,
                                f = o.elementWidth,
                                y = ft,
                                g = pt,
                                m = mt,
                                v = bt,
                                b = vt,
                                x = yt,
                                _ = gt,
                                w = Math.floor((i[0] - d - l[0]) / f),
                                P = Math.ceil((i[0] + d - l[0]) / f);
                            w < 0 && (w = 0), P >= p.length && (P = p.length - 1);
                            for (var C = p[w], T = p[P], S = w; S < P; S++) p[S] < T && (T = p[S]), p[S] > C && (C = p[S]);
                            if (i[1] - d > C) return !u && 0;
                            for (var A = !1, S = w; S < P; S++) {
                                a.set(x, S * f, p[S]), a.set(_, (S + 1) * f, p[S + 1]), a.add(x, x, l), a.add(_, _, l), a.sub(b, _, x), a.rotate(b, b, Math.PI / 2), a.normalize(b, b), a.scale(g, b, -d), a.add(g, g, i), a.sub(y, g, x);
                                var E = a.dot(y, b);
                                if (g[0] >= x[0] && g[0] < _[0] && E <= 0) {
                                    if (u) return !0;
                                    A = !0, a.scale(y, b, -E), a.add(m, g, y), a.copy(v, b);
                                    var I = this.createContactEquation(n, t, o, e);
                                    a.copy(I.normalA, v), a.scale(I.contactPointB, I.normalA, -d), h(I.contactPointB, I.contactPointB, i), r(I.contactPointB, I.contactPointB, t.position), a.copy(I.contactPointA, m), a.sub(I.contactPointA, I.contactPointA, n.position), this.contactEquations.push(I), this.enableFriction && this.frictionEquations.push(this.createFrictionFromContact(I))
                                }
                            }
                            if (A = !1, d > 0)
                                for (var S = w; S <= P; S++)
                                    if (a.set(x, S * f, p[S]), a.add(x, x, l), a.sub(y, i, x), a.squaredLength(y) < Math.pow(d, 2)) {
                                        if (u) return !0;
                                        A = !0;
                                        var I = this.createContactEquation(n, t, o, e);
                                        a.copy(I.normalA, y), a.normalize(I.normalA, I.normalA), a.scale(I.contactPointB, I.normalA, -d), h(I.contactPointB, I.contactPointB, i), r(I.contactPointB, I.contactPointB, t.position), r(I.contactPointA, x, l), h(I.contactPointA, I.contactPointA, l), r(I.contactPointA, I.contactPointA, n.position), this.contactEquations.push(I), this.enableFriction && this.frictionEquations.push(this.createFrictionFromContact(I))
                                    } return A ? 1 : 0
                        };
                        var xt = a.create(),
                            _t = a.create(),
                            wt = a.create(),
                            Pt = new v({
                                vertices: [a.create(), a.create(), a.create(), a.create()]
                            });
                        s.prototype[b.BOX | b.HEIGHTFIELD] = s.prototype[b.CONVEX | b.HEIGHTFIELD] = s.prototype.convexHeightfield = function(t, e, i, s, n, o, r, h, l) {
                            var c = o.heights,
                                u = o.elementWidth,
                                d = xt,
                                p = _t,
                                f = wt,
                                y = Pt,
                                g = Math.floor((t.aabb.lowerBound[0] - r[0]) / u),
                                m = Math.ceil((t.aabb.upperBound[0] - r[0]) / u);
                            g < 0 && (g = 0), m >= c.length && (m = c.length - 1);
                            for (var v = c[g], b = c[m], x = g; x < m; x++) c[x] < b && (b = c[x]), c[x] > v && (v = c[x]);
                            if (t.aabb.lowerBound[1] > v) return !l && 0;
                            for (var _ = !1, w = 0, x = g; x < m; x++) {
                                a.set(d, x * u, c[x]), a.set(p, (x + 1) * u, c[x + 1]), a.add(d, d, r), a.add(p, p, r);
                                var P = 100;
                                a.set(f, .5 * (p[0] + d[0]), .5 * (p[1] + d[1] - 100)), a.sub(y.vertices[0], p, f), a.sub(y.vertices[1], d, f), a.copy(y.vertices[2], y.vertices[1]), a.copy(y.vertices[3], y.vertices[0]), y.vertices[2][1] -= 100, y.vertices[3][1] -= 100, w += this.convexConvex(t, e, i, s, n, y, f, 0, l)
                            }
                            return w
                        }
                    }, {
                        "../equations/ContactEquation": 21,
                        "../equations/Equation": 22,
                        "../equations/FrictionEquation": 23,
                        "../math/vec2": 30,
                        "../objects/Body": 31,
                        "../shapes/Box": 37,
                        "../shapes/Circle": 39,
                        "../shapes/Convex": 40,
                        "../shapes/Shape": 45,
                        "../utils/ContactEquationPool": 48,
                        "../utils/FrictionEquationPool": 49,
                        "../utils/TupleDictionary": 56,
                        "../utils/Utils": 57
                    }],
                    11: [function(t, e, i) {
                        function s(t) {
                            t = t || {}, this.from = t.from ? o.fromValues(t.from[0], t.from[1]) : o.create(), this.to = t.to ? o.fromValues(t.to[0], t.to[1]) : o.create(), this.checkCollisionResponse = void 0 === t.checkCollisionResponse || t.checkCollisionResponse, this.skipBackfaces = !!t.skipBackfaces, this.collisionMask = void 0 !== t.collisionMask ? t.collisionMask : -1, this.collisionGroup = void 0 !== t.collisionGroup ? t.collisionGroup : -1, this.mode = void 0 !== t.mode ? t.mode : s.ANY, this.callback = t.callback || function(t) {}, this.direction = o.create(), this.length = 1, this.update()
                        }

                        function n(t, e, i) {
                            o.sub(u, i, t);
                            var s = o.dot(u, e);
                            return o.scale(d, e, s), o.add(d, d, t), o.squaredDistance(i, d)
                        }
                        e.exports = s;
                        var o = t("../math/vec2"),
                            a = t("../collision/RaycastResult"),
                            r = t("../shapes/Shape"),
                            h = t("../collision/AABB");
                        s.prototype.constructor = s, s.CLOSEST = 1, s.ANY = 2, s.ALL = 4, s.prototype.update = function() {
                            var t = this.direction;
                            o.sub(t, this.to, this.from), this.length = o.length(t), o.normalize(t, t)
                        }, s.prototype.intersectBodies = function(t, e) {
                            for (var i = 0, s = e.length; !t.shouldStop(this) && i < s; i++) {
                                var n = e[i],
                                    o = n.getAABB();
                                (o.overlapsRay(this) >= 0 || o.containsPoint(this.from)) && this.intersectBody(t, n)
                            }
                        };
                        var l = o.create();
                        s.prototype.intersectBody = function(t, e) {
                            var i = this.checkCollisionResponse;
                            if (!i || e.collisionResponse)
                                for (var s = l, n = 0, a = e.shapes.length; n < a; n++) {
                                    var r = e.shapes[n];
                                    if ((!i || r.collisionResponse) && (0 != (this.collisionGroup & r.collisionMask) && 0 != (r.collisionGroup & this.collisionMask))) {
                                        o.rotate(s, r.position, e.angle), o.add(s, s, e.position);
                                        var h = r.angle + e.angle;
                                        if (this.intersectShape(t, r, h, s, e), t.shouldStop(this)) break
                                    }
                                }
                        }, s.prototype.intersectShape = function(t, e, i, s, o) {
                            n(this.from, this.direction, s) > e.boundingRadius * e.boundingRadius || (this._currentBody = o, this._currentShape = e, e.raycast(t, this, s, i), this._currentBody = this._currentShape = null)
                        }, s.prototype.getAABB = function(t) {
                            var e = this.to,
                                i = this.from;
                            o.set(t.lowerBound, Math.min(e[0], i[0]), Math.min(e[1], i[1])), o.set(t.upperBound, Math.max(e[0], i[0]), Math.max(e[1], i[1]))
                        };
                        var c = o.create();
                        s.prototype.reportIntersection = function(t, e, i, n) {
                            var a = this.from,
                                r = this.to,
                                h = this._currentShape,
                                l = this._currentBody;
                            if (!(this.skipBackfaces && o.dot(i, this.direction) > 0)) switch (this.mode) {
                                case s.ALL:
                                    t.set(i, h, l, e, n), this.callback(t);
                                    break;
                                case s.CLOSEST:
                                    (e < t.fraction || !t.hasHit()) && t.set(i, h, l, e, n);
                                    break;
                                case s.ANY:
                                    t.set(i, h, l, e, n)
                            }
                        };
                        var u = o.create(),
                            d = o.create()
                    }, {
                        "../collision/AABB": 7,
                        "../collision/RaycastResult": 12,
                        "../math/vec2": 30,
                        "../shapes/Shape": 45
                    }],
                    12: [function(t, e, i) {
                        function s() {
                            this.normal = n.create(), this.shape = null, this.body = null, this.faceIndex = -1, this.fraction = -1, this.isStopped = !1
                        }
                        var n = t("../math/vec2"),
                            o = t("../collision/Ray");
                        e.exports = s, s.prototype.reset = function() {
                            n.set(this.normal, 0, 0), this.shape = null, this.body = null, this.faceIndex = -1, this.fraction = -1, this.isStopped = !1
                        }, s.prototype.getHitDistance = function(t) {
                            return n.distance(t.from, t.to) * this.fraction
                        }, s.prototype.hasHit = function() {
                            return -1 !== this.fraction
                        }, s.prototype.getHitPoint = function(t, e) {
                            n.lerp(t, e.from, e.to, this.fraction)
                        }, s.prototype.stop = function() {
                            this.isStopped = !0
                        }, s.prototype.shouldStop = function(t) {
                            return this.isStopped || -1 !== this.fraction && t.mode === o.ANY
                        }, s.prototype.set = function(t, e, i, s, o) {
                            n.copy(this.normal, t), this.shape = e, this.body = i, this.fraction = s, this.faceIndex = o
                        }
                    }, {
                        "../collision/Ray": 11,
                        "../math/vec2": 30
                    }],
                    13: [function(t, e, i) {
                        function s() {
                            o.call(this, o.SAP), this.axisList = [], this.axisIndex = 0;
                            var t = this;
                            this._addBodyHandler = function(e) {
                                t.axisList.push(e.body)
                            }, this._removeBodyHandler = function(e) {
                                var i = t.axisList.indexOf(e.body); - 1 !== i && t.axisList.splice(i, 1)
                            }
                        }
                        var n = t("../utils/Utils"),
                            o = t("../collision/Broadphase");
                        e.exports = s, s.prototype = new o, s.prototype.constructor = s, s.prototype.setWorld = function(t) {
                            this.axisList.length = 0, n.appendArray(this.axisList, t.bodies), t.off("addBody", this._addBodyHandler).off("removeBody", this._removeBodyHandler), t.on("addBody", this._addBodyHandler).on("removeBody", this._removeBodyHandler), this.world = t
                        }, s.sortAxisList = function(t, e) {
                            e |= 0;
                            for (var i = 1, s = t.length; i < s; i++) {
                                for (var n = t[i], o = i - 1; o >= 0 && !(t[o].aabb.lowerBound[e] <= n.aabb.lowerBound[e]); o--) t[o + 1] = t[o];
                                t[o + 1] = n
                            }
                            return t
                        }, s.prototype.sortList = function() {
                            var t = this.axisList,
                                e = this.axisIndex;
                            s.sortAxisList(t, e)
                        }, s.prototype.getCollisionPairs = function(t) {
                            var e = this.axisList,
                                i = this.result,
                                s = this.axisIndex;
                            i.length = 0;
                            for (var n = e.length; n--;) {
                                var a = e[n];
                                a.aabbNeedsUpdate && a.updateAABB()
                            }
                            this.sortList();
                            for (var r = 0, h = 0 | e.length; r !== h; r++)
                                for (var l = e[r], c = r + 1; c < h; c++) {
                                    var u = e[c],
                                        d = u.aabb.lowerBound[s] <= l.aabb.upperBound[s];
                                    if (!d) break;
                                    o.canCollide(l, u) && this.boundingVolumeCheck(l, u) && i.push(l, u)
                                }
                            return i
                        }, s.prototype.aabbQuery = function(t, e, i) {
                            i = i || [], this.sortList();
                            var s = this.axisIndex,
                                n = "x";
                            1 === s && (n = "y"), 2 === s && (n = "z");
                            for (var o = this.axisList, a = e.lowerBound[n], r = e.upperBound[n], h = 0; h < o.length; h++) {
                                var l = o[h];
                                l.aabbNeedsUpdate && l.updateAABB(), l.aabb.overlaps(e) && i.push(l)
                            }
                            return i
                        }
                    }, {
                        "../collision/Broadphase": 8,
                        "../utils/Utils": 57
                    }],
                    14: [function(t, e, i) {
                        function s(t, e, i, s) {
                            this.type = i, s = n.defaults(s, {
                                collideConnected: !0,
                                wakeUpBodies: !0
                            }), this.equations = [], this.bodyA = t, this.bodyB = e, this.collideConnected = s.collideConnected, s.wakeUpBodies && (t && t.wakeUp(), e && e.wakeUp())
                        }
                        e.exports = s;
                        var n = t("../utils/Utils");
                        s.prototype.update = function() {
                            throw new Error("method update() not implmemented in this Constraint subclass!")
                        }, s.DISTANCE = 1, s.GEAR = 2, s.LOCK = 3, s.PRISMATIC = 4, s.REVOLUTE = 5, s.prototype.setStiffness = function(t) {
                            for (var e = this.equations, i = 0; i !== e.length; i++) {
                                var s = e[i];
                                s.stiffness = t, s.needsUpdate = !0
                            }
                        }, s.prototype.setRelaxation = function(t) {
                            for (var e = this.equations, i = 0; i !== e.length; i++) {
                                var s = e[i];
                                s.relaxation = t, s.needsUpdate = !0
                            }
                        }
                    }, {
                        "../utils/Utils": 57
                    }],
                    15: [function(t, e, i) {
                        function s(t, e, i) {
                            i = r.defaults(i, {
                                localAnchorA: [0, 0],
                                localAnchorB: [0, 0]
                            }), n.call(this, t, e, n.DISTANCE, i), this.localAnchorA = a.fromValues(i.localAnchorA[0], i.localAnchorA[1]), this.localAnchorB = a.fromValues(i.localAnchorB[0], i.localAnchorB[1]);
                            var s = this.localAnchorA,
                                h = this.localAnchorB;
                            if (this.distance = 0, "number" == typeof i.distance) this.distance = i.distance;
                            else {
                                var l = a.create(),
                                    c = a.create(),
                                    u = a.create();
                                a.rotate(l, s, t.angle), a.rotate(c, h, e.angle), a.add(u, e.position, c), a.sub(u, u, l), a.sub(u, u, t.position), this.distance = a.length(u)
                            }
                            var d;
                            d = void 0 === i.maxForce ? Number.MAX_VALUE : i.maxForce;
                            var p = new o(t, e, -d, d);
                            this.equations = [p], this.maxForce = d;
                            var u = a.create(),
                                f = a.create(),
                                y = a.create(),
                                g = this;
                            p.computeGq = function() {
                                var t = this.bodyA,
                                    e = this.bodyB,
                                    i = t.position,
                                    n = e.position;
                                return a.rotate(f, s, t.angle), a.rotate(y, h, e.angle), a.add(u, n, y), a.sub(u, u, f), a.sub(u, u, i), a.length(u) - g.distance
                            }, this.setMaxForce(d), this.upperLimitEnabled = !1, this.upperLimit = 1, this.lowerLimitEnabled = !1, this.lowerLimit = 0, this.position = 0
                        }
                        var n = t("./Constraint"),
                            o = t("../equations/Equation"),
                            a = t("../math/vec2"),
                            r = t("../utils/Utils");
                        e.exports = s, s.prototype = new n, s.prototype.constructor = s;
                        var h = a.create(),
                            l = a.create(),
                            c = a.create();
                        s.prototype.update = function() {
                            var t = this.equations[0],
                                e = this.bodyA,
                                i = this.bodyB,
                                s = this.distance,
                                n = e.position,
                                o = i.position,
                                r = this.equations[0],
                                u = t.G;
                            a.rotate(l, this.localAnchorA, e.angle), a.rotate(c, this.localAnchorB, i.angle), a.add(h, o, c), a.sub(h, h, l), a.sub(h, h, n), this.position = a.length(h);
                            var d = !1;
                            if (this.upperLimitEnabled && this.position > this.upperLimit && (r.maxForce = 0, r.minForce = -this.maxForce, this.distance = this.upperLimit, d = !0), this.lowerLimitEnabled && this.position < this.lowerLimit && (r.maxForce = this.maxForce, r.minForce = 0, this.distance = this.lowerLimit, d = !0), (this.lowerLimitEnabled || this.upperLimitEnabled) && !d) return void(r.enabled = !1);
                            r.enabled = !0, a.normalize(h, h);
                            var p = a.crossLength(l, h),
                                f = a.crossLength(c, h);
                            u[0] = -h[0], u[1] = -h[1], u[2] = -p, u[3] = h[0], u[4] = h[1], u[5] = f
                        }, s.prototype.setMaxForce = function(t) {
                            var e = this.equations[0];
                            e.minForce = -t, e.maxForce = t
                        }, s.prototype.getMaxForce = function() {
                            return this.equations[0].maxForce
                        }
                    }, {
                        "../equations/Equation": 22,
                        "../math/vec2": 30,
                        "../utils/Utils": 57,
                        "./Constraint": 14
                    }],
                    16: [function(t, e, i) {
                        function s(t, e, i) {
                            i = i || {}, n.call(this, t, e, n.GEAR, i), this.ratio = void 0 !== i.ratio ? i.ratio : 1, this.angle = void 0 !== i.angle ? i.angle : e.angle - this.ratio * t.angle, i.angle = this.angle, i.ratio = this.ratio, this.equations = [new a(t, e, i)], void 0 !== i.maxTorque && this.setMaxTorque(i.maxTorque)
                        }
                        var n = t("./Constraint"),
                            o = t("../equations/Equation"),
                            a = t("../equations/AngleLockEquation"),
                            r = t("../math/vec2");
                        e.exports = s, s.prototype = new n, s.prototype.constructor = s, s.prototype.update = function() {
                            var t = this.equations[0];
                            t.ratio !== this.ratio && t.setRatio(this.ratio), t.angle = this.angle
                        }, s.prototype.setMaxTorque = function(t) {
                            this.equations[0].setMaxTorque(t)
                        }, s.prototype.getMaxTorque = function(t) {
                            return this.equations[0].maxForce
                        }
                    }, {
                        "../equations/AngleLockEquation": 20,
                        "../equations/Equation": 22,
                        "../math/vec2": 30,
                        "./Constraint": 14
                    }],
                    17: [function(t, e, i) {
                        function s(t, e, i) {
                            i = i || {}, n.call(this, t, e, n.LOCK, i);
                            var s = void 0 === i.maxForce ? Number.MAX_VALUE : i.maxForce,
                                r = i.localAngleB || 0,
                                h = new a(t, e, -s, s),
                                l = new a(t, e, -s, s),
                                c = new a(t, e, -s, s),
                                u = o.create(),
                                d = o.create(),
                                p = this;
                            h.computeGq = function() {
                                return o.rotate(u, p.localOffsetB, t.angle), o.sub(d, e.position, t.position), o.sub(d, d, u), d[0]
                            }, l.computeGq = function() {
                                return o.rotate(u, p.localOffsetB, t.angle), o.sub(d, e.position, t.position), o.sub(d, d, u), d[1]
                            };
                            var f = o.create(),
                                y = o.create();
                            c.computeGq = function() {
                                return o.rotate(f, p.localOffsetB, e.angle - p.localAngleB), o.scale(f, f, -1), o.sub(d, t.position, e.position), o.add(d, d, f), o.rotate(y, f, -Math.PI / 2), o.normalize(y, y), o.dot(d, y)
                            }, this.localOffsetB = o.create(), i.localOffsetB ? o.copy(this.localOffsetB, i.localOffsetB) : (o.sub(this.localOffsetB, e.position, t.position), o.rotate(this.localOffsetB, this.localOffsetB, -t.angle)), this.localAngleB = 0, "number" == typeof i.localAngleB ? this.localAngleB = i.localAngleB : this.localAngleB = e.angle - t.angle, this.equations.push(h, l, c), this.setMaxForce(s)
                        }
                        var n = t("./Constraint"),
                            o = t("../math/vec2"),
                            a = t("../equations/Equation");
                        e.exports = s, s.prototype = new n, s.prototype.constructor = s, s.prototype.setMaxForce = function(t) {
                            for (var e = this.equations, i = 0; i < this.equations.length; i++) e[i].maxForce = t, e[i].minForce = -t
                        }, s.prototype.getMaxForce = function() {
                            return this.equations[0].maxForce
                        };
                        var r = o.create(),
                            h = o.create(),
                            l = o.create(),
                            c = o.fromValues(1, 0),
                            u = o.fromValues(0, 1);
                        s.prototype.update = function() {
                            var t = this.equations[0],
                                e = this.equations[1],
                                i = this.equations[2],
                                s = this.bodyA,
                                n = this.bodyB;
                            o.rotate(r, this.localOffsetB, s.angle), o.rotate(h, this.localOffsetB, n.angle - this.localAngleB), o.scale(h, h, -1), o.rotate(l, h, Math.PI / 2), o.normalize(l, l), t.G[0] = -1, t.G[1] = 0, t.G[2] = -o.crossLength(r, c), t.G[3] = 1, e.G[0] = 0, e.G[1] = -1, e.G[2] = -o.crossLength(r, u), e.G[4] = 1, i.G[0] = -l[0], i.G[1] = -l[1], i.G[3] = l[0], i.G[4] = l[1], i.G[5] = o.crossLength(h, l)
                        }
                    }, {
                        "../equations/Equation": 22,
                        "../math/vec2": 30,
                        "./Constraint": 14
                    }],
                    18: [function(t, e, i) {
                        function s(t, e, i) {
                            i = i || {}, n.call(this, t, e, n.PRISMATIC, i);
                            var s = r.fromValues(0, 0),
                                l = r.fromValues(1, 0),
                                c = r.fromValues(0, 0);
                            i.localAnchorA && r.copy(s, i.localAnchorA), i.localAxisA && r.copy(l, i.localAxisA), i.localAnchorB && r.copy(c, i.localAnchorB), this.localAnchorA = s, this.localAnchorB = c, this.localAxisA = l;
                            var u = this.maxForce = void 0 !== i.maxForce ? i.maxForce : Number.MAX_VALUE,
                                d = new a(t, e, -u, u),
                                p = new r.create,
                                f = new r.create,
                                y = new r.create,
                                g = new r.create;
                            if (d.computeGq = function() {
                                    return r.dot(y, g)
                                }, d.updateJacobian = function() {
                                    var i = this.G,
                                        n = t.position,
                                        o = e.position;
                                    r.rotate(p, s, t.angle), r.rotate(f, c, e.angle), r.add(y, o, f), r.sub(y, y, n), r.sub(y, y, p), r.rotate(g, l, t.angle + Math.PI / 2), i[0] = -g[0], i[1] = -g[1], i[2] = -r.crossLength(p, g) + r.crossLength(g, y), i[3] = g[0], i[4] = g[1], i[5] = r.crossLength(f, g)
                                }, this.equations.push(d), !i.disableRotationalLock) {
                                var m = new h(t, e, -u, u);
                                this.equations.push(m)
                            }
                            this.position = 0, this.velocity = 0, this.lowerLimitEnabled = void 0 !== i.lowerLimit, this.upperLimitEnabled = void 0 !== i.upperLimit, this.lowerLimit = void 0 !== i.lowerLimit ? i.lowerLimit : 0, this.upperLimit = void 0 !== i.upperLimit ? i.upperLimit : 1, this.upperLimitEquation = new o(t, e), this.lowerLimitEquation = new o(t, e), this.upperLimitEquation.minForce = this.lowerLimitEquation.minForce = 0, this.upperLimitEquation.maxForce = this.lowerLimitEquation.maxForce = u, this.motorEquation = new a(t, e), this.motorEnabled = !1, this.motorSpeed = 0;
                            var v = this,
                                b = this.motorEquation,
                                x = b.computeGW;
                            b.computeGq = function() {
                                return 0
                            }, b.computeGW = function() {
                                var t = this.G,
                                    e = this.bodyA,
                                    i = this.bodyB,
                                    s = e.velocity,
                                    n = i.velocity,
                                    o = e.angularVelocity,
                                    a = i.angularVelocity;
                                return this.gmult(t, s, o, n, a) + v.motorSpeed
                            }
                        }
                        var n = t("./Constraint"),
                            o = t("../equations/ContactEquation"),
                            a = t("../equations/Equation"),
                            r = t("../math/vec2"),
                            h = t("../equations/RotationalLockEquation");
                        e.exports = s, s.prototype = new n, s.prototype.constructor = s;
                        var l = r.create(),
                            c = r.create(),
                            u = r.create(),
                            d = r.create(),
                            p = r.create(),
                            f = r.create();
                        s.prototype.update = function() {
                            var t = this.equations,
                                e = t[0],
                                i = this.upperLimit,
                                s = this.lowerLimit,
                                n = this.upperLimitEquation,
                                o = this.lowerLimitEquation,
                                a = this.bodyA,
                                h = this.bodyB,
                                y = this.localAxisA,
                                g = this.localAnchorA,
                                m = this.localAnchorB;
                            e.updateJacobian(), r.rotate(l, y, a.angle), r.rotate(d, g, a.angle), r.add(c, d, a.position), r.rotate(p, m, h.angle), r.add(u, p, h.position);
                            var v = this.position = r.dot(u, l) - r.dot(c, l);
                            if (this.motorEnabled) {
                                var b = this.motorEquation.G;
                                b[0] = l[0], b[1] = l[1], b[2] = r.crossLength(l, p), b[3] = -l[0], b[4] = -l[1], b[5] = -r.crossLength(l, d)
                            }
                            if (this.upperLimitEnabled && v > i) r.scale(n.normalA, l, -1), r.sub(n.contactPointA, c, a.position), r.sub(n.contactPointB, u, h.position), r.scale(f, l, i), r.add(n.contactPointA, n.contactPointA, f), -1 === t.indexOf(n) && t.push(n);
                            else {
                                var x = t.indexOf(n); - 1 !== x && t.splice(x, 1)
                            }
                            if (this.lowerLimitEnabled && v < s) r.scale(o.normalA, l, 1), r.sub(o.contactPointA, c, a.position), r.sub(o.contactPointB, u, h.position), r.scale(f, l, s), r.sub(o.contactPointB, o.contactPointB, f), -1 === t.indexOf(o) && t.push(o);
                            else {
                                var x = t.indexOf(o); - 1 !== x && t.splice(x, 1)
                            }
                        }, s.prototype.enableMotor = function() {
                            this.motorEnabled || (this.equations.push(this.motorEquation), this.motorEnabled = !0)
                        }, s.prototype.disableMotor = function() {
                            if (this.motorEnabled) {
                                var t = this.equations.indexOf(this.motorEquation);
                                this.equations.splice(t, 1), this.motorEnabled = !1
                            }
                        }, s.prototype.setLimits = function(t, e) {
                            "number" == typeof t ? (this.lowerLimit = t, this.lowerLimitEnabled = !0) : (this.lowerLimit = t, this.lowerLimitEnabled = !1), "number" == typeof e ? (this.upperLimit = e, this.upperLimitEnabled = !0) : (this.upperLimit = e, this.upperLimitEnabled = !1)
                        }
                    }, {
                        "../equations/ContactEquation": 21,
                        "../equations/Equation": 22,
                        "../equations/RotationalLockEquation": 24,
                        "../math/vec2": 30,
                        "./Constraint": 14
                    }],
                    19: [function(t, e, i) {
                        function s(t, e, i) {
                            i = i || {}, n.call(this, t, e, n.REVOLUTE, i);
                            var s = this.maxForce = void 0 !== i.maxForce ? i.maxForce : Number.MAX_VALUE;
                            this.pivotA = h.create(), this.pivotB = h.create(), i.worldPivot ? (h.sub(this.pivotA, i.worldPivot, t.position), h.sub(this.pivotB, i.worldPivot, e.position), h.rotate(this.pivotA, this.pivotA, -t.angle), h.rotate(this.pivotB, this.pivotB, -e.angle)) : (h.copy(this.pivotA, i.localPivotA), h.copy(this.pivotB, i.localPivotB));
                            var f = this.equations = [new o(t, e, -s, s), new o(t, e, -s, s)],
                                y = f[0],
                                g = f[1],
                                m = this;
                            y.computeGq = function() {
                                return h.rotate(l, m.pivotA, t.angle), h.rotate(c, m.pivotB, e.angle), h.add(p, e.position, c), h.sub(p, p, t.position), h.sub(p, p, l), h.dot(p, u)
                            }, g.computeGq = function() {
                                return h.rotate(l, m.pivotA, t.angle), h.rotate(c, m.pivotB, e.angle), h.add(p, e.position, c), h.sub(p, p, t.position), h.sub(p, p, l), h.dot(p, d)
                            }, g.minForce = y.minForce = -s, g.maxForce = y.maxForce = s, this.motorEquation = new a(t, e), this.motorEnabled = !1, this.angle = 0, this.lowerLimitEnabled = !1, this.upperLimitEnabled = !1, this.lowerLimit = 0, this.upperLimit = 0, this.upperLimitEquation = new r(t, e), this.lowerLimitEquation = new r(t, e), this.upperLimitEquation.minForce = 0, this.lowerLimitEquation.maxForce = 0
                        }
                        var n = t("./Constraint"),
                            o = t("../equations/Equation"),
                            a = t("../equations/RotationalVelocityEquation"),
                            r = t("../equations/RotationalLockEquation"),
                            h = t("../math/vec2");
                        e.exports = s;
                        var l = h.create(),
                            c = h.create(),
                            u = h.fromValues(1, 0),
                            d = h.fromValues(0, 1),
                            p = h.create();
                        s.prototype = new n, s.prototype.constructor = s, s.prototype.setLimits = function(t, e) {
                            "number" == typeof t ? (this.lowerLimit = t, this.lowerLimitEnabled = !0) : (this.lowerLimit = t, this.lowerLimitEnabled = !1), "number" == typeof e ? (this.upperLimit = e, this.upperLimitEnabled = !0) : (this.upperLimit = e, this.upperLimitEnabled = !1)
                        }, s.prototype.update = function() {
                            var t = this.bodyA,
                                e = this.bodyB,
                                i = this.pivotA,
                                s = this.pivotB,
                                n = this.equations,
                                o = n[0],
                                a = n[1],
                                r = n[0],
                                p = n[1],
                                f = this.upperLimit,
                                y = this.lowerLimit,
                                g = this.upperLimitEquation,
                                m = this.lowerLimitEquation,
                                v = this.angle = e.angle - t.angle;
                            if (this.upperLimitEnabled && v > f) g.angle = f, -1 === n.indexOf(g) && n.push(g);
                            else {
                                var b = n.indexOf(g); - 1 !== b && n.splice(b, 1)
                            }
                            if (this.lowerLimitEnabled && v < y) m.angle = y, -1 === n.indexOf(m) && n.push(m);
                            else {
                                var b = n.indexOf(m); - 1 !== b && n.splice(b, 1)
                            }
                            h.rotate(l, i, t.angle), h.rotate(c, s, e.angle), r.G[0] = -1, r.G[1] = 0, r.G[2] = -h.crossLength(l, u), r.G[3] = 1, r.G[4] = 0, r.G[5] = h.crossLength(c, u), p.G[0] = 0, p.G[1] = -1, p.G[2] = -h.crossLength(l, d), p.G[3] = 0, p.G[4] = 1, p.G[5] = h.crossLength(c, d)
                        }, s.prototype.enableMotor = function() {
                            this.motorEnabled || (this.equations.push(this.motorEquation), this.motorEnabled = !0)
                        }, s.prototype.disableMotor = function() {
                            if (this.motorEnabled) {
                                var t = this.equations.indexOf(this.motorEquation);
                                this.equations.splice(t, 1), this.motorEnabled = !1
                            }
                        }, s.prototype.motorIsEnabled = function() {
                            return !!this.motorEnabled
                        }, s.prototype.setMotorSpeed = function(t) {
                            if (this.motorEnabled) {
                                var e = this.equations.indexOf(this.motorEquation);
                                this.equations[e].relativeVelocity = t
                            }
                        }, s.prototype.getMotorSpeed = function() {
                            return !!this.motorEnabled && this.motorEquation.relativeVelocity
                        }
                    }, {
                        "../equations/Equation": 22,
                        "../equations/RotationalLockEquation": 24,
                        "../equations/RotationalVelocityEquation": 25,
                        "../math/vec2": 30,
                        "./Constraint": 14
                    }],
                    20: [function(t, e, i) {
                        function s(t, e, i) {
                            i = i || {}, n.call(this, t, e, -Number.MAX_VALUE, Number.MAX_VALUE), this.angle = i.angle || 0, this.ratio = "number" == typeof i.ratio ? i.ratio : 1, this.setRatio(this.ratio)
                        }
                        var n = t("./Equation"),
                            o = t("../math/vec2");
                        e.exports = s, s.prototype = new n, s.prototype.constructor = s, s.prototype.computeGq = function() {
                            return this.ratio * this.bodyA.angle - this.bodyB.angle + this.angle
                        }, s.prototype.setRatio = function(t) {
                            var e = this.G;
                            e[2] = t, e[5] = -1, this.ratio = t
                        }, s.prototype.setMaxTorque = function(t) {
                            this.maxForce = t, this.minForce = -t
                        }
                    }, {
                        "../math/vec2": 30,
                        "./Equation": 22
                    }],
                    21: [function(t, e, i) {
                        function s(t, e) {
                            n.call(this, t, e, 0, Number.MAX_VALUE), this.contactPointA = o.create(), this.penetrationVec = o.create(), this.contactPointB = o.create(), this.normalA = o.create(), this.restitution = 0, this.firstImpact = !1, this.shapeA = null, this.shapeB = null
                        }
                        var n = t("./Equation"),
                            o = t("../math/vec2");
                        e.exports = s, s.prototype = new n, s.prototype.constructor = s, s.prototype.computeB = function(t, e, i) {
                            var s = this.bodyA,
                                n = this.bodyB,
                                a = this.contactPointA,
                                r = this.contactPointB,
                                h = s.position,
                                l = n.position,
                                c = this.penetrationVec,
                                u = this.normalA,
                                d = this.G,
                                p = o.crossLength(a, u),
                                f = o.crossLength(r, u);
                            d[0] = -u[0], d[1] = -u[1], d[2] = -p, d[3] = u[0], d[4] = u[1], d[5] = f, o.add(c, l, r), o.sub(c, c, h), o.sub(c, c, a);
                            var y, g;
                            return this.firstImpact && 0 !== this.restitution ? (g = 0, y = 1 / e * (1 + this.restitution) * this.computeGW()) : (g = o.dot(u, c) + this.offset, y = this.computeGW()), -g * t - y * e - i * this.computeGiMf()
                        }
                    }, {
                        "../math/vec2": 30,
                        "./Equation": 22
                    }],
                    22: [function(t, e, i) {
                        function s(t, e, i, n) {
                            this.minForce = void 0 === i ? -Number.MAX_VALUE : i, this.maxForce = void 0 === n ? Number.MAX_VALUE : n, this.bodyA = t, this.bodyB = e, this.stiffness = s.DEFAULT_STIFFNESS, this.relaxation = s.DEFAULT_RELAXATION, this.G = new o.ARRAY_TYPE(6);
                            for (var a = 0; a < 6; a++) this.G[a] = 0;
                            this.offset = 0, this.a = 0, this.b = 0, this.epsilon = 0, this.timeStep = 1 / 60, this.needsUpdate = !0, this.multiplier = 0, this.relativeVelocity = 0, this.enabled = !0
                        }
                        e.exports = s;
                        var n = t("../math/vec2"),
                            o = t("../utils/Utils"),
                            a = t("../objects/Body");
                        s.prototype.constructor = s, s.DEFAULT_STIFFNESS = 1e6, s.DEFAULT_RELAXATION = 4, s.prototype.update = function() {
                            var t = this.stiffness,
                                e = this.relaxation,
                                i = this.timeStep;
                            this.a = 4 / (i * (1 + 4 * e)), this.b = 4 * e / (1 + 4 * e), this.epsilon = 4 / (i * i * t * (1 + 4 * e)), this.needsUpdate = !1
                        }, s.prototype.gmult = function(t, e, i, s, n) {
                            return t[0] * e[0] + t[1] * e[1] + t[2] * i + t[3] * s[0] + t[4] * s[1] + t[5] * n
                        }, s.prototype.computeB = function(t, e, i) {
                            var s = this.computeGW();
                            return -this.computeGq() * t - s * e - this.computeGiMf() * i
                        };
                        var r = n.create(),
                            h = n.create();
                        s.prototype.computeGq = function() {
                            var t = this.G,
                                e = this.bodyA,
                                i = this.bodyB,
                                s = e.position,
                                n = i.position,
                                o = e.angle,
                                a = i.angle;
                            return this.gmult(t, r, o, h, a) + this.offset
                        }, s.prototype.computeGW = function() {
                            var t = this.G,
                                e = this.bodyA,
                                i = this.bodyB,
                                s = e.velocity,
                                n = i.velocity,
                                o = e.angularVelocity,
                                a = i.angularVelocity;
                            return this.gmult(t, s, o, n, a) + this.relativeVelocity
                        }, s.prototype.computeGWlambda = function() {
                            var t = this.G,
                                e = this.bodyA,
                                i = this.bodyB,
                                s = e.vlambda,
                                n = i.vlambda,
                                o = e.wlambda,
                                a = i.wlambda;
                            return this.gmult(t, s, o, n, a)
                        };
                        var l = n.create(),
                            c = n.create();
                        s.prototype.computeGiMf = function() {
                            var t = this.bodyA,
                                e = this.bodyB,
                                i = t.force,
                                s = t.angularForce,
                                o = e.force,
                                a = e.angularForce,
                                r = t.invMassSolve,
                                h = e.invMassSolve,
                                u = t.invInertiaSolve,
                                d = e.invInertiaSolve,
                                p = this.G;
                            return n.scale(l, i, r), n.multiply(l, t.massMultiplier, l), n.scale(c, o, h), n.multiply(c, e.massMultiplier, c), this.gmult(p, l, s * u, c, a * d)
                        }, s.prototype.computeGiMGt = function() {
                            var t = this.bodyA,
                                e = this.bodyB,
                                i = t.invMassSolve,
                                s = e.invMassSolve,
                                n = t.invInertiaSolve,
                                o = e.invInertiaSolve,
                                a = this.G;
                            return a[0] * a[0] * i * t.massMultiplier[0] + a[1] * a[1] * i * t.massMultiplier[1] + a[2] * a[2] * n + a[3] * a[3] * s * e.massMultiplier[0] + a[4] * a[4] * s * e.massMultiplier[1] + a[5] * a[5] * o
                        };
                        var u = n.create(),
                            d = n.create(),
                            p = n.create(),
                            f = n.create(),
                            y = n.create(),
                            g = n.create();
                        s.prototype.addToWlambda = function(t) {
                            var e = this.bodyA,
                                i = this.bodyB,
                                s = u,
                                o = d,
                                a = p,
                                r = f,
                                h = y,
                                l = e.invMassSolve,
                                c = i.invMassSolve,
                                m = e.invInertiaSolve,
                                v = i.invInertiaSolve,
                                b = g,
                                x = this.G;
                            o[0] = x[0], o[1] = x[1], a[0] = x[3], a[1] = x[4], n.scale(s, o, l * t), n.multiply(s, s, e.massMultiplier), n.add(e.vlambda, e.vlambda, s), e.wlambda += m * x[2] * t, n.scale(s, a, c * t), n.multiply(s, s, i.massMultiplier), n.add(i.vlambda, i.vlambda, s), i.wlambda += v * x[5] * t
                        }, s.prototype.computeInvC = function(t) {
                            return 1 / (this.computeGiMGt() + t)
                        }
                    }, {
                        "../math/vec2": 30,
                        "../objects/Body": 31,
                        "../utils/Utils": 57
                    }],
                    23: [function(t, e, i) {
                        function s(t, e, i) {
                            o.call(this, t, e, -i, i), this.contactPointA = n.create(), this.contactPointB = n.create(), this.t = n.create(), this.contactEquations = [], this.shapeA = null, this.shapeB = null, this.frictionCoefficient = .3
                        }
                        var n = t("../math/vec2"),
                            o = t("./Equation"),
                            a = t("../utils/Utils");
                        e.exports = s, s.prototype = new o, s.prototype.constructor = s, s.prototype.setSlipForce = function(t) {
                            this.maxForce = t, this.minForce = -t
                        }, s.prototype.getSlipForce = function() {
                            return this.maxForce
                        }, s.prototype.computeB = function(t, e, i) {
                            var s = this.bodyA,
                                o = this.bodyB,
                                a = this.contactPointA,
                                r = this.contactPointB,
                                h = this.t,
                                l = this.G;
                            return l[0] = -h[0], l[1] = -h[1], l[2] = -n.crossLength(a, h), l[3] = h[0], l[4] = h[1], l[5] = n.crossLength(r, h), -this.computeGW() * e - i * this.computeGiMf()
                        }
                    }, {
                        "../math/vec2": 30,
                        "../utils/Utils": 57,
                        "./Equation": 22
                    }],
                    24: [function(t, e, i) {
                        function s(t, e, i) {
                            i = i || {}, n.call(this, t, e, -Number.MAX_VALUE, Number.MAX_VALUE), this.angle = i.angle || 0;
                            var s = this.G;
                            s[2] = 1, s[5] = -1
                        }
                        var n = t("./Equation"),
                            o = t("../math/vec2");
                        e.exports = s, s.prototype = new n, s.prototype.constructor = s;
                        var a = o.create(),
                            r = o.create(),
                            h = o.fromValues(1, 0),
                            l = o.fromValues(0, 1);
                        s.prototype.computeGq = function() {
                            return o.rotate(a, h, this.bodyA.angle + this.angle), o.rotate(r, l, this.bodyB.angle), o.dot(a, r)
                        }
                    }, {
                        "../math/vec2": 30,
                        "./Equation": 22
                    }],
                    25: [function(t, e, i) {
                        function s(t, e) {
                            n.call(this, t, e, -Number.MAX_VALUE, Number.MAX_VALUE), this.relativeVelocity = 1, this.ratio = 1
                        }
                        var n = t("./Equation"),
                            o = t("../math/vec2");
                        e.exports = s, s.prototype = new n, s.prototype.constructor = s, s.prototype.computeB = function(t, e, i) {
                            var s = this.G;
                            s[2] = -1, s[5] = this.ratio;
                            var n = this.computeGiMf();
                            return -this.computeGW() * e - i * n
                        }
                    }, {
                        "../math/vec2": 30,
                        "./Equation": 22
                    }],
                    26: [function(t, e, i) {
                        var s = function() {};
                        e.exports = s, s.prototype = {
                            constructor: s,
                            on: function(t, e, i) {
                                e.context = i || this, void 0 === this._listeners && (this._listeners = {});
                                var s = this._listeners;
                                return void 0 === s[t] && (s[t] = []), -1 === s[t].indexOf(e) && s[t].push(e), this
                            },
                            has: function(t, e) {
                                if (void 0 === this._listeners) return !1;
                                var i = this._listeners;
                                if (e) {
                                    if (void 0 !== i[t] && -1 !== i[t].indexOf(e)) return !0
                                } else if (void 0 !== i[t]) return !0;
                                return !1
                            },
                            off: function(t, e) {
                                if (void 0 === this._listeners) return this;
                                var i = this._listeners,
                                    s = i[t].indexOf(e);
                                return -1 !== s && i[t].splice(s, 1), this
                            },
                            emit: function(t) {
                                if (void 0 === this._listeners) return this;
                                var e = this._listeners,
                                    i = e[t.type];
                                if (void 0 !== i) {
                                    t.target = this;
                                    for (var s = 0, n = i.length; s < n; s++) {
                                        var o = i[s];
                                        o.call(o.context, t)
                                    }
                                }
                                return this
                            }
                        }
                    }, {}],
                    27: [function(t, e, i) {
                        function s(t, e, i) {
                            if (i = i || {}, !(t instanceof n && e instanceof n)) throw new Error("First two arguments must be Material instances.");
                            this.id = s.idCounter++, this.materialA = t, this.materialB = e, this.friction = void 0 !== i.friction ? Number(i.friction) : .3, this.restitution = void 0 !== i.restitution ? Number(i.restitution) : 0, this.stiffness = void 0 !== i.stiffness ? Number(i.stiffness) : o.DEFAULT_STIFFNESS, this.relaxation = void 0 !== i.relaxation ? Number(i.relaxation) : o.DEFAULT_RELAXATION, this.frictionStiffness = void 0 !== i.frictionStiffness ? Number(i.frictionStiffness) : o.DEFAULT_STIFFNESS, this.frictionRelaxation = void 0 !== i.frictionRelaxation ? Number(i.frictionRelaxation) : o.DEFAULT_RELAXATION, this.surfaceVelocity = void 0 !== i.surfaceVelocity ? Number(i.surfaceVelocity) : 0, this.contactSkinSize = .005
                        }
                        var n = t("./Material"),
                            o = t("../equations/Equation");
                        e.exports = s, s.idCounter = 0
                    }, {
                        "../equations/Equation": 22,
                        "./Material": 28
                    }],
                    28: [function(t, e, i) {
                        function s(t) {
                            this.id = t || s.idCounter++
                        }
                        e.exports = s, s.idCounter = 0
                    }, {}],
                    29: [function(t, e, i) {
                        var s = {};
                        s.GetArea = function(t) {
                            if (t.length < 6) return 0;
                            for (var e = t.length - 2, i = 0, s = 0; s < e; s += 2) i += (t[s + 2] - t[s]) * (t[s + 1] + t[s + 3]);
                            return .5 * -(i += (t[0] - t[e]) * (t[e + 1] + t[1]))
                        }, s.Triangulate = function(t) {
                            var e = t.length >> 1;
                            if (e < 3) return [];
                            for (var i = [], n = [], o = 0; o < e; o++) n.push(o);
                            for (var o = 0, a = e; a > 3;) {
                                var r = n[(o + 0) % a],
                                    h = n[(o + 1) % a],
                                    l = n[(o + 2) % a],
                                    c = t[2 * r],
                                    u = t[2 * r + 1],
                                    d = t[2 * h],
                                    p = t[2 * h + 1],
                                    f = t[2 * l],
                                    y = t[2 * l + 1],
                                    g = !1;
                                if (s._convex(c, u, d, p, f, y)) {
                                    g = !0;
                                    for (var m = 0; m < a; m++) {
                                        var v = n[m];
                                        if (v != r && v != h && v != l && s._PointInTriangle(t[2 * v], t[2 * v + 1], c, u, d, p, f, y)) {
                                            g = !1;
                                            break
                                        }
                                    }
                                }
                                if (g) i.push(r, h, l), n.splice((o + 1) % a, 1), a--, o = 0;
                                else if (o++ > 3 * a) break
                            }
                            return i.push(n[0], n[1], n[2]), i
                        }, s._PointInTriangle = function(t, e, i, s, n, o, a, r) {
                            var h = a - i,
                                l = r - s,
                                c = n - i,
                                u = o - s,
                                d = t - i,
                                p = e - s,
                                f = h * h + l * l,
                                y = h * c + l * u,
                                g = h * d + l * p,
                                m = c * c + u * u,
                                v = c * d + u * p,
                                b = 1 / (f * m - y * y),
                                x = (m * g - y * v) * b,
                                _ = (f * v - y * g) * b;
                            return x >= 0 && _ >= 0 && x + _ < 1
                        }, s._convex = function(t, e, i, s, n, o) {
                            return (e - s) * (n - i) + (i - t) * (o - s) >= 0
                        }, e.exports = s
                    }, {}],
                    30: [function(t, e, i) {
                        var s = e.exports = {},
                            n = t("../utils/Utils");
                        s.crossLength = function(t, e) {
                            return t[0] * e[1] - t[1] * e[0]
                        }, s.crossVZ = function(t, e, i) {
                            return s.rotate(t, e, -Math.PI / 2), s.scale(t, t, i), t
                        }, s.crossZV = function(t, e, i) {
                            return s.rotate(t, i, Math.PI / 2), s.scale(t, t, e), t
                        }, s.rotate = function(t, e, i) {
                            if (0 !== i) {
                                var s = Math.cos(i),
                                    n = Math.sin(i),
                                    o = e[0],
                                    a = e[1];
                                t[0] = s * o - n * a, t[1] = n * o + s * a
                            } else t[0] = e[0], t[1] = e[1]
                        }, s.rotate90cw = function(t, e) {
                            var i = e[0],
                                s = e[1];
                            t[0] = s, t[1] = -i
                        }, s.toLocalFrame = function(t, e, i, n) {
                            s.copy(t, e), s.sub(t, t, i), s.rotate(t, t, -n)
                        }, s.toGlobalFrame = function(t, e, i, n) {
                            s.copy(t, e), s.rotate(t, t, n), s.add(t, t, i)
                        }, s.vectorToLocalFrame = function(t, e, i) {
                            s.rotate(t, e, -i)
                        }, s.vectorToGlobalFrame = function(t, e, i) {
                            s.rotate(t, e, i)
                        }, s.centroid = function(t, e, i, n) {
                            return s.add(t, e, i), s.add(t, t, n), s.scale(t, t, 1 / 3), t
                        }, s.create = function() {
                            var t = new n.ARRAY_TYPE(2);
                            return t[0] = 0, t[1] = 0, t
                        }, s.clone = function(t) {
                            var e = new n.ARRAY_TYPE(2);
                            return e[0] = t[0], e[1] = t[1], e
                        }, s.fromValues = function(t, e) {
                            var i = new n.ARRAY_TYPE(2);
                            return i[0] = t, i[1] = e, i
                        }, s.copy = function(t, e) {
                            return t[0] = e[0], t[1] = e[1], t
                        }, s.set = function(t, e, i) {
                            return t[0] = e, t[1] = i, t
                        }, s.add = function(t, e, i) {
                            return t[0] = e[0] + i[0], t[1] = e[1] + i[1], t
                        }, s.subtract = function(t, e, i) {
                            return t[0] = e[0] - i[0], t[1] = e[1] - i[1], t
                        }, s.sub = s.subtract, s.multiply = function(t, e, i) {
                            return t[0] = e[0] * i[0], t[1] = e[1] * i[1], t
                        }, s.mul = s.multiply, s.divide = function(t, e, i) {
                            return t[0] = e[0] / i[0], t[1] = e[1] / i[1], t
                        }, s.div = s.divide, s.scale = function(t, e, i) {
                            return t[0] = e[0] * i, t[1] = e[1] * i, t
                        }, s.distance = function(t, e) {
                            var i = e[0] - t[0],
                                s = e[1] - t[1];
                            return Math.sqrt(i * i + s * s)
                        }, s.dist = s.distance, s.squaredDistance = function(t, e) {
                            var i = e[0] - t[0],
                                s = e[1] - t[1];
                            return i * i + s * s
                        }, s.sqrDist = s.squaredDistance, s.length = function(t) {
                            var e = t[0],
                                i = t[1];
                            return Math.sqrt(e * e + i * i)
                        }, s.len = s.length, s.squaredLength = function(t) {
                            var e = t[0],
                                i = t[1];
                            return e * e + i * i
                        }, s.sqrLen = s.squaredLength, s.negate = function(t, e) {
                            return t[0] = -e[0], t[1] = -e[1], t
                        }, s.normalize = function(t, e) {
                            var i = e[0],
                                s = e[1],
                                n = i * i + s * s;
                            return n > 0 && (n = 1 / Math.sqrt(n), t[0] = e[0] * n, t[1] = e[1] * n), t
                        }, s.dot = function(t, e) {
                            return t[0] * e[0] + t[1] * e[1]
                        }, s.str = function(t) {
                            return "vec2(" + t[0] + ", " + t[1] + ")"
                        }, s.lerp = function(t, e, i, s) {
                            var n = e[0],
                                o = e[1];
                            return t[0] = n + s * (i[0] - n), t[1] = o + s * (i[1] - o), t
                        }, s.reflect = function(t, e, i) {
                            var s = e[0] * i[0] + e[1] * i[1];
                            t[0] = e[0] - 2 * i[0] * s, t[1] = e[1] - 2 * i[1] * s
                        }, s.getLineSegmentsIntersection = function(t, e, i, n, o) {
                            var a = s.getLineSegmentsIntersectionFraction(e, i, n, o);
                            return !(a < 0) && (t[0] = e[0] + a * (i[0] - e[0]), t[1] = e[1] + a * (i[1] - e[1]), !0)
                        }, s.getLineSegmentsIntersectionFraction = function(t, e, i, s) {
                            var n = e[0] - t[0],
                                o = e[1] - t[1],
                                a = s[0] - i[0],
                                r = s[1] - i[1],
                                h, l;
                            return h = (-o * (t[0] - i[0]) + n * (t[1] - i[1])) / (-a * o + n * r), l = (a * (t[1] - i[1]) - r * (t[0] - i[0])) / (-a * o + n * r), h >= 0 && h <= 1 && l >= 0 && l <= 1 ? l : -1
                        }
                    }, {
                        "../utils/Utils": 57
                    }],
                    31: [function(t, e, i) {
                        function s(t) {
                            t = t || {}, c.call(this), this.id = t.id || ++s._idCounter, this.world = null, this.shapes = [], this.mass = t.mass || 0, this.invMass = 0, this.inertia = 0, this.invInertia = 0, this.invMassSolve = 0, this.invInertiaSolve = 0, this.fixedRotation = !!t.fixedRotation, this.fixedX = !!t.fixedX, this.fixedY = !!t.fixedY, this.massMultiplier = n.create(), this.position = n.fromValues(0, 0), t.position && n.copy(this.position, t.position), this.interpolatedPosition = n.fromValues(0, 0), this.interpolatedAngle = 0, this.previousPosition = n.fromValues(0, 0), this.previousAngle = 0, this.velocity = n.fromValues(0, 0), t.velocity && n.copy(this.velocity, t.velocity), this.vlambda = n.fromValues(0, 0), this.wlambda = 0, this.angle = t.angle || 0, this.angularVelocity = t.angularVelocity || 0, this.force = n.create(), t.force && n.copy(this.force, t.force), this.angularForce = t.angularForce || 0, this.damping = "number" == typeof t.damping ? t.damping : .1, this.angularDamping = "number" == typeof t.angularDamping ? t.angularDamping : .1, this.type = s.STATIC, void 0 !== t.type ? this.type = t.type : t.mass ? this.type = s.DYNAMIC : this.type = s.STATIC, this.boundingRadius = 0, this.aabb = new l, this.aabbNeedsUpdate = !0, this.allowSleep = void 0 === t.allowSleep || t.allowSleep, this.wantsToSleep = !1, this.sleepState = s.AWAKE, this.sleepSpeedLimit = void 0 !== t.sleepSpeedLimit ? t.sleepSpeedLimit : .2, this.sleepTimeLimit = void 0 !== t.sleepTimeLimit ? t.sleepTimeLimit : 1, this.gravityScale = void 0 !== t.gravityScale ? t.gravityScale : 1, this.collisionResponse = void 0 === t.collisionResponse || t.collisionResponse, this.idleTime = 0, this.timeLastSleepy = 0, this.ccdSpeedThreshold = void 0 !== t.ccdSpeedThreshold ? t.ccdSpeedThreshold : -1, this.ccdIterations = void 0 !== t.ccdIterations ? t.ccdIterations : 10, this.concavePath = null, this._wakeUpAfterNarrowphase = !1, this.updateMassProperties()
                        }
                        var n = t("../math/vec2"),
                            o = t("poly-decomp"),
                            a = t("../shapes/Convex"),
                            r = t("../collision/RaycastResult"),
                            h = t("../collision/Ray"),
                            l = t("../collision/AABB"),
                            c = t("../events/EventEmitter");
                        e.exports = s, s.prototype = new c, s.prototype.constructor = s, s._idCounter = 0, s.prototype.updateSolveMassProperties = function() {
                            this.sleepState === s.SLEEPING || this.type === s.KINEMATIC ? (this.invMassSolve = 0, this.invInertiaSolve = 0) : (this.invMassSolve = this.invMass, this.invInertiaSolve = this.invInertia)
                        }, s.prototype.setDensity = function(t) {
                            var e = this.getArea();
                            this.mass = e * t, this.updateMassProperties()
                        }, s.prototype.getArea = function() {
                            for (var t = 0, e = 0; e < this.shapes.length; e++) t += this.shapes[e].area;
                            return t
                        }, s.prototype.getAABB = function() {
                            return this.aabbNeedsUpdate && this.updateAABB(), this.aabb
                        };
                        var u = new l,
                            d = n.create();
                        s.prototype.updateAABB = function() {
                            for (var t = this.shapes, e = t.length, i = d, s = this.angle, o = 0; o !== e; o++) {
                                var a = t[o],
                                    r = a.angle + s;
                                n.rotate(i, a.position, s), n.add(i, i, this.position), a.computeAABB(u, i, r), 0 === o ? this.aabb.copy(u) : this.aabb.extend(u)
                            }
                            this.aabbNeedsUpdate = !1
                        }, s.prototype.updateBoundingRadius = function() {
                            for (var t = this.shapes, e = t.length, i = 0, s = 0; s !== e; s++) {
                                var o = t[s],
                                    a = n.length(o.position),
                                    r = o.boundingRadius;
                                a + r > i && (i = a + r)
                            }
                            this.boundingRadius = i
                        }, s.prototype.addShape = function(t, e, i) {
                            if (t.body) throw new Error("A shape can only be added to one body.");
                            t.body = this, e ? n.copy(t.position, e) : n.set(t.position, 0, 0), t.angle = i || 0, this.shapes.push(t), this.updateMassProperties(), this.updateBoundingRadius(), this.aabbNeedsUpdate = !0
                        }, s.prototype.removeShape = function(t) {
                            var e = this.shapes.indexOf(t);
                            return -1 !== e && (this.shapes.splice(e, 1), this.aabbNeedsUpdate = !0, t.body = null, !0)
                        }, s.prototype.updateMassProperties = function() {
                            if (this.type === s.STATIC || this.type === s.KINEMATIC) this.mass = Number.MAX_VALUE, this.invMass = 0, this.inertia = Number.MAX_VALUE, this.invInertia = 0;
                            else {
                                var t = this.shapes,
                                    e = t.length,
                                    i = this.mass / e,
                                    o = 0;
                                if (this.fixedRotation) this.inertia = Number.MAX_VALUE, this.invInertia = 0;
                                else {
                                    for (var a = 0; a < e; a++) {
                                        var r = t[a],
                                            h = n.squaredLength(r.position);
                                        o += r.computeMomentOfInertia(i) + i * h
                                    }
                                    this.inertia = o, this.invInertia = o > 0 ? 1 / o : 0
                                }
                                this.invMass = 1 / this.mass, n.set(this.massMultiplier, this.fixedX ? 0 : 1, this.fixedY ? 0 : 1)
                            }
                        };
                        var p = n.create();
                        s.prototype.applyForce = function(t, e) {
                            if (n.add(this.force, this.force, t), e) {
                                var i = n.crossLength(e, t);
                                this.angularForce += i
                            }
                        };
                        var f = n.create(),
                            y = n.create(),
                            g = n.create();
                        s.prototype.applyForceLocal = function(t, e) {
                            e = e || g;
                            var i = f,
                                s = y;
                            this.vectorToWorldFrame(i, t), this.vectorToWorldFrame(s, e), this.applyForce(i, s)
                        };
                        var m = n.create();
                        s.prototype.applyImpulse = function(t, e) {
                            if (this.type === s.DYNAMIC) {
                                var i = m;
                                if (n.scale(i, t, this.invMass), n.multiply(i, this.massMultiplier, i), n.add(this.velocity, i, this.velocity), e) {
                                    var o = n.crossLength(e, t);
                                    o *= this.invInertia, this.angularVelocity += o
                                }
                            }
                        };
                        var v = n.create(),
                            b = n.create(),
                            x = n.create();
                        s.prototype.applyImpulseLocal = function(t, e) {
                            e = e || x;
                            var i = v,
                                s = b;
                            this.vectorToWorldFrame(i, t), this.vectorToWorldFrame(s, e), this.applyImpulse(i, s)
                        }, s.prototype.toLocalFrame = function(t, e) {
                            n.toLocalFrame(t, e, this.position, this.angle)
                        }, s.prototype.toWorldFrame = function(t, e) {
                            n.toGlobalFrame(t, e, this.position, this.angle)
                        }, s.prototype.vectorToLocalFrame = function(t, e) {
                            n.vectorToLocalFrame(t, e, this.angle)
                        }, s.prototype.vectorToWorldFrame = function(t, e) {
                            n.vectorToGlobalFrame(t, e, this.angle)
                        }, s.prototype.fromPolygon = function(t, e) {
                            e = e || {};
                            for (var i = this.shapes.length; i >= 0; --i) this.removeShape(this.shapes[i]);
                            var s = new o.Polygon;
                            if (s.vertices = t, s.makeCCW(), "number" == typeof e.removeCollinearPoints && s.removeCollinearPoints(e.removeCollinearPoints), void 0 === e.skipSimpleCheck && !s.isSimple()) return !1;
                            this.concavePath = s.vertices.slice(0);
                            for (var i = 0; i < this.concavePath.length; i++) {
                                var r = [0, 0];
                                n.copy(r, this.concavePath[i]), this.concavePath[i] = r
                            }
                            var h;
                            h = e.optimalDecomp ? s.decomp() : s.quickDecomp();
                            for (var l = n.create(), i = 0; i !== h.length; i++) {
                                for (var c = new a({
                                        vertices: h[i].vertices
                                    }), u = 0; u !== c.vertices.length; u++) {
                                    var r = c.vertices[u];
                                    n.sub(r, r, c.centerOfMass)
                                }
                                n.scale(l, c.centerOfMass, 1), c.updateTriangles(), c.updateCenterOfMass(), c.updateBoundingRadius(), this.addShape(c, l)
                            }
                            return this.adjustCenterOfMass(), this.aabbNeedsUpdate = !0, !0
                        };
                        var _ = n.fromValues(0, 0),
                            w = n.fromValues(0, 0),
                            P = n.fromValues(0, 0),
                            C = n.fromValues(0, 0);
                        s.prototype.adjustCenterOfMass = function() {
                            var t = w,
                                e = P,
                                i = C,
                                s = 0;
                            n.set(e, 0, 0);
                            for (var o = 0; o !== this.shapes.length; o++) {
                                var a = this.shapes[o];
                                n.scale(t, a.position, a.area), n.add(e, e, t), s += a.area
                            }
                            n.scale(i, e, 1 / s);
                            for (var o = 0; o !== this.shapes.length; o++) {
                                var a = this.shapes[o];
                                n.sub(a.position, a.position, i)
                            }
                            n.add(this.position, this.position, i);
                            for (var o = 0; this.concavePath && o < this.concavePath.length; o++) n.sub(this.concavePath[o], this.concavePath[o], i);
                            this.updateMassProperties(), this.updateBoundingRadius()
                        }, s.prototype.setZeroForce = function() {
                            n.set(this.force, 0, 0), this.angularForce = 0
                        }, s.prototype.resetConstraintVelocity = function() {
                            var t = this,
                                e = t.vlambda;
                            n.set(e, 0, 0), t.wlambda = 0
                        }, s.prototype.addConstraintVelocity = function() {
                            var t = this,
                                e = t.velocity;
                            n.add(e, e, t.vlambda), t.angularVelocity += t.wlambda
                        }, s.prototype.applyDamping = function(t) {
                            if (this.type === s.DYNAMIC) {
                                var e = this.velocity;
                                n.scale(e, e, Math.pow(1 - this.damping, t)), this.angularVelocity *= Math.pow(1 - this.angularDamping, t)
                            }
                        }, s.prototype.wakeUp = function() {
                            var t = this.sleepState;
                            this.sleepState = s.AWAKE, this.idleTime = 0, t !== s.AWAKE && this.emit(s.wakeUpEvent)
                        }, s.prototype.sleep = function() {
                            this.sleepState = s.SLEEPING, this.angularVelocity = 0, this.angularForce = 0, n.set(this.velocity, 0, 0), n.set(this.force, 0, 0), this.emit(s.sleepEvent)
                        }, s.prototype.sleepTick = function(t, e, i) {
                            if (this.allowSleep && this.type !== s.SLEEPING) {
                                this.wantsToSleep = !1;
                                var o = this.sleepState;
                                n.squaredLength(this.velocity) + Math.pow(this.angularVelocity, 2) >= Math.pow(this.sleepSpeedLimit, 2) ? (this.idleTime = 0, this.sleepState = s.AWAKE) : (this.idleTime += i, this.sleepState = s.SLEEPY), this.idleTime > this.sleepTimeLimit && (e ? this.wantsToSleep = !0 : this.sleep())
                            }
                        }, s.prototype.overlaps = function(t) {
                            return this.world.overlapKeeper.bodiesAreOverlapping(this, t)
                        };
                        var T = n.create(),
                            S = n.create();
                        s.prototype.integrate = function(t) {
                            var e = this.invMass,
                                i = this.force,
                                s = this.position,
                                o = this.velocity;
                            n.copy(this.previousPosition, this.position), this.previousAngle = this.angle, this.fixedRotation || (this.angularVelocity += this.angularForce * this.invInertia * t), n.scale(T, i, t * e), n.multiply(T, this.massMultiplier, T), n.add(o, T, o), this.integrateToTimeOfImpact(t) || (n.scale(S, o, t), n.add(s, s, S), this.fixedRotation || (this.angle += this.angularVelocity * t)), this.aabbNeedsUpdate = !0
                        };
                        var A = new r,
                            E = new h({
                                mode: h.ALL
                            }),
                            I = n.create(),
                            M = n.create(),
                            O = n.create(),
                            R = n.create();
                        s.prototype.integrateToTimeOfImpact = function(t) {
                            if (this.ccdSpeedThreshold < 0 || n.squaredLength(this.velocity) < Math.pow(this.ccdSpeedThreshold, 2)) return !1;
                            n.normalize(I, this.velocity), n.scale(M, this.velocity, t), n.add(M, M, this.position), n.sub(O, M, this.position);
                            var e = this.angularVelocity * t,
                                i = n.length(O),
                                s = 1,
                                o, a = this;
                            if (A.reset(), E.callback = function(t) {
                                    t.body !== a && (o = t.body, t.getHitPoint(M, E), n.sub(O, M, a.position), s = n.length(O) / i, t.stop())
                                }, n.copy(E.from, this.position), n.copy(E.to, M), E.update(), this.world.raycast(A, E), !o) return !1;
                            var r = this.angle;
                            n.copy(R, this.position);
                            for (var h = 0, l = 0, c = 0, u = s; u >= l && h < this.ccdIterations;) {
                                h++, c = (u - l) / 2, n.scale(S, O, s), n.add(this.position, R, S), this.angle = r + e * s, this.updateAABB();
                                this.aabb.overlaps(o.aabb) && this.world.narrowphase.bodiesOverlap(this, o) ? l = c : u = c
                            }
                            return s = c, n.copy(this.position, R), this.angle = r, n.scale(S, O, s), n.add(this.position, this.position, S), this.fixedRotation || (this.angle += e * s), !0
                        }, s.prototype.getVelocityAtPoint = function(t, e) {
                            return n.crossVZ(t, e, this.angularVelocity), n.subtract(t, this.velocity, t), t
                        }, s.sleepyEvent = {
                            type: "sleepy"
                        }, s.sleepEvent = {
                            type: "sleep"
                        }, s.wakeUpEvent = {
                            type: "wakeup"
                        }, s.DYNAMIC = 1, s.STATIC = 2, s.KINEMATIC = 4, s.AWAKE = 0, s.SLEEPY = 1, s.SLEEPING = 2
                    }, {
                        "../collision/AABB": 7,
                        "../collision/Ray": 11,
                        "../collision/RaycastResult": 12,
                        "../events/EventEmitter": 26,
                        "../math/vec2": 30,
                        "../shapes/Convex": 40,
                        "poly-decomp": 5
                    }],
                    32: [function(t, e, i) {
                        function s(t, e, i) {
                            i = i || {}, o.call(this, t, e, i), this.localAnchorA = n.fromValues(0, 0), this.localAnchorB = n.fromValues(0, 0), i.localAnchorA && n.copy(this.localAnchorA, i.localAnchorA), i.localAnchorB && n.copy(this.localAnchorB, i.localAnchorB), i.worldAnchorA && this.setWorldAnchorA(i.worldAnchorA), i.worldAnchorB && this.setWorldAnchorB(i.worldAnchorB);
                            var s = n.create(),
                                a = n.create();
                            this.getWorldAnchorA(s), this.getWorldAnchorB(a);
                            var r = n.distance(s, a);
                            this.restLength = "number" == typeof i.restLength ? i.restLength : r
                        }
                        var n = t("../math/vec2"),
                            o = t("./Spring"),
                            a = t("../utils/Utils");
                        e.exports = s, s.prototype = new o, s.prototype.constructor = s, s.prototype.setWorldAnchorA = function(t) {
                            this.bodyA.toLocalFrame(this.localAnchorA, t)
                        }, s.prototype.setWorldAnchorB = function(t) {
                            this.bodyB.toLocalFrame(this.localAnchorB, t)
                        }, s.prototype.getWorldAnchorA = function(t) {
                            this.bodyA.toWorldFrame(t, this.localAnchorA)
                        }, s.prototype.getWorldAnchorB = function(t) {
                            this.bodyB.toWorldFrame(t, this.localAnchorB)
                        };
                        var r = n.create(),
                            h = n.create(),
                            l = n.create(),
                            c = n.create(),
                            u = n.create(),
                            d = n.create(),
                            p = n.create(),
                            f = n.create(),
                            y = n.create();
                        s.prototype.applyForce = function() {
                            var t = this.stiffness,
                                e = this.damping,
                                i = this.restLength,
                                s = this.bodyA,
                                o = this.bodyB,
                                a = r,
                                g = h,
                                m = l,
                                v = c,
                                b = y,
                                x = u,
                                _ = d,
                                w = p,
                                P = f;
                            this.getWorldAnchorA(x), this.getWorldAnchorB(_), n.sub(w, x, s.position), n.sub(P, _, o.position), n.sub(a, _, x);
                            var C = n.len(a);
                            n.normalize(g, a), n.sub(m, o.velocity, s.velocity), n.crossZV(b, o.angularVelocity, P), n.add(m, m, b), n.crossZV(b, s.angularVelocity, w), n.sub(m, m, b), n.scale(v, g, -t * (C - i) - e * n.dot(m, g)), n.sub(s.force, s.force, v), n.add(o.force, o.force, v);
                            var T = n.crossLength(w, v),
                                S = n.crossLength(P, v);
                            s.angularForce -= T, o.angularForce += S
                        }
                    }, {
                        "../math/vec2": 30,
                        "../utils/Utils": 57,
                        "./Spring": 34
                    }],
                    33: [function(t, e, i) {
                        function s(t, e, i) {
                            i = i || {}, o.call(this, t, e, i), this.restAngle = "number" == typeof i.restAngle ? i.restAngle : e.angle - t.angle
                        }
                        var n = t("../math/vec2"),
                            o = t("./Spring");
                        e.exports = s, s.prototype = new o, s.prototype.constructor = s, s.prototype.applyForce = function() {
                            var t = this.stiffness,
                                e = this.damping,
                                i = this.restAngle,
                                s = this.bodyA,
                                n = this.bodyB,
                                o = n.angle - s.angle,
                                a = n.angularVelocity - s.angularVelocity,
                                r = -t * (o - i) - e * a * 0;
                            s.angularForce -= r, n.angularForce += r
                        }
                    }, {
                        "../math/vec2": 30,
                        "./Spring": 34
                    }],
                    34: [function(t, e, i) {
                        function s(t, e, i) {
                            i = o.defaults(i, {
                                stiffness: 100,
                                damping: 1
                            }), this.stiffness = i.stiffness, this.damping = i.damping, this.bodyA = t, this.bodyB = e
                        }
                        var n = t("../math/vec2"),
                            o = t("../utils/Utils");
                        e.exports = s, s.prototype.applyForce = function() {}
                    }, {
                        "../math/vec2": 30,
                        "../utils/Utils": 57
                    }],
                    35: [function(t, e, i) {
                        function s(t, e) {
                            e = e || {}, this.chassisBody = t, this.wheels = [], this.groundBody = new l({
                                mass: 0
                            }), this.world = null;
                            var i = this;
                            this.preStepCallback = function() {
                                i.update()
                            }
                        }

                        function n(t, e) {
                            e = e || {}, this.vehicle = t, this.forwardEquation = new h(t.chassisBody, t.groundBody), this.sideEquation = new h(t.chassisBody, t.groundBody), this.steerValue = 0, this.engineForce = 0, this.setSideFriction(void 0 !== e.sideFriction ? e.sideFriction : 5), this.localForwardVector = o.fromValues(0, 1), e.localForwardVector && o.copy(this.localForwardVector, e.localForwardVector), this.localPosition = o.fromValues(0, 0), e.localPosition && o.copy(this.localPosition, e.localPosition), r.apply(this, t.chassisBody, t.groundBody), this.equations.push(this.forwardEquation, this.sideEquation), this.setBrakeForce(0)
                        }
                        var o = t("../math/vec2"),
                            a = t("../utils/Utils"),
                            r = t("../constraints/Constraint"),
                            h = t("../equations/FrictionEquation"),
                            l = t("../objects/Body");
                        e.exports = s, s.prototype.addToWorld = function(t) {
                            this.world = t, t.addBody(this.groundBody), t.on("preStep", this.preStepCallback);
                            for (var e = 0; e < this.wheels.length; e++) {
                                var i = this.wheels[e];
                                t.addConstraint(i)
                            }
                        }, s.prototype.removeFromWorld = function() {
                            var t = this.world;
                            t.removeBody(this.groundBody), t.off("preStep", this.preStepCallback);
                            for (var e = 0; e < this.wheels.length; e++) {
                                var i = this.wheels[e];
                                t.removeConstraint(i)
                            }
                            this.world = null
                        }, s.prototype.addWheel = function(t) {
                            var e = new n(this, t);
                            return this.wheels.push(e), e
                        }, s.prototype.update = function() {
                            for (var t = 0; t < this.wheels.length; t++) this.wheels[t].update()
                        }, n.prototype = new r, n.prototype.setBrakeForce = function(t) {
                            this.forwardEquation.setSlipForce(t)
                        }, n.prototype.setSideFriction = function(t) {
                            this.sideEquation.setSlipForce(t)
                        };
                        var c = o.create(),
                            u = o.create();
                        n.prototype.getSpeed = function() {
                            return this.vehicle.chassisBody.vectorToWorldFrame(u, this.localForwardVector), this.vehicle.chassisBody.getVelocityAtPoint(c, u), o.dot(c, u)
                        };
                        var d = o.create();
                        n.prototype.update = function() {
                            this.vehicle.chassisBody.vectorToWorldFrame(this.forwardEquation.t, this.localForwardVector), o.rotate(this.sideEquation.t, this.localForwardVector, Math.PI / 2), this.vehicle.chassisBody.vectorToWorldFrame(this.sideEquation.t, this.sideEquation.t), o.rotate(this.forwardEquation.t, this.forwardEquation.t, this.steerValue), o.rotate(this.sideEquation.t, this.sideEquation.t, this.steerValue), this.vehicle.chassisBody.toWorldFrame(this.forwardEquation.contactPointB, this.localPosition), o.copy(this.sideEquation.contactPointB, this.forwardEquation.contactPointB), this.vehicle.chassisBody.vectorToWorldFrame(this.forwardEquation.contactPointA, this.localPosition), o.copy(this.sideEquation.contactPointA, this.forwardEquation.contactPointA), o.normalize(d, this.forwardEquation.t), o.scale(d, d, this.engineForce), this.vehicle.chassisBody.applyForce(d, this.forwardEquation.contactPointA)
                        }
                    }, {
                        "../constraints/Constraint": 14,
                        "../equations/FrictionEquation": 23,
                        "../math/vec2": 30,
                        "../objects/Body": 31,
                        "../utils/Utils": 57
                    }],
                    36: [function(t, e, i) {
                        var s = e.exports = {
                            AABB: t("./collision/AABB"),
                            AngleLockEquation: t("./equations/AngleLockEquation"),
                            Body: t("./objects/Body"),
                            Broadphase: t("./collision/Broadphase"),
                            Capsule: t("./shapes/Capsule"),
                            Circle: t("./shapes/Circle"),
                            Constraint: t("./constraints/Constraint"),
                            ContactEquation: t("./equations/ContactEquation"),
                            ContactEquationPool: t("./utils/ContactEquationPool"),
                            ContactMaterial: t("./material/ContactMaterial"),
                            Convex: t("./shapes/Convex"),
                            DistanceConstraint: t("./constraints/DistanceConstraint"),
                            Equation: t("./equations/Equation"),
                            EventEmitter: t("./events/EventEmitter"),
                            FrictionEquation: t("./equations/FrictionEquation"),
                            FrictionEquationPool: t("./utils/FrictionEquationPool"),
                            GearConstraint: t("./constraints/GearConstraint"),
                            GSSolver: t("./solver/GSSolver"),
                            Heightfield: t("./shapes/Heightfield"),
                            Line: t("./shapes/Line"),
                            LockConstraint: t("./constraints/LockConstraint"),
                            Material: t("./material/Material"),
                            Narrowphase: t("./collision/Narrowphase"),
                            NaiveBroadphase: t("./collision/NaiveBroadphase"),
                            Particle: t("./shapes/Particle"),
                            Plane: t("./shapes/Plane"),
                            Pool: t("./utils/Pool"),
                            RevoluteConstraint: t("./constraints/RevoluteConstraint"),
                            PrismaticConstraint: t("./constraints/PrismaticConstraint"),
                            Ray: t("./collision/Ray"),
                            RaycastResult: t("./collision/RaycastResult"),
                            Box: t("./shapes/Box"),
                            RotationalVelocityEquation: t("./equations/RotationalVelocityEquation"),
                            SAPBroadphase: t("./collision/SAPBroadphase"),
                            Shape: t("./shapes/Shape"),
                            Solver: t("./solver/Solver"),
                            Spring: t("./objects/Spring"),
                            TopDownVehicle: t("./objects/TopDownVehicle"),
                            LinearSpring: t("./objects/LinearSpring"),
                            RotationalSpring: t("./objects/RotationalSpring"),
                            Utils: t("./utils/Utils"),
                            World: t("./world/World"),
                            vec2: t("./math/vec2"),
                            version: t("../package.json").version
                        };
                        Object.defineProperty(s, "Rectangle", {
                            get: function() {
                                return this.Box
                            }
                        })
                    }, {
                        "../package.json": 6,
                        "./collision/AABB": 7,
                        "./collision/Broadphase": 8,
                        "./collision/NaiveBroadphase": 9,
                        "./collision/Narrowphase": 10,
                        "./collision/Ray": 11,
                        "./collision/RaycastResult": 12,
                        "./collision/SAPBroadphase": 13,
                        "./constraints/Constraint": 14,
                        "./constraints/DistanceConstraint": 15,
                        "./constraints/GearConstraint": 16,
                        "./constraints/LockConstraint": 17,
                        "./constraints/PrismaticConstraint": 18,
                        "./constraints/RevoluteConstraint": 19,
                        "./equations/AngleLockEquation": 20,
                        "./equations/ContactEquation": 21,
                        "./equations/Equation": 22,
                        "./equations/FrictionEquation": 23,
                        "./equations/RotationalVelocityEquation": 25,
                        "./events/EventEmitter": 26,
                        "./material/ContactMaterial": 27,
                        "./material/Material": 28,
                        "./math/vec2": 30,
                        "./objects/Body": 31,
                        "./objects/LinearSpring": 32,
                        "./objects/RotationalSpring": 33,
                        "./objects/Spring": 34,
                        "./objects/TopDownVehicle": 35,
                        "./shapes/Box": 37,
                        "./shapes/Capsule": 38,
                        "./shapes/Circle": 39,
                        "./shapes/Convex": 40,
                        "./shapes/Heightfield": 41,
                        "./shapes/Line": 42,
                        "./shapes/Particle": 43,
                        "./shapes/Plane": 44,
                        "./shapes/Shape": 45,
                        "./solver/GSSolver": 46,
                        "./solver/Solver": 47,
                        "./utils/ContactEquationPool": 48,
                        "./utils/FrictionEquationPool": 49,
                        "./utils/Pool": 55,
                        "./utils/Utils": 57,
                        "./world/World": 61
                    }],
                    37: [function(t, e, i) {
                        function s(t) {
                            "number" == typeof arguments[0] && "number" == typeof arguments[1] && (t = {
                                width: arguments[0],
                                height: arguments[1]
                            }), t = t || {};
                            var e = this.width = t.width || 1,
                                i = this.height = t.height || 1,
                                s = [n.fromValues(-e / 2, -i / 2), n.fromValues(e / 2, -i / 2), n.fromValues(e / 2, i / 2), n.fromValues(-e / 2, i / 2)],
                                r = [n.fromValues(1, 0), n.fromValues(0, 1)];
                            t.vertices = s, t.axes = r, t.type = o.BOX, a.call(this, t)
                        }
                        var n = t("../math/vec2"),
                            o = t("./Shape"),
                            a = t("./Convex");
                        e.exports = s, s.prototype = new a, s.prototype.constructor = s, s.prototype.computeMomentOfInertia = function(t) {
                            var e = this.width,
                                i = this.height;
                            return t * (i * i + e * e) / 12
                        }, s.prototype.updateBoundingRadius = function() {
                            var t = this.width,
                                e = this.height;
                            this.boundingRadius = Math.sqrt(t * t + e * e) / 2
                        };
                        var r = n.create(),
                            h = n.create(),
                            l = n.create(),
                            c = n.create();
                        s.prototype.computeAABB = function(t, e, i) {
                            t.setFromPoints(this.vertices, e, i, 0)
                        }, s.prototype.updateArea = function() {
                            this.area = this.width * this.height
                        }
                    }, {
                        "../math/vec2": 30,
                        "./Convex": 40,
                        "./Shape": 45
                    }],
                    38: [function(t, e, i) {
                        function s(t) {
                            "number" == typeof arguments[0] && "number" == typeof arguments[1] && (t = {
                                length: arguments[0],
                                radius: arguments[1]
                            }), t = t || {}, this.length = t.length || 1, this.radius = t.radius || 1, t.type = n.CAPSULE, n.call(this, t)
                        }
                        var n = t("./Shape"),
                            o = t("../math/vec2");
                        e.exports = s, s.prototype = new n, s.prototype.constructor = s, s.prototype.computeMomentOfInertia = function(t) {
                            var e = this.radius,
                                i = this.length + e,
                                s = 2 * e;
                            return t * (s * s + i * i) / 12
                        }, s.prototype.updateBoundingRadius = function() {
                            this.boundingRadius = this.radius + this.length / 2
                        }, s.prototype.updateArea = function() {
                            this.area = Math.PI * this.radius * this.radius + 2 * this.radius * this.length
                        };
                        var a = o.create();
                        s.prototype.computeAABB = function(t, e, i) {
                            var s = this.radius;
                            o.set(a, this.length / 2, 0), 0 !== i && o.rotate(a, a, i), o.set(t.upperBound, Math.max(a[0] + s, -a[0] + s), Math.max(a[1] + s, -a[1] + s)), o.set(t.lowerBound, Math.min(a[0] - s, -a[0] - s), Math.min(a[1] - s, -a[1] - s)), o.add(t.lowerBound, t.lowerBound, e), o.add(t.upperBound, t.upperBound, e)
                        };
                        var r = o.create(),
                            h = o.create(),
                            l = o.create(),
                            c = o.create(),
                            u = o.fromValues(0, 1);
                        s.prototype.raycast = function(t, e, i, s) {
                            for (var n = e.from, a = e.to, d = e.direction, p = r, f = h, y = l, g = c, m = this.length / 2, v = 0; v < 2; v++) {
                                var b = this.radius * (2 * v - 1);
                                o.set(y, -m, b), o.set(g, m, b), o.toGlobalFrame(y, y, i, s), o.toGlobalFrame(g, g, i, s);
                                var x = o.getLineSegmentsIntersectionFraction(n, a, y, g);
                                if (x >= 0 && (o.rotate(f, u, s), o.scale(f, f, 2 * v - 1), e.reportIntersection(t, x, f, -1), t.shouldStop(e))) return
                            }
                            for (var _ = Math.pow(this.radius, 2) + Math.pow(m, 2), v = 0; v < 2; v++) {
                                o.set(y, m * (2 * v - 1), 0), o.toGlobalFrame(y, y, i, s);
                                var w = Math.pow(a[0] - n[0], 2) + Math.pow(a[1] - n[1], 2),
                                    P = 2 * ((a[0] - n[0]) * (n[0] - y[0]) + (a[1] - n[1]) * (n[1] - y[1])),
                                    C = Math.pow(n[0] - y[0], 2) + Math.pow(n[1] - y[1], 2) - Math.pow(this.radius, 2),
                                    x = Math.pow(P, 2) - 4 * w * C;
                                if (!(x < 0))
                                    if (0 === x) {
                                        if (o.lerp(p, n, a, x), o.squaredDistance(p, i) > _ && (o.sub(f, p, y), o.normalize(f, f), e.reportIntersection(t, x, f, -1), t.shouldStop(e))) return
                                    } else {
                                        var T = Math.sqrt(x),
                                            S = 1 / (2 * w),
                                            A = (-P - T) * S,
                                            E = (-P + T) * S;
                                        if (A >= 0 && A <= 1 && (o.lerp(p, n, a, A), o.squaredDistance(p, i) > _ && (o.sub(f, p, y), o.normalize(f, f), e.reportIntersection(t, A, f, -1), t.shouldStop(e)))) return;
                                        if (E >= 0 && E <= 1 && (o.lerp(p, n, a, E), o.squaredDistance(p, i) > _ && (o.sub(f, p, y), o.normalize(f, f), e.reportIntersection(t, E, f, -1), t.shouldStop(e)))) return
                                    }
                            }
                        }
                    }, {
                        "../math/vec2": 30,
                        "./Shape": 45
                    }],
                    39: [function(t, e, i) {
                        function s(t) {
                            "number" == typeof arguments[0] && (t = {
                                radius: arguments[0]
                            }), t = t || {}, this.radius = t.radius || 1, t.type = n.CIRCLE, n.call(this, t)
                        }
                        var n = t("./Shape"),
                            o = t("../math/vec2");
                        e.exports = s, s.prototype = new n, s.prototype.constructor = s, s.prototype.computeMomentOfInertia = function(t) {
                            var e = this.radius;
                            return t * e * e / 2
                        }, s.prototype.updateBoundingRadius = function() {
                            this.boundingRadius = this.radius
                        }, s.prototype.updateArea = function() {
                            this.area = Math.PI * this.radius * this.radius
                        }, s.prototype.computeAABB = function(t, e, i) {
                            var s = this.radius;
                            o.set(t.upperBound, s, s), o.set(t.lowerBound, -s, -s), e && (o.add(t.lowerBound, t.lowerBound, e), o.add(t.upperBound, t.upperBound, e))
                        };
                        var a = o.create(),
                            r = o.create();
                        s.prototype.raycast = function(t, e, i, s) {
                            var n = e.from,
                                h = e.to,
                                l = this.radius,
                                c = Math.pow(h[0] - n[0], 2) + Math.pow(h[1] - n[1], 2),
                                u = 2 * ((h[0] - n[0]) * (n[0] - i[0]) + (h[1] - n[1]) * (n[1] - i[1])),
                                d = Math.pow(n[0] - i[0], 2) + Math.pow(n[1] - i[1], 2) - Math.pow(l, 2),
                                p = Math.pow(u, 2) - 4 * c * d,
                                f = a,
                                y = r;
                            if (!(p < 0))
                                if (0 === p) o.lerp(f, n, h, p), o.sub(y, f, i), o.normalize(y, y), e.reportIntersection(t, p, y, -1);
                                else {
                                    var g = Math.sqrt(p),
                                        m = 1 / (2 * c),
                                        v = (-u - g) * m,
                                        b = (-u + g) * m;
                                    if (v >= 0 && v <= 1 && (o.lerp(f, n, h, v), o.sub(y, f, i), o.normalize(y, y), e.reportIntersection(t, v, y, -1), t.shouldStop(e))) return;
                                    b >= 0 && b <= 1 && (o.lerp(f, n, h, b), o.sub(y, f, i), o.normalize(y, y), e.reportIntersection(t, b, y, -1))
                                }
                        }
                    }, {
                        "../math/vec2": 30,
                        "./Shape": 45
                    }],
                    40: [function(t, e, i) {
                        function s(t) {
                            Array.isArray(arguments[0]) && (t = {
                                vertices: arguments[0],
                                axes: arguments[1]
                            }), t = t || {}, this.vertices = [];
                            for (var e = void 0 !== t.vertices ? t.vertices : [], i = 0; i < e.length; i++) {
                                var s = o.create();
                                o.copy(s, e[i]), this.vertices.push(s)
                            }
                            if (this.axes = [], t.axes)
                                for (var i = 0; i < t.axes.length; i++) {
                                    var a = o.create();
                                    o.copy(a, t.axes[i]), this.axes.push(a)
                                } else
                                    for (var i = 0; i < this.vertices.length; i++) {
                                        var r = this.vertices[i],
                                            h = this.vertices[(i + 1) % this.vertices.length],
                                            l = o.create();
                                        o.sub(l, h, r), o.rotate90cw(l, l), o.normalize(l, l), this.axes.push(l)
                                    }
                            if (this.centerOfMass = o.fromValues(0, 0), this.triangles = [], this.vertices.length && (this.updateTriangles(), this.updateCenterOfMass()), this.boundingRadius = 0, t.type = n.CONVEX, n.call(this, t), this.updateBoundingRadius(), this.updateArea(), this.area < 0) throw new Error("Convex vertices must be given in conter-clockwise winding.")
                        }
                        var n = t("./Shape"),
                            o = t("../math/vec2"),
                            a = t("../math/polyk"),
                            r = t("poly-decomp");
                        e.exports = s, s.prototype = new n, s.prototype.constructor = s;
                        var h = o.create(),
                            l = o.create();
                        s.prototype.projectOntoLocalAxis = function(t, e) {
                            for (var i = null, s = null, n, a, t = h, r = 0; r < this.vertices.length; r++) n = this.vertices[r], a = o.dot(n, t), (null === i || a > i) && (i = a), (null === s || a < s) && (s = a);
                            if (s > i) {
                                var l = s;
                                s = i, i = l
                            }
                            o.set(e, s, i)
                        }, s.prototype.projectOntoWorldAxis = function(t, e, i, s) {
                            var n = l;
                            this.projectOntoLocalAxis(t, s), 0 !== i ? o.rotate(n, t, i) : n = t;
                            var a = o.dot(e, n);
                            o.set(s, s[0] + a, s[1] + a)
                        }, s.prototype.updateTriangles = function() {
                            this.triangles.length = 0;
                            for (var t = [], e = 0; e < this.vertices.length; e++) {
                                var i = this.vertices[e];
                                t.push(i[0], i[1])
                            }
                            for (var s = a.Triangulate(t), e = 0; e < s.length; e += 3) {
                                var n = s[e],
                                    o = s[e + 1],
                                    r = s[e + 2];
                                this.triangles.push([n, o, r])
                            }
                        };
                        var c = o.create(),
                            u = o.create(),
                            d = o.create(),
                            p = o.create(),
                            f = o.create(),
                            y = o.create(),
                            g = o.create(),
                            m = o.create(),
                            v = o.create();
                        s.prototype.updateCenterOfMass = function() {
                            var t = this.triangles,
                                e = this.vertices,
                                i = this.centerOfMass,
                                n = c,
                                a = v,
                                r = d,
                                h = p,
                                l = f,
                                b = y,
                                x = g,
                                _ = m,
                                w = u;
                            o.set(i, 0, 0);
                            for (var P = 0, C = 0; C !== t.length; C++) {
                                var T = t[C],
                                    r = e[T[0]],
                                    h = e[T[1]],
                                    l = e[T[2]];
                                o.centroid(n, r, h, l);
                                var S = s.triangleArea(r, h, l);
                                P += S, o.scale(w, n, S), o.add(i, i, w)
                            }
                            o.scale(i, i, 1 / P)
                        }, s.prototype.computeMomentOfInertia = function(t) {
                            for (var e = 0, i = 0, s = this.vertices.length, n = s - 1, a = 0; a < s; n = a, a++) {
                                var r = this.vertices[n],
                                    h = this.vertices[a],
                                    l = Math.abs(o.crossLength(r, h));
                                e += l * (o.dot(h, h) + o.dot(h, r) + o.dot(r, r)), i += l
                            }
                            return t / 6 * (e / i)
                        }, s.prototype.updateBoundingRadius = function() {
                            for (var t = this.vertices, e = 0, i = 0; i !== t.length; i++) {
                                var s = o.squaredLength(t[i]);
                                s > e && (e = s)
                            }
                            this.boundingRadius = Math.sqrt(e)
                        }, s.triangleArea = function(t, e, i) {
                            return .5 * ((e[0] - t[0]) * (i[1] - t[1]) - (i[0] - t[0]) * (e[1] - t[1]))
                        }, s.prototype.updateArea = function() {
                            this.updateTriangles(), this.area = 0;
                            for (var t = this.triangles, e = this.vertices, i = 0; i !== t.length; i++) {
                                var n = t[i],
                                    o = e[n[0]],
                                    a = e[n[1]],
                                    r = e[n[2]],
                                    h = s.triangleArea(o, a, r);
                                this.area += h
                            }
                        }, s.prototype.computeAABB = function(t, e, i) {
                            t.setFromPoints(this.vertices, e, i, 0)
                        };
                        var b = o.create(),
                            x = o.create(),
                            _ = o.create();
                        s.prototype.raycast = function(t, e, i, s) {
                            var n = b,
                                a = x,
                                r = _,
                                h = this.vertices;
                            o.toLocalFrame(n, e.from, i, s), o.toLocalFrame(a, e.to, i, s);
                            for (var l = h.length, c = 0; c < l && !t.shouldStop(e); c++) {
                                var u = h[c],
                                    d = h[(c + 1) % l],
                                    p = o.getLineSegmentsIntersectionFraction(n, a, u, d);
                                p >= 0 && (o.sub(r, d, u), o.rotate(r, r, -Math.PI / 2 + s), o.normalize(r, r), e.reportIntersection(t, p, r, c))
                            }
                        }
                    }, {
                        "../math/polyk": 29,
                        "../math/vec2": 30,
                        "./Shape": 45,
                        "poly-decomp": 5
                    }],
                    41: [function(t, e, i) {
                        function s(t) {
                            if (Array.isArray(arguments[0]) && (t = {
                                    heights: arguments[0]
                                }, "object" == typeof arguments[1]))
                                for (var e in arguments[1]) t[e] = arguments[1][e];
                            t = t || {}, this.heights = t.heights ? t.heights.slice(0) : [], this.maxValue = t.maxValue || null, this.minValue = t.minValue || null, this.elementWidth = t.elementWidth || .1, void 0 !== t.maxValue && void 0 !== t.minValue || this.updateMaxMinValues(), t.type = o.HEIGHTFIELD, o.call(this, t)
                        }

                        function n(t, e, i, s, n) {
                            var o, a, r, h;
                            o = i[0] - e[0], a = i[1] - e[1], r = n[0] - s[0], h = n[1] - s[1];
                            var l, c;
                            if (l = (-a * (e[0] - s[0]) + o * (e[1] - s[1])) / (-r * a + o * h), c = (r * (e[1] - s[1]) - h * (e[0] - s[0])) / (-r * a + o * h), l >= 0 && l <= 1 && c >= 0 && c <= 1) {
                                var u = e[0] + c * o,
                                    d = e[1] + c * a;
                                return t[0] = u, t[1] = d, c
                            }
                            return -1
                        }
                        var o = t("./Shape"),
                            a = t("../math/vec2"),
                            r = t("../utils/Utils");
                        e.exports = s, s.prototype = new o, s.prototype.constructor = s, s.prototype.updateMaxMinValues = function() {
                            for (var t = this.heights, e = t[0], i = t[0], s = 0; s !== t.length; s++) {
                                var n = t[s];
                                n > e && (e = n), n < i && (i = n)
                            }
                            this.maxValue = e, this.minValue = i
                        }, s.prototype.computeMomentOfInertia = function(t) {
                            return Number.MAX_VALUE
                        }, s.prototype.updateBoundingRadius = function() {
                            this.boundingRadius = Number.MAX_VALUE
                        }, s.prototype.updateArea = function() {
                            for (var t = this.heights, e = 0, i = 0; i < t.length - 1; i++) e += (t[i] + t[i + 1]) / 2 * this.elementWidth;
                            this.area = e
                        };
                        var h = [a.create(), a.create(), a.create(), a.create()];
                        s.prototype.computeAABB = function(t, e, i) {
                            a.set(h[0], 0, this.maxValue), a.set(h[1], this.elementWidth * this.heights.length, this.maxValue), a.set(h[2], this.elementWidth * this.heights.length, this.minValue), a.set(h[3], 0, this.minValue), t.setFromPoints(h, e, i)
                        }, s.prototype.getLineSegment = function(t, e, i) {
                            var s = this.heights,
                                n = this.elementWidth;
                            a.set(t, i * n, s[i]), a.set(e, (i + 1) * n, s[i + 1])
                        }, s.prototype.getSegmentIndex = function(t) {
                            return Math.floor(t[0] / this.elementWidth)
                        }, s.prototype.getClampedSegmentIndex = function(t) {
                            var e = this.getSegmentIndex(t);
                            return e = Math.min(this.heights.length, Math.max(e, 0))
                        };
                        var l = a.create(),
                            c = a.create(),
                            u = a.create(),
                            d = a.create(),
                            p = a.create(),
                            f = a.create(),
                            y = a.fromValues(0, 1);
                        s.prototype.raycast = function(t, e, i, s) {
                            var n = e.from,
                                o = e.to,
                                r = e.direction,
                                h = l,
                                y = c,
                                g = u,
                                m = d,
                                v = p,
                                b = f;
                            a.toLocalFrame(v, n, i, s), a.toLocalFrame(b, o, i, s);
                            var x = this.getClampedSegmentIndex(v),
                                _ = this.getClampedSegmentIndex(b);
                            if (x > _) {
                                var w = x;
                                x = _, _ = w
                            }
                            for (var P = 0; P < this.heights.length - 1; P++) {
                                this.getLineSegment(g, m, P);
                                var C = a.getLineSegmentsIntersectionFraction(v, b, g, m);
                                if (C >= 0 && (a.sub(y, m, g), a.rotate(y, y, s + Math.PI / 2), a.normalize(y, y), e.reportIntersection(t, C, y, -1), t.shouldStop(e))) return
                            }
                        }
                    }, {
                        "../math/vec2": 30,
                        "../utils/Utils": 57,
                        "./Shape": 45
                    }],
                    42: [function(t, e, i) {
                        function s(t) {
                            "number" == typeof arguments[0] && (t = {
                                length: arguments[0]
                            }), t = t || {}, this.length = t.length || 1, t.type = n.LINE, n.call(this, t)
                        }
                        var n = t("./Shape"),
                            o = t("../math/vec2");
                        e.exports = s, s.prototype = new n, s.prototype.constructor = s, s.prototype.computeMomentOfInertia = function(t) {
                            return t * Math.pow(this.length, 2) / 12
                        }, s.prototype.updateBoundingRadius = function() {
                            this.boundingRadius = this.length / 2
                        };
                        var a = [o.create(), o.create()];
                        s.prototype.computeAABB = function(t, e, i) {
                            var s = this.length / 2;
                            o.set(a[0], -s, 0), o.set(a[1], s, 0), t.setFromPoints(a, e, i, 0)
                        };
                        var r = o.create(),
                            h = o.create(),
                            l = o.create(),
                            c = o.create(),
                            u = o.fromValues(0, 1);
                        s.prototype.raycast = function(t, e, i, s) {
                            var n = e.from,
                                a = e.to,
                                r = l,
                                d = c,
                                p = this.length / 2;
                            o.set(r, -p, 0), o.set(d, p, 0), o.toGlobalFrame(r, r, i, s), o.toGlobalFrame(d, d, i, s);
                            var f = o.getLineSegmentsIntersectionFraction(r, d, n, a);
                            if (f >= 0) {
                                var y = h;
                                o.rotate(y, u, s), e.reportIntersection(t, f, y, -1)
                            }
                        }
                    }, {
                        "../math/vec2": 30,
                        "./Shape": 45
                    }],
                    43: [function(t, e, i) {
                        function s(t) {
                            t = t || {}, t.type = n.PARTICLE, n.call(this, t)
                        }
                        var n = t("./Shape"),
                            o = t("../math/vec2");
                        e.exports = s, s.prototype = new n, s.prototype.constructor = s, s.prototype.computeMomentOfInertia = function(t) {
                            return 0
                        }, s.prototype.updateBoundingRadius = function() {
                            this.boundingRadius = 0
                        }, s.prototype.computeAABB = function(t, e, i) {
                            o.copy(t.lowerBound, e), o.copy(t.upperBound, e)
                        }
                    }, {
                        "../math/vec2": 30,
                        "./Shape": 45
                    }],
                    44: [function(t, e, i) {
                        function s(t) {
                            t = t || {}, t.type = n.PLANE, n.call(this, t)
                        }
                        var n = t("./Shape"),
                            o = t("../math/vec2"),
                            a = t("../utils/Utils");
                        e.exports = s, s.prototype = new n, s.prototype.constructor = s, s.prototype.computeMomentOfInertia = function(t) {
                            return 0
                        }, s.prototype.updateBoundingRadius = function() {
                            this.boundingRadius = Number.MAX_VALUE
                        }, s.prototype.computeAABB = function(t, e, i) {
                            var s = i % (2 * Math.PI),
                                n = o.set,
                                a = Number.MAX_VALUE,
                                r = t.lowerBound,
                                h = t.upperBound;
                            0 === s ? (n(r, -a, -a), n(h, a, 0)) : s === Math.PI / 2 ? (n(r, 0, -a), n(h, a, a)) : s === Math.PI ? (n(r, -a, 0), n(h, a, a)) : s === 3 * Math.PI / 2 ? (n(r, -a, -a), n(h, 0, a)) : (n(r, -a, -a), n(h, a, a)), o.add(r, r, e), o.add(h, h, e)
                        }, s.prototype.updateArea = function() {
                            this.area = Number.MAX_VALUE
                        };
                        var r = o.create(),
                            h = o.create(),
                            l = o.create(),
                            c = o.create(),
                            u = o.create();
                        s.prototype.raycast = function(t, e, i, s) {
                            var n = e.from,
                                a = e.to,
                                d = e.direction,
                                p = r,
                                f = h,
                                y = l,
                                g = c,
                                m = u;
                            o.set(g, 0, 1), o.rotate(g, g, s), o.sub(m, n, i);
                            var v = o.dot(m, g);
                            if (o.sub(m, a, i), !(v * o.dot(m, g) > 0 || o.squaredDistance(n, a) < v * v)) {
                                var b = o.dot(g, d);
                                o.sub(p, n, i);
                                var x = -o.dot(g, p) / b / e.length;
                                e.reportIntersection(t, x, g, -1)
                            }
                        }
                    }, {
                        "../math/vec2": 30,
                        "../utils/Utils": 57,
                        "./Shape": 45
                    }],
                    45: [function(t, e, i) {
                        function s(t) {
                            t = t || {}, this.body = null, this.position = n.fromValues(0, 0), t.position && n.copy(this.position, t.position), this.angle = t.angle || 0, this.type = t.type || 0, this.id = s.idCounter++, this.boundingRadius = 0, this.collisionGroup = void 0 !== t.collisionGroup ? t.collisionGroup : 1, this.collisionResponse = void 0 === t.collisionResponse || t.collisionResponse, this.collisionMask = void 0 !== t.collisionMask ? t.collisionMask : 1, this.material = t.material || null, this.area = 0, this.sensor = void 0 !== t.sensor && t.sensor, this.type && this.updateBoundingRadius(), this.updateArea()
                        }
                        e.exports = s;
                        var n = t("../math/vec2");
                        s.idCounter = 0, s.CIRCLE = 1, s.PARTICLE = 2, s.PLANE = 4, s.CONVEX = 8, s.LINE = 16, s.BOX = 32, Object.defineProperty(s, "RECTANGLE", {
                            get: function() {
                                return s.BOX
                            }
                        }), s.CAPSULE = 64, s.HEIGHTFIELD = 128, s.prototype.computeMomentOfInertia = function(t) {}, s.prototype.updateBoundingRadius = function() {}, s.prototype.updateArea = function() {}, s.prototype.computeAABB = function(t, e, i) {}, s.prototype.raycast = function(t, e, i, s) {}
                    }, {
                        "../math/vec2": 30
                    }],
                    46: [function(t, e, i) {
                        function s(t) {
                            a.call(this, t, a.GS), t = t || {}, this.iterations = t.iterations || 10, this.tolerance = t.tolerance || 1e-7, this.arrayStep = 30, this.lambda = new r.ARRAY_TYPE(this.arrayStep), this.Bs = new r.ARRAY_TYPE(this.arrayStep), this.invCs = new r.ARRAY_TYPE(this.arrayStep), this.useZeroRHS = !1, this.frictionIterations = 0, this.usedIterations = 0
                        }

                        function n(t) {
                            for (var e = t.length; e--;) t[e] = 0
                        }
                        var o = t("../math/vec2"),
                            a = t("./Solver"),
                            r = t("../utils/Utils"),
                            h = t("../equations/FrictionEquation");
                        e.exports = s, s.prototype = new a, s.prototype.constructor = s, s.prototype.solve = function(t, e) {
                            this.sortEquations();
                            var i = 0,
                                a = this.iterations,
                                l = this.frictionIterations,
                                c = this.equations,
                                u = c.length,
                                d = Math.pow(this.tolerance * u, 2),
                                p = e.bodies,
                                f = e.bodies.length,
                                y = o.add,
                                g = o.set,
                                m = this.useZeroRHS,
                                v = this.lambda;
                            if (this.usedIterations = 0, u)
                                for (var b = 0; b !== f; b++) {
                                    var x = p[b];
                                    x.updateSolveMassProperties()
                                }
                            v.length < u && (v = this.lambda = new r.ARRAY_TYPE(u + this.arrayStep), this.Bs = new r.ARRAY_TYPE(u + this.arrayStep), this.invCs = new r.ARRAY_TYPE(u + this.arrayStep)), n(v);
                            for (var _ = this.invCs, w = this.Bs, v = this.lambda, b = 0; b !== c.length; b++) {
                                var P = c[b];
                                (P.timeStep !== t || P.needsUpdate) && (P.timeStep = t, P.update()), w[b] = P.computeB(P.a, P.b, t), _[b] = P.computeInvC(P.epsilon)
                            }
                            var C, T, P, S, b, A;
                            if (0 !== u) {
                                for (b = 0; b !== f; b++) {
                                    var x = p[b];
                                    x.resetConstraintVelocity()
                                }
                                if (l) {
                                    for (i = 0; i !== l; i++) {
                                        for (S = 0, A = 0; A !== u; A++) {
                                            P = c[A];
                                            var E = s.iterateEquation(A, P, P.epsilon, w, _, v, m, t, i);
                                            S += Math.abs(E)
                                        }
                                        if (this.usedIterations++, S * S <= d) break
                                    }
                                    for (s.updateMultipliers(c, v, 1 / t), A = 0; A !== u; A++) {
                                        var I = c[A];
                                        if (I instanceof h) {
                                            for (var M = 0, O = 0; O !== I.contactEquations.length; O++) M += I.contactEquations[O].multiplier;
                                            M *= I.frictionCoefficient / I.contactEquations.length, I.maxForce = M, I.minForce = -M
                                        }
                                    }
                                }
                                for (i = 0; i !== a; i++) {
                                    for (S = 0, A = 0; A !== u; A++) {
                                        P = c[A];
                                        var E = s.iterateEquation(A, P, P.epsilon, w, _, v, m, t, i);
                                        S += Math.abs(E)
                                    }
                                    if (this.usedIterations++, S * S <= d) break
                                }
                                for (b = 0; b !== f; b++) p[b].addConstraintVelocity();
                                s.updateMultipliers(c, v, 1 / t)
                            }
                        }, s.updateMultipliers = function(t, e, i) {
                            for (var s = t.length; s--;) t[s].multiplier = e[s] * i
                        }, s.iterateEquation = function(t, e, i, s, n, o, a, r, h) {
                            var l = s[t],
                                c = n[t],
                                u = o[t],
                                d = e.computeGWlambda(),
                                p = e.maxForce,
                                f = e.minForce;
                            a && (l = 0);
                            var y = c * (l - d - i * u),
                                g = u + y;
                            return g < f * r ? y = f * r - u : g > p * r && (y = p * r - u), o[t] += y, e.addToWlambda(y), y
                        }
                    }, {
                        "../equations/FrictionEquation": 23,
                        "../math/vec2": 30,
                        "../utils/Utils": 57,
                        "./Solver": 47
                    }],
                    47: [function(t, e, i) {
                        function s(t, e) {
                            t = t || {}, o.call(this), this.type = e, this.equations = [], this.equationSortFunction = t.equationSortFunction || !1
                        }
                        var n = t("../utils/Utils"),
                            o = t("../events/EventEmitter");
                        e.exports = s, s.prototype = new o, s.prototype.constructor = s, s.prototype.solve = function(t, e) {
                            throw new Error("Solver.solve should be implemented by subclasses!")
                        };
                        var a = {
                            bodies: []
                        };
                        s.prototype.solveIsland = function(t, e) {
                            this.removeAllEquations(), e.equations.length && (this.addEquations(e.equations), a.bodies.length = 0, e.getBodies(a.bodies), a.bodies.length && this.solve(t, a))
                        }, s.prototype.sortEquations = function() {
                            this.equationSortFunction && this.equations.sort(this.equationSortFunction)
                        }, s.prototype.addEquation = function(t) {
                            t.enabled && this.equations.push(t)
                        }, s.prototype.addEquations = function(t) {
                            for (var e = 0, i = t.length; e !== i; e++) {
                                var s = t[e];
                                s.enabled && this.equations.push(s)
                            }
                        }, s.prototype.removeEquation = function(t) {
                            var e = this.equations.indexOf(t); - 1 !== e && this.equations.splice(e, 1)
                        }, s.prototype.removeAllEquations = function() {
                            this.equations.length = 0
                        }, s.GS = 1, s.ISLAND = 2
                    }, {
                        "../events/EventEmitter": 26,
                        "../utils/Utils": 57
                    }],
                    48: [function(t, e, i) {
                        function s() {
                            o.apply(this, arguments)
                        }
                        var n = t("../equations/ContactEquation"),
                            o = t("./Pool");
                        e.exports = s, s.prototype = new o, s.prototype.constructor = s, s.prototype.create = function() {
                            return new n
                        }, s.prototype.destroy = function(t) {
                            return t.bodyA = t.bodyB = null, this
                        }
                    }, {
                        "../equations/ContactEquation": 21,
                        "./Pool": 55
                    }],
                    49: [function(t, e, i) {
                        function s() {
                            o.apply(this, arguments)
                        }
                        var n = t("../equations/FrictionEquation"),
                            o = t("./Pool");
                        e.exports = s, s.prototype = new o, s.prototype.constructor = s, s.prototype.create = function() {
                            return new n
                        }, s.prototype.destroy = function(t) {
                            return t.bodyA = t.bodyB = null, this
                        }
                    }, {
                        "../equations/FrictionEquation": 23,
                        "./Pool": 55
                    }],
                    50: [function(t, e, i) {
                        function s() {
                            o.apply(this, arguments)
                        }
                        var n = t("../world/IslandNode"),
                            o = t("./Pool");
                        e.exports = s, s.prototype = new o, s.prototype.constructor = s, s.prototype.create = function() {
                            return new n
                        }, s.prototype.destroy = function(t) {
                            return t.reset(), this
                        }
                    }, {
                        "../world/IslandNode": 60,
                        "./Pool": 55
                    }],
                    51: [function(t, e, i) {
                        function s() {
                            o.apply(this, arguments)
                        }
                        var n = t("../world/Island"),
                            o = t("./Pool");
                        e.exports = s, s.prototype = new o, s.prototype.constructor = s, s.prototype.create = function() {
                            return new n
                        }, s.prototype.destroy = function(t) {
                            return t.reset(), this
                        }
                    }, {
                        "../world/Island": 58,
                        "./Pool": 55
                    }],
                    52: [function(t, e, i) {
                        function s() {
                            this.overlappingShapesLastState = new n, this.overlappingShapesCurrentState = new n, this.recordPool = new a({
                                size: 16
                            }), this.tmpDict = new n, this.tmpArray1 = []
                        }
                        var n = t("./TupleDictionary"),
                            o = t("./OverlapKeeperRecord"),
                            a = t("./OverlapKeeperRecordPool"),
                            r = t("./Utils");
                        e.exports = s, s.prototype.tick = function() {
                            for (var t = this.overlappingShapesLastState, e = this.overlappingShapesCurrentState, i = t.keys.length; i--;) {
                                var s = t.keys[i],
                                    n = t.getByKey(s),
                                    o = e.getByKey(s);
                                n && this.recordPool.release(n)
                            }
                            t.reset(), t.copy(e), e.reset()
                        }, s.prototype.setOverlapping = function(t, e, i, s) {
                            var n = this.overlappingShapesLastState,
                                o = this.overlappingShapesCurrentState;
                            if (!o.get(e.id, s.id)) {
                                var a = this.recordPool.get();
                                a.set(t, e, i, s), o.set(e.id, s.id, a)
                            }
                        }, s.prototype.getNewOverlaps = function(t) {
                            return this.getDiff(this.overlappingShapesLastState, this.overlappingShapesCurrentState, t)
                        }, s.prototype.getEndOverlaps = function(t) {
                            return this.getDiff(this.overlappingShapesCurrentState, this.overlappingShapesLastState, t)
                        }, s.prototype.bodiesAreOverlapping = function(t, e) {
                            for (var i = this.overlappingShapesCurrentState, s = i.keys.length; s--;) {
                                var n = i.keys[s],
                                    o = i.data[n];
                                if (o.bodyA === t && o.bodyB === e || o.bodyA === e && o.bodyB === t) return !0
                            }
                            return !1
                        }, s.prototype.getDiff = function(t, e, i) {
                            var i = i || [],
                                s = t,
                                n = e;
                            i.length = 0;
                            for (var o = n.keys.length; o--;) {
                                var a = n.keys[o],
                                    r = n.data[a];
                                if (!r) throw new Error("Key " + a + " had no data!");
                                s.data[a] || i.push(r)
                            }
                            return i
                        }, s.prototype.isNewOverlap = function(t, e) {
                            var i = 0 | t.id,
                                s = 0 | e.id,
                                n = this.overlappingShapesLastState,
                                o = this.overlappingShapesCurrentState;
                            return !n.get(i, s) && !!o.get(i, s)
                        }, s.prototype.getNewBodyOverlaps = function(t) {
                            this.tmpArray1.length = 0;
                            var e = this.getNewOverlaps(this.tmpArray1);
                            return this.getBodyDiff(e, t)
                        }, s.prototype.getEndBodyOverlaps = function(t) {
                            this.tmpArray1.length = 0;
                            var e = this.getEndOverlaps(this.tmpArray1);
                            return this.getBodyDiff(e, t)
                        }, s.prototype.getBodyDiff = function(t, e) {
                            e = e || [];
                            for (var i = this.tmpDict, s = t.length; s--;) {
                                var n = t[s];
                                i.set(0 | n.bodyA.id, 0 | n.bodyB.id, n)
                            }
                            for (s = i.keys.length; s--;) {
                                var n = i.getByKey(i.keys[s]);
                                n && e.push(n.bodyA, n.bodyB)
                            }
                            return i.reset(), e
                        }
                    }, {
                        "./OverlapKeeperRecord": 53,
                        "./OverlapKeeperRecordPool": 54,
                        "./TupleDictionary": 56,
                        "./Utils": 57
                    }],
                    53: [function(t, e, i) {
                        function s(t, e, i, s) {
                            this.shapeA = e, this.shapeB = s, this.bodyA = t, this.bodyB = i
                        }
                        e.exports = s, s.prototype.set = function(t, e, i, n) {
                            s.call(this, t, e, i, n)
                        }
                    }, {}],
                    54: [function(t, e, i) {
                        function s() {
                            o.apply(this, arguments)
                        }
                        var n = t("./OverlapKeeperRecord"),
                            o = t("./Pool");
                        e.exports = s, s.prototype = new o, s.prototype.constructor = s, s.prototype.create = function() {
                            return new n
                        }, s.prototype.destroy = function(t) {
                            return t.bodyA = t.bodyB = t.shapeA = t.shapeB = null, this
                        }
                    }, {
                        "./OverlapKeeperRecord": 53,
                        "./Pool": 55
                    }],
                    55: [function(t, e, i) {
                        function s(t) {
                            t = t || {}, this.objects = [], void 0 !== t.size && this.resize(t.size)
                        }
                        e.exports = s, s.prototype.resize = function(t) {
                            for (var e = this.objects; e.length > t;) e.pop();
                            for (; e.length < t;) e.push(this.create());
                            return this
                        }, s.prototype.get = function() {
                            var t = this.objects;
                            return t.length ? t.pop() : this.create()
                        }, s.prototype.release = function(t) {
                            return this.destroy(t), this.objects.push(t), this
                        }
                    }, {}],
                    56: [function(t, e, i) {
                        function s() {
                            this.data = {}, this.keys = []
                        }
                        var n = t("./Utils");
                        e.exports = s, s.prototype.getKey = function(t, e) {
                            return t |= 0, e |= 0, (0 | t) == (0 | e) ? -1 : 0 | ((0 | t) > (0 | e) ? t << 16 | 65535 & e : e << 16 | 65535 & t)
                        }, s.prototype.getByKey = function(t) {
                            return t |= 0, this.data[t]
                        }, s.prototype.get = function(t, e) {
                            return this.data[this.getKey(t, e)]
                        }, s.prototype.set = function(t, e, i) {
                            if (!i) throw new Error("No data!");
                            var s = this.getKey(t, e);
                            return this.data[s] || this.keys.push(s), this.data[s] = i, s
                        }, s.prototype.reset = function() {
                            for (var t = this.data, e = this.keys, i = e.length; i--;) delete t[e[i]];
                            e.length = 0
                        }, s.prototype.copy = function(t) {
                            this.reset(), n.appendArray(this.keys, t.keys);
                            for (var e = t.keys.length; e--;) {
                                var i = t.keys[e];
                                this.data[i] = t.data[i]
                            }
                        }
                    }, {
                        "./Utils": 57
                    }],
                    57: [function(t, e, i) {
                        function s() {}
                        e.exports = s, s.appendArray = function(t, e) {
                            if (e.length < 15e4) t.push.apply(t, e);
                            else
                                for (var i = 0, s = e.length; i !== s; ++i) t.push(e[i])
                        }, s.splice = function(t, e, i) {
                            i = i || 1;
                            for (var s = e, n = t.length - i; s < n; s++) t[s] = t[s + i];
                            t.length = n
                        }, "undefined" != typeof P2_ARRAY_TYPE ? s.ARRAY_TYPE = P2_ARRAY_TYPE : "undefined" != typeof Float32Array ? s.ARRAY_TYPE = Float32Array : s.ARRAY_TYPE = Array, s.extend = function(t, e) {
                            for (var i in e) t[i] = e[i]
                        }, s.defaults = function(t, e) {
                            t = t || {};
                            for (var i in e) i in t || (t[i] = e[i]);
                            return t
                        }
                    }, {}],
                    58: [function(t, e, i) {
                        function s() {
                            this.equations = [], this.bodies = []
                        }
                        var n = t("../objects/Body");
                        e.exports = s, s.prototype.reset = function() {
                            this.equations.length = this.bodies.length = 0
                        };
                        var o = [];
                        s.prototype.getBodies = function(t) {
                            var e = t || [],
                                i = this.equations;
                            o.length = 0;
                            for (var s = 0; s !== i.length; s++) {
                                var n = i[s]; - 1 === o.indexOf(n.bodyA.id) && (e.push(n.bodyA), o.push(n.bodyA.id)), -1 === o.indexOf(n.bodyB.id) && (e.push(n.bodyB), o.push(n.bodyB.id))
                            }
                            return e
                        }, s.prototype.wantsToSleep = function() {
                            for (var t = 0; t < this.bodies.length; t++) {
                                var e = this.bodies[t];
                                if (e.type === n.DYNAMIC && !e.wantsToSleep) return !1
                            }
                            return !0
                        }, s.prototype.sleep = function() {
                            for (var t = 0; t < this.bodies.length; t++) {
                                this.bodies[t].sleep()
                            }
                            return !0
                        }
                    }, {
                        "../objects/Body": 31
                    }],
                    59: [function(t, e, i) {
                        function s(t) {
                            this.nodePool = new r({
                                size: 16
                            }), this.islandPool = new h({
                                size: 8
                            }), this.equations = [], this.islands = [], this.nodes = [], this.queue = []
                        }
                        var n = t("../math/vec2"),
                            o = t("./Island"),
                            a = t("./IslandNode"),
                            r = t("./../utils/IslandNodePool"),
                            h = t("./../utils/IslandPool"),
                            l = t("../objects/Body");
                        e.exports = s, s.getUnvisitedNode = function(t) {
                            for (var e = t.length, i = 0; i !== e; i++) {
                                var s = t[i];
                                if (!s.visited && s.body.type === l.DYNAMIC) return s
                            }
                            return !1
                        }, s.prototype.visit = function(t, e, i) {
                            e.push(t.body);
                            for (var s = t.equations.length, n = 0; n !== s; n++) {
                                var o = t.equations[n]; - 1 === i.indexOf(o) && i.push(o)
                            }
                        }, s.prototype.bfs = function(t, e, i) {
                            var n = this.queue;
                            for (n.length = 0, n.push(t), t.visited = !0, this.visit(t, e, i); n.length;)
                                for (var o = n.pop(), a; a = s.getUnvisitedNode(o.neighbors);) a.visited = !0, this.visit(a, e, i), a.body.type === l.DYNAMIC && n.push(a)
                        }, s.prototype.split = function(t) {
                            for (var e = t.bodies, i = this.nodes, n = this.equations; i.length;) this.nodePool.release(i.pop());
                            for (var o = 0; o !== e.length; o++) {
                                var a = this.nodePool.get();
                                a.body = e[o], i.push(a)
                            }
                            for (var r = 0; r !== n.length; r++) {
                                var h = n[r],
                                    o = e.indexOf(h.bodyA),
                                    l = e.indexOf(h.bodyB),
                                    c = i[o],
                                    u = i[l];
                                c.neighbors.push(u), u.neighbors.push(c), c.equations.push(h), u.equations.push(h)
                            }
                            for (var d = this.islands, o = 0; o < d.length; o++) this.islandPool.release(d[o]);
                            d.length = 0;
                            for (var p; p = s.getUnvisitedNode(i);) {
                                var f = this.islandPool.get();
                                this.bfs(p, f.bodies, f.equations), d.push(f)
                            }
                            return d
                        }
                    }, {
                        "../math/vec2": 30,
                        "../objects/Body": 31,
                        "./../utils/IslandNodePool": 50,
                        "./../utils/IslandPool": 51,
                        "./Island": 58,
                        "./IslandNode": 60
                    }],
                    60: [function(t, e, i) {
                        function s(t) {
                            this.body = t, this.neighbors = [], this.equations = [], this.visited = !1
                        }
                        e.exports = s, s.prototype.reset = function() {
                            this.equations.length = 0, this.neighbors.length = 0, this.visited = !1, this.body = null
                        }
                    }, {}],
                    61: [function(t, e, i) {
                        function s(t) {
                            f.apply(this), t = t || {}, this.springs = [], this.bodies = [], this.disabledBodyCollisionPairs = [], this.solver = t.solver || new n, this.narrowphase = new M(this), this.islandManager = new B, this.gravity = r.fromValues(0, -9.78), t.gravity && r.copy(this.gravity, t.gravity), this.frictionGravity = r.length(this.gravity) || 10, this.useWorldGravityAsFrictionGravity = !0, this.useFrictionGravityOnZeroGravity = !0, this.broadphase = t.broadphase || new I, this.broadphase.setWorld(this), this.constraints = [], this.defaultMaterial = new v, this.defaultContactMaterial = new b(this.defaultMaterial, this.defaultMaterial), this.lastTimeStep = 1 / 60, this.applySpringForces = !0, this.applyDamping = !0, this.applyGravity = !0, this.solveConstraints = !0, this.contactMaterials = [], this.time = 0, this.accumulator = 0, this.stepping = !1, this.bodiesToBeRemoved = [], this.islandSplit = void 0 === t.islandSplit || !!t.islandSplit, this.emitImpactEvent = !0, this._constraintIdCounter = 0, this._bodyIdCounter = 0, this.postStepEvent = {
                                type: "postStep"
                            }, this.addBodyEvent = {
                                type: "addBody",
                                body: null
                            }, this.removeBodyEvent = {
                                type: "removeBody",
                                body: null
                            }, this.addSpringEvent = {
                                type: "addSpring",
                                spring: null
                            }, this.impactEvent = {
                                type: "impact",
                                bodyA: null,
                                bodyB: null,
                                shapeA: null,
                                shapeB: null,
                                contactEquation: null
                            }, this.postBroadphaseEvent = {
                                type: "postBroadphase",
                                pairs: null
                            }, this.sleepMode = s.NO_SLEEPING, this.beginContactEvent = {
                                type: "beginContact",
                                shapeA: null,
                                shapeB: null,
                                bodyA: null,
                                bodyB: null,
                                contactEquations: []
                            }, this.endContactEvent = {
                                type: "endContact",
                                shapeA: null,
                                shapeB: null,
                                bodyA: null,
                                bodyB: null
                            }, this.preSolveEvent = {
                                type: "preSolve",
                                contactEquations: null,
                                frictionEquations: null
                            }, this.overlappingShapesLastState = {
                                keys: []
                            }, this.overlappingShapesCurrentState = {
                                keys: []
                            }, this.overlapKeeper = new R
                        }
                        var n = t("../solver/GSSolver"),
                            o = t("../solver/Solver"),
                            a = t("../collision/Ray"),
                            r = t("../math/vec2"),
                            h = t("../shapes/Circle"),
                            l = t("../shapes/Convex"),
                            c = t("../shapes/Line"),
                            u = t("../shapes/Plane"),
                            d = t("../shapes/Capsule"),
                            p = t("../shapes/Particle"),
                            f = t("../events/EventEmitter"),
                            y = t("../objects/Body"),
                            g = t("../shapes/Shape"),
                            m = t("../objects/LinearSpring"),
                            v = t("../material/Material"),
                            b = t("../material/ContactMaterial"),
                            x = t("../constraints/DistanceConstraint"),
                            _ = t("../constraints/Constraint"),
                            w = t("../constraints/LockConstraint"),
                            P = t("../constraints/RevoluteConstraint"),
                            C = t("../constraints/PrismaticConstraint"),
                            T = t("../constraints/GearConstraint"),
                            S = t("../../package.json"),
                            A = t("../collision/Broadphase"),
                            E = t("../collision/AABB"),
                            I = t("../collision/SAPBroadphase"),
                            M = t("../collision/Narrowphase"),
                            O = t("../utils/Utils"),
                            R = t("../utils/OverlapKeeper"),
                            B = t("./IslandManager"),
                            D = t("../objects/RotationalSpring");
                        e.exports = s, s.prototype = new Object(f.prototype), s.prototype.constructor = s, s.NO_SLEEPING = 1, s.BODY_SLEEPING = 2, s.ISLAND_SLEEPING = 4, s.prototype.addConstraint = function(t) {
                            this.constraints.push(t)
                        }, s.prototype.addContactMaterial = function(t) {
                            this.contactMaterials.push(t)
                        }, s.prototype.removeContactMaterial = function(t) {
                            var e = this.contactMaterials.indexOf(t); - 1 !== e && O.splice(this.contactMaterials, e, 1)
                        }, s.prototype.getContactMaterial = function(t, e) {
                            for (var i = this.contactMaterials, s = 0, n = i.length; s !== n; s++) {
                                var o = i[s];
                                if (o.materialA.id === t.id && o.materialB.id === e.id || o.materialA.id === e.id && o.materialB.id === t.id) return o
                            }
                            return !1
                        }, s.prototype.removeConstraint = function(t) {
                            var e = this.constraints.indexOf(t); - 1 !== e && O.splice(this.constraints, e, 1)
                        };
                        var L = r.create(),
                            k = r.create(),
                            F = r.create(),
                            G = r.create(),
                            U = r.create(),
                            N = r.create(),
                            j = r.create(),
                            W = r.fromValues(0, 0),
                            X = r.fromValues(0, 0),
                            H = r.fromValues(0, 0),
                            V = r.fromValues(0, 0);
                        s.prototype.step = function(t, e, i) {
                            if (i = i || 10, 0 === (e = e || 0)) this.internalStep(t), this.time += t;
                            else {
                                this.accumulator += e;
                                for (var s = 0; this.accumulator >= t && s < i;) this.internalStep(t), this.time += t, this.accumulator -= t, s++;
                                for (var n = this.accumulator % t / t, o = 0; o !== this.bodies.length; o++) {
                                    var a = this.bodies[o];
                                    r.lerp(a.interpolatedPosition, a.previousPosition, a.position, n), a.interpolatedAngle = a.previousAngle + n * (a.angle - a.previousAngle)
                                }
                            }
                        };
                        var Y = [];
                        s.prototype.internalStep = function(t) {
                            this.stepping = !0;
                            var e = this,
                                i = this.springs.length,
                                n = this.springs,
                                o = this.bodies,
                                a = this.gravity,
                                h = this.solver,
                                l = this.bodies.length,
                                c = this.broadphase,
                                u = this.narrowphase,
                                d = this.constraints,
                                p, f, g = U,
                                m = N,
                                v = j,
                                b = r.scale,
                                x = r.add,
                                _ = r.rotate,
                                w = this.islandManager;
                            if (this.overlapKeeper.tick(), this.lastTimeStep = t, this.useWorldGravityAsFrictionGravity) {
                                var P = r.length(this.gravity);
                                0 === P && this.useFrictionGravityOnZeroGravity || (this.frictionGravity = P)
                            }
                            if (this.applyGravity)
                                for (var C = 0; C !== l; C++) {
                                    var T = o[C],
                                        S = T.force;
                                    T.type === y.DYNAMIC && T.sleepState !== y.SLEEPING && (r.scale(v, a, T.mass * T.gravityScale), x(S, S, v))
                                }
                            if (this.applySpringForces)
                                for (var C = 0; C !== i; C++) {
                                    var A = n[C];
                                    A.applyForce()
                                }
                            if (this.applyDamping)
                                for (var C = 0; C !== l; C++) {
                                    var T = o[C];
                                    T.type === y.DYNAMIC && T.applyDamping(t)
                                }
                            for (var E = c.getCollisionPairs(this), I = this.disabledBodyCollisionPairs, C = I.length - 2; C >= 0; C -= 2)
                                for (var M = E.length - 2; M >= 0; M -= 2)(I[C] === E[M] && I[C + 1] === E[M + 1] || I[C + 1] === E[M] && I[C] === E[M + 1]) && E.splice(M, 2);
                            var R = d.length;
                            for (C = 0; C !== R; C++) {
                                var B = d[C];
                                if (!B.collideConnected)
                                    for (var M = E.length - 2; M >= 0; M -= 2)(B.bodyA === E[M] && B.bodyB === E[M + 1] || B.bodyB === E[M] && B.bodyA === E[M + 1]) && E.splice(M, 2)
                            }
                            this.postBroadphaseEvent.pairs = E, this.emit(this.postBroadphaseEvent), this.postBroadphaseEvent.pairs = null, u.reset(this);
                            for (var C = 0, D = E.length; C !== D; C += 2)
                                for (var L = E[C], k = E[C + 1], F = 0, G = L.shapes.length; F !== G; F++)
                                    for (var W = L.shapes[F], X = W.position, H = W.angle, V = 0, q = k.shapes.length; V !== q; V++) {
                                        var z = k.shapes[V],
                                            K = z.position,
                                            J = z.angle,
                                            Z = this.defaultContactMaterial;
                                        if (W.material && z.material) {
                                            var Q = this.getContactMaterial(W.material, z.material);
                                            Q && (Z = Q)
                                        }
                                        this.runNarrowphase(u, L, W, X, H, k, z, K, J, Z, this.frictionGravity)
                                    }
                            for (var C = 0; C !== l; C++) {
                                var $ = o[C];
                                $._wakeUpAfterNarrowphase && ($.wakeUp(), $._wakeUpAfterNarrowphase = !1)
                            }
                            if (this.has("endContact")) {
                                this.overlapKeeper.getEndOverlaps(Y);
                                for (var tt = this.endContactEvent, V = Y.length; V--;) {
                                    var et = Y[V];
                                    tt.shapeA = et.shapeA, tt.shapeB = et.shapeB, tt.bodyA = et.bodyA, tt.bodyB = et.bodyB, this.emit(tt)
                                }
                                Y.length = 0
                            }
                            var it = this.preSolveEvent;
                            it.contactEquations = u.contactEquations, it.frictionEquations = u.frictionEquations, this.emit(it), it.contactEquations = it.frictionEquations = null;
                            var R = d.length;
                            for (C = 0; C !== R; C++) d[C].update();
                            if (u.contactEquations.length || u.frictionEquations.length || R)
                                if (this.islandSplit) {
                                    for (w.equations.length = 0, O.appendArray(w.equations, u.contactEquations), O.appendArray(w.equations, u.frictionEquations), C = 0; C !== R; C++) O.appendArray(w.equations, d[C].equations);
                                    w.split(this);
                                    for (var C = 0; C !== w.islands.length; C++) {
                                        var st = w.islands[C];
                                        st.equations.length && h.solveIsland(t, st)
                                    }
                                } else {
                                    for (h.addEquations(u.contactEquations), h.addEquations(u.frictionEquations), C = 0; C !== R; C++) h.addEquations(d[C].equations);
                                    this.solveConstraints && h.solve(t, this), h.removeAllEquations()
                                } for (var C = 0; C !== l; C++) {
                                var $ = o[C];
                                $.integrate(t)
                            }
                            for (var C = 0; C !== l; C++) o[C].setZeroForce();
                            if (this.emitImpactEvent && this.has("impact"))
                                for (var nt = this.impactEvent, C = 0; C !== u.contactEquations.length; C++) {
                                    var ot = u.contactEquations[C];
                                    ot.firstImpact && (nt.bodyA = ot.bodyA, nt.bodyB = ot.bodyB, nt.shapeA = ot.shapeA, nt.shapeB = ot.shapeB, nt.contactEquation = ot, this.emit(nt))
                                }
                            if (this.sleepMode === s.BODY_SLEEPING)
                                for (C = 0; C !== l; C++) o[C].sleepTick(this.time, !1, t);
                            else if (this.sleepMode === s.ISLAND_SLEEPING && this.islandSplit) {
                                for (C = 0; C !== l; C++) o[C].sleepTick(this.time, !0, t);
                                for (var C = 0; C < this.islandManager.islands.length; C++) {
                                    var st = this.islandManager.islands[C];
                                    st.wantsToSleep() && st.sleep()
                                }
                            }
                            this.stepping = !1;
                            for (var at = this.bodiesToBeRemoved, C = 0; C !== at.length; C++) this.removeBody(at[C]);
                            at.length = 0, this.emit(this.postStepEvent)
                        }, s.prototype.runNarrowphase = function(t, e, i, s, n, o, a, h, l, c, u) {
                            if (0 != (i.collisionGroup & a.collisionMask) && 0 != (a.collisionGroup & i.collisionMask)) {
                                r.rotate(W, s, e.angle), r.rotate(X, h, o.angle), r.add(W, W, e.position), r.add(X, X, o.position);
                                var d = n + e.angle,
                                    p = l + o.angle;
                                t.enableFriction = c.friction > 0, t.frictionCoefficient = c.friction;
                                var f;
                                f = e.type === y.STATIC || e.type === y.KINEMATIC ? o.mass : o.type === y.STATIC || o.type === y.KINEMATIC ? e.mass : e.mass * o.mass / (e.mass + o.mass), t.slipForce = c.friction * u * f, t.restitution = c.restitution, t.surfaceVelocity = c.surfaceVelocity, t.frictionStiffness = c.frictionStiffness, t.frictionRelaxation = c.frictionRelaxation, t.stiffness = c.stiffness, t.relaxation = c.relaxation, t.contactSkinSize = c.contactSkinSize, t.enabledEquations = e.collisionResponse && o.collisionResponse && i.collisionResponse && a.collisionResponse;
                                var g = t[i.type | a.type],
                                    m = 0;
                                if (g) {
                                    var v = i.sensor || a.sensor,
                                        b = t.frictionEquations.length;
                                    m = i.type < a.type ? g.call(t, e, i, W, d, o, a, X, p, v) : g.call(t, o, a, X, p, e, i, W, d, v);
                                    var x = t.frictionEquations.length - b;
                                    if (m) {
                                        if (e.allowSleep && e.type === y.DYNAMIC && e.sleepState === y.SLEEPING && o.sleepState === y.AWAKE && o.type !== y.STATIC) {
                                            r.squaredLength(o.velocity) + Math.pow(o.angularVelocity, 2) >= 2 * Math.pow(o.sleepSpeedLimit, 2) && (e._wakeUpAfterNarrowphase = !0)
                                        }
                                        if (o.allowSleep && o.type === y.DYNAMIC && o.sleepState === y.SLEEPING && e.sleepState === y.AWAKE && e.type !== y.STATIC) {
                                            r.squaredLength(e.velocity) + Math.pow(e.angularVelocity, 2) >= 2 * Math.pow(e.sleepSpeedLimit, 2) && (o._wakeUpAfterNarrowphase = !0)
                                        }
                                        if (this.overlapKeeper.setOverlapping(e, i, o, a), this.has("beginContact") && this.overlapKeeper.isNewOverlap(i, a)) {
                                            var _ = this.beginContactEvent;
                                            if (_.shapeA = i, _.shapeB = a, _.bodyA = e, _.bodyB = o, _.contactEquations.length = 0, "number" == typeof m)
                                                for (var w = t.contactEquations.length - m; w < t.contactEquations.length; w++) _.contactEquations.push(t.contactEquations[w]);
                                            this.emit(_)
                                        }
                                        if ("number" == typeof m && x > 1)
                                            for (var w = t.frictionEquations.length - x; w < t.frictionEquations.length; w++) {
                                                var P = t.frictionEquations[w];
                                                P.setSlipForce(P.getSlipForce() / x)
                                            }
                                    }
                                }
                            }
                        }, s.prototype.addSpring = function(t) {
                            this.springs.push(t);
                            var e = this.addSpringEvent;
                            e.spring = t, this.emit(e), e.spring = null
                        }, s.prototype.removeSpring = function(t) {
                            var e = this.springs.indexOf(t); - 1 !== e && O.splice(this.springs, e, 1)
                        }, s.prototype.addBody = function(t) {
                            if (-1 === this.bodies.indexOf(t)) {
                                this.bodies.push(t), t.world = this;
                                var e = this.addBodyEvent;
                                e.body = t, this.emit(e), e.body = null
                            }
                        }, s.prototype.removeBody = function(t) {
                            if (this.stepping) this.bodiesToBeRemoved.push(t);
                            else {
                                t.world = null;
                                var e = this.bodies.indexOf(t); - 1 !== e && (O.splice(this.bodies, e, 1), this.removeBodyEvent.body = t, t.resetConstraintVelocity(), this.emit(this.removeBodyEvent), this.removeBodyEvent.body = null)
                            }
                        }, s.prototype.getBodyById = function(t) {
                            for (var e = this.bodies, i = 0; i < e.length; i++) {
                                var s = e[i];
                                if (s.id === t) return s
                            }
                            return !1
                        }, s.prototype.disableBodyCollision = function(t, e) {
                            this.disabledBodyCollisionPairs.push(t, e)
                        }, s.prototype.enableBodyCollision = function(t, e) {
                            for (var i = this.disabledBodyCollisionPairs, s = 0; s < i.length; s += 2)
                                if (i[s] === t && i[s + 1] === e || i[s + 1] === t && i[s] === e) return void i.splice(s, 2)
                        }, s.prototype.clear = function() {
                            this.time = 0, this.solver && this.solver.equations.length && this.solver.removeAllEquations();
                            for (var t = this.constraints, e = t.length - 1; e >= 0; e--) this.removeConstraint(t[e]);
                            for (var i = this.bodies, e = i.length - 1; e >= 0; e--) this.removeBody(i[e]);
                            for (var n = this.springs, e = n.length - 1; e >= 0; e--) this.removeSpring(n[e]);
                            for (var o = this.contactMaterials, e = o.length - 1; e >= 0; e--) this.removeContactMaterial(o[e]);
                            s.apply(this)
                        };
                        var q = r.create(),
                            z = r.fromValues(0, 0),
                            K = r.fromValues(0, 0);
                        s.prototype.hitTest = function(t, e, i) {
                            i = i || 0;
                            var s = new y({
                                    position: t
                                }),
                                n = new p,
                                o = t,
                                a = 0,
                                c = q,
                                f = z,
                                g = K;
                            s.addShape(n);
                            for (var m = this.narrowphase, v = [], b = 0, x = e.length; b !== x; b++)
                                for (var _ = e[b], w = 0, P = _.shapes.length; w !== P; w++) {
                                    var C = _.shapes[w];
                                    r.rotate(c, C.position, _.angle), r.add(c, c, _.position);
                                    var T = C.angle + _.angle;
                                    (C instanceof h && m.circleParticle(_, C, c, T, s, n, o, 0, !0) || C instanceof l && m.particleConvex(s, n, o, 0, _, C, c, T, !0) || C instanceof u && m.particlePlane(s, n, o, 0, _, C, c, T, !0) || C instanceof d && m.particleCapsule(s, n, o, 0, _, C, c, T, !0) || C instanceof p && r.squaredLength(r.sub(g, c, t)) < i * i) && v.push(_)
                                }
                            return v
                        }, s.prototype.setGlobalStiffness = function(t) {
                            for (var e = this.constraints, i = 0; i !== e.length; i++)
                                for (var s = e[i], n = 0; n !== s.equations.length; n++) {
                                    var o = s.equations[n];
                                    o.stiffness = t, o.needsUpdate = !0
                                }
                            for (var a = this.contactMaterials, i = 0; i !== a.length; i++) {
                                var s = a[i];
                                s.stiffness = s.frictionStiffness = t
                            }
                            var s = this.defaultContactMaterial;
                            s.stiffness = s.frictionStiffness = t
                        }, s.prototype.setGlobalRelaxation = function(t) {
                            for (var e = 0; e !== this.constraints.length; e++)
                                for (var i = this.constraints[e], s = 0; s !== i.equations.length; s++) {
                                    var n = i.equations[s];
                                    n.relaxation = t, n.needsUpdate = !0
                                }
                            for (var e = 0; e !== this.contactMaterials.length; e++) {
                                var i = this.contactMaterials[e];
                                i.relaxation = i.frictionRelaxation = t
                            }
                            var i = this.defaultContactMaterial;
                            i.relaxation = i.frictionRelaxation = t
                        };
                        var J = new E,
                            Z = [];
                        s.prototype.raycast = function(t, e) {
                            return e.getAABB(J), this.broadphase.aabbQuery(this, J, Z), e.intersectBodies(t, Z), Z.length = 0, t.hasHit()
                        }
                    }, {
                        "../../package.json": 6,
                        "../collision/AABB": 7,
                        "../collision/Broadphase": 8,
                        "../collision/Narrowphase": 10,
                        "../collision/Ray": 11,
                        "../collision/SAPBroadphase": 13,
                        "../constraints/Constraint": 14,
                        "../constraints/DistanceConstraint": 15,
                        "../constraints/GearConstraint": 16,
                        "../constraints/LockConstraint": 17,
                        "../constraints/PrismaticConstraint": 18,
                        "../constraints/RevoluteConstraint": 19,
                        "../events/EventEmitter": 26,
                        "../material/ContactMaterial": 27,
                        "../material/Material": 28,
                        "../math/vec2": 30,
                        "../objects/Body": 31,
                        "../objects/LinearSpring": 32,
                        "../objects/RotationalSpring": 33,
                        "../shapes/Capsule": 38,
                        "../shapes/Circle": 39,
                        "../shapes/Convex": 40,
                        "../shapes/Line": 42,
                        "../shapes/Particle": 43,
                        "../shapes/Plane": 44,
                        "../shapes/Shape": 45,
                        "../solver/GSSolver": 46,
                        "../solver/Solver": 47,
                        "../utils/OverlapKeeper": 52,
                        "../utils/Utils": 57,
                        "./IslandManager": 59
                    }]
                }, {}, [36])(36)
            })
        }, function(t, e, i) {
            /**
